colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 10, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit3
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
n = 100
te_n = 1000
p_sig = 5
p = 200
out = matrix(0, 16, 13)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
tr = data_generation(n, p, SNR = 10, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit3
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 10, response = "regression")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 10, response = "regression")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(-poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.95, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(-poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_time[i] = mean(t2)
}
}
fit10
en1_f1
tr = data_generation(n, p, SNR = .2, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit3
log(0.0009765625)
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
n = 100
te_n = 1000
p_sig = 5
p = 100
out = matrix(0, 16, 14)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "test", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 5, response = "classification")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit3
tr = data_generation(n, p, SNR = .2, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit3
log(0.2689226)
tr = data_generation(n, p, SNR = 8, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit3
tr = data_generation(n, p, SNR = 10, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit3
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.95, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit10
tr = data_generation(n, p, SNR = 1, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.95, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit10
p=25
SNR = c(0.1, 1 ,10)
sqrt(10 * (p-5) / SNR)
SNR = c(0.1, 1 ,10)
sqrt(10 * (p-5) / SNR)
SNR = c(0.1, 1 ,10, 20)
sqrt(10 * (p-5) / SNR)
p = 25
SNR = c(0.1, 1 ,10, 20)
sqrt(10 / (p-5) / SNR)
0.05 + 1.96 * c(-1, 1) * sqrt(0.1 * 0.9 / 100,000)
sqrt(0.1 * 0.9 / 100,000)
0.05 + 1.96 * c(-1, 1) * sqrt(0.1 * 0.9 / 100000)
0.1 + 1.96 * c(-1, 1) * sqrt(0.1 * 0.9 / 100000)
0.05 + 1.96 * c(-1, 1) * sqrt(0.05 * 0.95 / 100000)
0.1 + 1.96 * c(-1, 1) * sqrt(0.1 * 0.9 / 1000)
0.05 + 1.96 * c(-1, 1) * sqrt(0.05 * 0.95 / 1000)
eps = 0.12
2 * eps^2 / (0.12^2 * eps^2)
2 * eps^2 / (0.12 * eps^2)
2 * eps / (0.12 * eps)
2/0.12
/0.12
1/0.12
n = 100
X = unif()
n = 200
X = runif(35)
X = matrix(runif(n * 35), n, 35)
X
f = rep(0, n)
prod()
prod(1,2)
prod(c(1,2), c(3,4))
f = 10 * exp(-2 * X[, 1]^2) * exp(-2 * X[, 2]^2) * exp(-2 * X[, 3]^2) * exp(-2 * X[, 4]^2) * exp(-2 * X[, 5]^2)
f
for(i in 6:35) f = f + X[,i]
f
var(f)
var(f) / 1.3^2
Var(exp(-2 * X[, 1]^2))
var(exp(-2 * X[, 1]^2))
var(exp(-2 * X[, 1]^2)) * var(exp(-2 * X[, 2]^2)) * var(exp(-2 * X[, 3]^2)) * var(exp(-2 * X[, 4]^2)) * var(exp(-2 * X[, 5]^2))
vv = var(exp(-2 * X[, 1]^2)) * var(exp(-2 * X[, 2]^2)) * var(exp(-2 * X[, 3]^2)) * var(exp(-2 * X[, 4]^2)) * var(exp(-2 * X[, 5]^2))
x = matrix(0, n, 5)
x[, 1] = runif(n)
U = runif(n)
for(j in 2:5){
x[, j] = (runif(n) + 2 * U)/(1 + 2)
}
cor(x)
x = matrix(0, n, 5)
x[, 1] = runif(n)
U = runif(n)
for(j in 2:5){
x[, j] = (runif(n) + 3 * U)/(1 + 3)
}
cor(x)
1/50
x = matrix(0, n, 5)
x[, 1] = runif(n)
U = runif(n)
for(j in 2:5){
x[, j] = (runif(n) + 4 * U)/(1 + 4)
}
cor(x)
x = matrix(0, n, 5)
x[, 1] = runif(n)
U = runif(n)
for(j in 2:5){
x[, j] = (runif(n) + 4 * U)/(1 + 4)
}
cor(x)
var(-sin(2 * x[, 1])) + var(x[, 2]^2 - 25 / 12) + var(x[, 3]) + var(exp(-x[, 4]) - 2/5 * sin(5/2))
var(-sin(2 * x[, 1]))
f1 = function(t) -sin(2 * t)
f2 = function(t) t^2 - 25 / 12
f3 = function(t) t
f4 = function(t) exp(-t) - 2/5 * sin(5/2)
f = f1(x[, 1]) + f1(x[, 2]) + f1(x[, 3]) + f1(x[, 4])
f
plot(x[,1], f1(x[, 1]))
plot(x[,2], f1(x[, 2]))
plot(x[,3], f1(x[, 3]))
plot(x[,4], f1(x[, 4]))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
par(mfrow = c(1, 4))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
par(mfrow = c(1, 1))
pi = exp(f)/(exp(f) + 1)
pi
plot(pi)
f1 = function(t) t - 0.5
f2 = function(t) (2 * t - 1)^2 - 0.4
f3 = function(t) sin(2 * pi * t) / (2 - sin(pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^2 + 0.5*sin(2 * pi * t)^3 - 0.4
f = f1(x[, 1]) + f2(x[, 2]) + f3(x[, 3]) + f4(x[, 4])
par(mfrow = c(1, 4))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
par(mfrow = c(1, 1))
f1 = function(t) t - 0.5
f2 = function(t) (2 * t - 1)^2 - 0.4
f3 = function(t) sin(2 * pi * t) / (2 - sin(pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^2 + 0.5*sin(2 * pi * t)^3 - 0.4
f = f1(x[, 1]) + f2(x[, 2]) + f3(x[, 3]) + f4(x[, 4])
par(mfrow = c(1, 4))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
f1 = function(t) t - 0.5
f2 = function(t) (2 * t - 1)^2 - 0.4
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 - 0.4
f = f1(x[, 1]) + f2(x[, 2]) + f3(x[, 3]) + f4(x[, 4])
par(mfrow = c(1, 4))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
par(mfrow = c(1, 1))
f1 = function(t) t - 0.5
f2 = function(t) (2 * t - 1)^2 - 0.4
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 - 0.4
f = f1(x[, 1]) + f2(x[, 2]) + f3(x[, 3]) + f4(x[, 4])
par(mfrow = c(1, 4))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
par(mfrow = c(1, 1))
pi = exp(f)/(exp(f) + 1)
rbinom(100, pi)
rbinom(100, prob = pi)
rbinom(100, size = 100, prob = pi)
rbinom(c(0, 1), size = 100, prob = pi)
f = 5 * f1(x[,1]) + 2 * f2(x[,2]) + 3 * f3(x[,3]) + 6 * f4(x[,4])
V_sig = var(5 * f1(x[,1])) + var(2 * f2(x[,2])) + var(3 * f3(x[,3])) + var(6 * f4(x[,4]))
V_sig
f1 = function(t) t - 0.5
f2 = function(t) (2 * t - 1)^2 - 0.4
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 - 0.4
t = 1
x = matrix(0, n, p)
t = 1
x = matrix(runif(n * p), n, p)
# x[, 1] = runif(n)
U = runif(n)
for(j in 1:p){
x[, j] = (runif(n) + t * U)/(1 + t)
}
f1 = function(t) t - 0.5
f2 = function(t) (2 * t - 1)^2 - 0.4
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 - 0.4
f = f1(x[, 1]) + f2(x[, 2]) + f3(x[, 3]) + f4(x[, 4])
par(mfrow = c(1, 4))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
par(mfrow = c(1, 1))
f1 = function(t) t - 0.5
f2 = function(t) (2 * t - 1)^2 - 0.4
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*(sin(2 * pi * t))^2 + 0.4*(cos(2 * pi * t))^3 + 0.5*(sin(2 * pi * t))^3 - 0.4
f = f1(x[, 1]) + f2(x[, 2]) + f3(x[, 3]) + f4(x[, 4])
par(mfrow = c(1, 4))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
par(mfrow = c(1, 1))
rbinom(c(0, 1), size = 100, prob = pi)
pi = exp(f)/(exp(f) + 1)
rbinom(c(0, 1), size = 100, prob = pi)
x
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*(sin(2 * pi * t))^2 + 0.4*(cos(2 * pi * t))^3 + 0.5*(sin(2 * pi * t))^3
f = f1(x[, 1]) + f2(x[, 2]) + f3(x[, 3]) + f4(x[, 4])
par(mfrow = c(1, 4))
plot(x[,1], f1(x[, 1]))
plot(x[,2], f2(x[, 2]))
plot(x[,3], f3(x[, 3]))
plot(x[,4], f4(x[, 4]))
par(mfrow = c(1, 1))
pi = exp(f)/(exp(f) + 1)
rbinom(c(0, 1), size = 100, prob = pi)
pi = exp(f)/(exp(f) + 1)
rbinom(c(0, 1), size = 100, prob = pi)
f
pi = exp(f)/(exp(f) + 1)
rbinom(c(0, 1), size = 100, prob = pi)
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(cdcosso)
devtools::install_github("jiieunshin/cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
library(MASS)
n = 100
te_n = 1000
p_sig = 5
p = 200
out = matrix(0, 24, 14)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "test", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(100, 200)){
for(p in c(25, 50, 100, 200)){ # signal 20%, 10%, 5%, 2.5%
# for(nb in c(12, 25, 50, 100)){
iter = 50
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 5, response = "regression")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 5, response = "regression")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(-poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.95, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(-poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 1
out$tp[ll] = round(mean(en3_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4)
out$fp[ll] = round(mean(en3_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4)
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4)
out$test[[ll]] = 0
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 0.95
out$tp[ll] = round(mean(en1_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4)
out$fp[ll] = round(mean(en1_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4)
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4)
out$test[[ll]] = wilcox.test(en1_f1, en3_f1)$p.value
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", d, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('gamma=1 \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel, na.rm = TRUE) ,"(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en3_tp, na.rm = TRUE), 4), "(", round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4), ")", "\n")
cat('fp :', round(mean(en3_fp, na.rm = TRUE), 4), "(", round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('gamma=0.95 \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel, na.rm = TRUE) ,"(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en1_tp, na.rm = TRUE), 4), "(", round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4), ")", "\n")
cat('fp :', round(mean(en1_fp, na.rm = TRUE), 4), "(", round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
library(cdcosso)
devtools::install_github("jiieunshin/cdcosso")
devtools::install_github("jiieunshin/cdcosso", force = T)
library(cdcosso)
library(cdcosso)
devtools::install_github("jiieunshin/cdcosso", force = T)
library(cdcosso)
