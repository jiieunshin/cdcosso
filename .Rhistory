B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[d]] = K_temp
} else{
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds, y, family)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
if(family != "binomial"){
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
}
if(family == "binomial"){
if(is.null(y)) stop("The input of y is essential.")
# Separate indices for 0s and 1s
idx_0 <- which(y == 0)
idx_1 <- which(y == 1)
n0 <- length(idx_0)
n1 <- length(idx_1)
# Compute fold sizes for each class
fsize_0 <- floor(n0 / folds)
fsize_1 <- floor(n1 / folds)
splits_0 <- fsize_0 * rep(1, folds)
splits_1 <- fsize_1 * rep(1, folds)
nextra_0 <- n0 - folds * fsize_0
nextra_1 <- n1 - folds * fsize_1
if (nextra_0 > 0) splits_0[1:nextra_0] <- splits_0[1:nextra_0] + 1
if (nextra_1 > 0) splits_1[1:nextra_1] <- splits_1[1:nextra_1] + 1
randid_0 <- sample(idx_0, n0)
randid_1 <- sample(idx_1, n1)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n / folds))
# Assign 0s and 1s to folds
for (i in 1:folds) {
if(i == 1){
tempid_0 <- randid_0[1:(cumsum(splits_0)[i])]
tempid_1 <- randid_1[1:(cumsum(splits_1)[i])]
} else{
tempid_0 <- randid_0[(cumsum(splits_0)[i - 1] + 1):(cumsum(splits_0)[i])]
tempid_1 <- randid_1[(cumsum(splits_1)[i - 1] + 1):(cumsum(splits_1)[i])]
}
tempid <- c(tempid_0, tempid_1)
length(tempid) <- ceiling(n / folds)
IDmat[, i] <- tempid
}
}
return(IDmat)
}
x = tr_x
y = tr_y
family = 'binomial'
gamma = 0.8
type = "spline"
one.std = TRUE
scale = T
wt = rep(1, ncol(x))
kparam = 1
nfolds =5
algo = "CD"
lambda0 = exp(seq(log(2^{-6}), log(2^{6}), length.out = 20))
lambda_theta = exp(seq(log(2^{-6}), log(2^{6}), length.out = 20))
n = length(y)
p = length(wt)
cat("fit COSSO  with n = ", n, "p =", ncol(x), "\n")
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
cat("kernel:", type, "and d =", d, "\n")
cand.lambda = lambda0
mscale = wt
obj = binomial()
cat("proceeding... \n")
d = K$numK
n <- length(y)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
# initialize
f.init = rep(0.5, n)
ff = f.init
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
#
fold = cvsplitID(n, 5, y, family = obj$family)
measure <- matrix(NA, 5, len)
f=k=1
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, ]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, n, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, ]
}
te_Rtheta <- combine_kernel(te_R, mscale)
#
zw = z[tr_id] * sqrt(w[tr_id])
Rw = tr_Rtheta * w[tr_id]
sw = sqrt(w)[tr_id]
Rw2 = Rtheta * w
Rw2
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = obj$family, lambda = 1e-4)$beta)
c.init
cw = c.init / sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, tr_n, n, cand.lambda[k], PACKAGE = "cdcosso")
b.new = fit$b.new
fit
#
fold = cvsplitID(n, 5, y, family = obj$family)
measure <- matrix(NA, 5, len)
for(f in 1:5){
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, ]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, n, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, ]
}
te_Rtheta <- combine_kernel(te_R, mscale)
#
zw = z[tr_id] * sqrt(w[tr_id])
Rw = tr_Rtheta * w[tr_id]
sw = sqrt(w)[tr_id]
Rw2 = Rtheta * w
for (k in 1:len){
if(algo == "CD"){
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = obj$family, lambda = 1e-4)$beta)
cw = c.init / sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, tr_n, n, cand.lambda[k], PACKAGE = "cdcosso")
b.new = fit$b.new
cw.new = fit$cw.new
c.new = cw.new * sqrt(w)
# cat("R calculate:", sum(zw - Rw %*% cw.new) / sum(sw), "\n")
# cat("C calculate:", b.new, "\n")
}
if(sum(is.nan(cw.new)) == n){
next
} else{
# validation
testfhat = c(b.new + te_Rtheta %*% c.new)
testmu = obj$linkinv(testfhat)
if(obj$family == "gaussian") measure[f, k] <- mean((testfhat - y[te_id])^2)
# if(obj$family == "binomial") measure[f, k] <- mean(y[te_id] != ifelse(mu.new < 0.5, 0, 1))
# if(obj$family = "poisson") measure[k] <- mean(poisson()$dev.resids(y, mu.new, rep(1, n)))
}
}
}
for(f in 1:5){
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, ]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, n, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, ]
}
te_Rtheta <- combine_kernel(te_R, mscale)
#
zw = z[tr_id] * sqrt(w[tr_id])
Rw = tr_Rtheta * w[tr_id]
sw = sqrt(w)[tr_id]
Rw2 = Rtheta * w
for (k in 1:len){
if(algo == "CD"){
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = obj$family, lambda = 1e-4)$beta)
cw = c.init / sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, tr_n, n, cand.lambda[k], PACKAGE = "cdcosso")
b.new = fit$b.new
cw.new = fit$cw.new
c.new = cw.new * sqrt(w)
# cat("R calculate:", sum(zw - Rw %*% cw.new) / sum(sw), "\n")
# cat("C calculate:", b.new, "\n")
}
if(sum(is.nan(cw.new)) == n){
next
} else{
# validation
testfhat = c(b.new + te_Rtheta %*% c.new)
testmu = obj$linkinv(testfhat)
if(obj$family == "gaussian") measure[f, k] <- mean((testfhat - y[te_id])^2)
if(obj$family == "binomial") measure[f, k] <- mean(y[te_id] != ifelse(mu.new < 0.5, 0, 1))
if(obj$family = "poisson") measure[k] <- mean(poisson()$dev.resids(y, mu.new, rep(1, n)))
for(f in 1:5){
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, ]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, n, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, ]
}
te_Rtheta <- combine_kernel(te_R, mscale)
#
zw = z[tr_id] * sqrt(w[tr_id])
Rw = tr_Rtheta * w[tr_id]
sw = sqrt(w)[tr_id]
Rw2 = Rtheta * w
for (k in 1:len){
if(algo == "CD"){
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = obj$family, lambda = 1e-4)$beta)
cw = c.init / sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, tr_n, n, cand.lambda[k], PACKAGE = "cdcosso")
b.new = fit$b.new
cw.new = fit$cw.new
c.new = cw.new * sqrt(w)
# cat("R calculate:", sum(zw - Rw %*% cw.new) / sum(sw), "\n")
# cat("C calculate:", b.new, "\n")
}
if(sum(is.nan(cw.new)) == n){
next
} else{
# validation
testfhat = c(b.new + te_Rtheta %*% c.new)
testmu = obj$linkinv(testfhat)
if(obj$family == "gaussian") measure[f, k] <- mean((testfhat - y[te_id])^2)
if(obj$family == "binomial") measure[f, k] <- mean(y[te_id] != ifelse(mu.new < 0.5, 0, 1))
if(obj$family == "poisson") measure[k] <- mean(poisson()$dev.resids(y, mu.new, rep(1, n)))
}
}
}
for(f in 1:5){
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, ]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, n, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, ]
}
te_Rtheta <- combine_kernel(te_R, mscale)
#
zw = z[tr_id] * sqrt(w[tr_id])
Rw = tr_Rtheta * w[tr_id]
sw = sqrt(w)[tr_id]
Rw2 = Rtheta * w
for (k in 1:len){
if(algo == "CD"){
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = obj$family, lambda = 1e-4)$beta)
cw = c.init / sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, tr_n, n, cand.lambda[k], PACKAGE = "cdcosso")
b.new = fit$b.new
cw.new = fit$cw.new
c.new = cw.new * sqrt(w)
# cat("R calculate:", sum(zw - Rw %*% cw.new) / sum(sw), "\n")
# cat("C calculate:", b.new, "\n")
}
if(sum(is.nan(cw.new)) == n){
next
} else{
# validation
testfhat = c(b.new + te_Rtheta %*% c.new)
testmu = obj$linkinv(testfhat)
if(obj$family == "gaussian") measure[f, k] <- mean((testfhat - y[te_id])^2)
if(obj$family == "binomial") measure[f, k] <- mean(y[te_id] != ifelse(testmu < 0.5, 0, 1))
if(obj$family == "poisson") measure[k] <- mean(poisson()$dev.resids(y, testmu, rep(1, n)))
}
}
}
main = "Binomial Family"
ylab = expression("GCV(" * lambda[0] * ")")
# optimal lambda1
measure_mean = colMeans(measure, na.rm = T)
measure_se = apply(measure, 2, sd, na.rm = T) / sqrt(te_n)
min_id = which.min(measure_mean)
optlambda = cand.lambda[min_id]
plot(log(cand.lambda), measure_mean, main = main, xlab = expression("Log(" * lambda[0] * ")"), ylab = ylab,
ylim = range(c(measure_mean - measure_se, measure_mean + measure_se)), pch = 15, col = 'red')
arrows(x0 = log(cand.lambda), y0 = measure_mean - measure_se,
x1 = log(cand.lambda), y1 = measure_mean + measure_se,
angle = 90, code = 3, length = 0.1, col = "darkgray")
tr = data_generation(n, p, SNR = 5, response = "classification")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
n = 100
te_n = 1000
p_sig = 5
p = 100
out = matrix(0, 16, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
tr = data_generation(n, p, response = "classification")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
fit10
out = matrix(0, 16, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(100, 200)){
for(p in c(25, 50, 100, 500)){ # signal 20%, 10%, 5%, 1%
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 5, response = "classification")
tr_x = tr$x
tr_y = tr$y
# table(tr_y)
te = data_generation(te_n, p, SNR = 5, response = "classification")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(-poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(-poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$method[[ll]] = "QP"
out$tp[ll] = round(mean(en3_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4)
out$fp[ll] = round(mean(en3_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4)
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$method[[ll]] = "CD"
out$tp[ll] = round(mean(en1_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4)
out$fp[ll] = round(mean(en1_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4)
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", d, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('quadratic prog \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel, na.rm = TRUE) ,"(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en3_tp, na.rm = TRUE), 4), "(", round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4), ")", "\n")
cat('fp :', round(mean(en3_fp, na.rm = TRUE), 4), "(", round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('coordinate descent \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel, na.rm = TRUE) ,"(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en1_tp, na.rm = TRUE), 4), "(", round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4), ")", "\n")
cat('fp :', round(mean(en1_fp, na.rm = TRUE), 4), "(", round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
fit10
en1_f1
en3_f1
fit3
