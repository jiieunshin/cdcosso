c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-8
conv2 = abs(c.old[j] - c.new[j]) > 5
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | err) break
}
if(i == 1 & (conv1 | conv2 | err)) c.new = c.init
# zw = z * sqrt(w)
# Rw = Rtheta * w
# cw = c.init
# cw.new = temp = c.init / sqrt(w)
# sw = sqrt(w)
# fit = .Call("cox_c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
#
# b.new = fit$b.new
# c.new = fit$c.new
# cw.new = fit$cw.new
# z = (Hess %*% c.new - Grad) / lambda0
# loglik = t(z - Rtheta %*% c.new) %*% W %*% (z - Rtheta %*% c.new)
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + Hess/lambda0))) / n)^2
# GCV = as.numeric(loglik / den / n)
# print(i)
UHU = Rtheta %*% My_solve(GH$H + lambda0 * Rtheta, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
gettheta.cd = function(init.theta, f.init, G, time, status, bhat, chat, ACV_pen, const, lambda0, lambda_theta, gamma, Risk){
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
theta.old = init.theta
theta.new = rep(0, d)
for(i in 1:20){
loss = rep(1, d)
GH = gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = dvec[j] - L + U - r
# L + U
# Dmat[j, -j] %*% theta.old[-j]
theta.new[j] = ifelse(theta.new[j] <= 0, 0, theta.new[j])
theta.new[j] = theta.new[j] / (Dmat[j, j] + 2 * lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
conv2 = sum(loss == 0) == d
# conv3 = max(loss) > 10
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-6
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
if(i == 1 & !conv) theta.new = rep(0, d)
ACV = cosso::PartialLik(time, status, Risk, G %*% theta.new) + ACV_pen
return(list(theta.new = theta.new, ACV = ACV))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, algo = "CD"), silent = TRUE)
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
type = "spline"
algo = "CD"
family = 'Cox'
gamma = 0.95
kparam=1
lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
lambda_theta = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20))
wt = rep(1, ncol(x))
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
model = getc_cvfit
lambda0 = getc_cvfit$optlambda
mscale = wt
n = length(time)
d = length(mscale)
IDmat = model$IDmat
RS = RiskSet(time, status)
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
if(algo == "QP") lambda_theta = exp(seq(log(1e-4), log(40), length.out = length(lambda_theta)))
len = length(lambda_theta)
measure <- rep(0, len)
save_theta <- list()
k=1
gettheta.cd = function(init.theta, f.init, G, time, status, bhat, chat, ACV_pen, const, lambda0, lambda_theta, gamma, Risk){
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
theta.old = init.theta
theta.new = rep(0, d)
for(i in 1:20){
loss = rep(1, d)
GH = gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = dvec[j] - L + U - r
# L + U
# Dmat[j, -j] %*% theta.old[-j]
theta.new[j] = ifelse(theta.new[j] <= 0, 0, theta.new[j])
theta.new[j] = theta.new[j] / (Dmat[j, j] + 2 * lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
conv2 = sum(loss == 0) == d
# conv3 = max(loss) > 10
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-6
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
print(theta.new)
if(i == 1 & !conv) theta.new = rep(0, d)
ACV = cosso::PartialLik(time, status, Risk, G %*% theta.new) + ACV_pen
return(list(theta.new = theta.new, ACV = ACV))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
loss = rep(1, d)
fit = gettheta.cd(rep(1, d), model$f.new, G, time, status, 0, model$c.new, model$ACV_pen,
0, lambda0, lambda_theta[k], gamma, RS)
a = rep(1, d)
f.init = model$f.new
chat = model$c.new
ACV_pen = model$ACV_pen
lambda_theta = lambda_theta[k]
RS = Risk
init.theta = rep(1, d)
Risk = RS
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
theta.old = init.theta
theta.new = rep(0, d)
loss = rep(1, d)
GH = gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = dvec[j] - L + U - r
dvec[j] - L + U - r
theta.new[j] = dvec[j] - L + U - r
# L + U
# Dmat[j, -j] %*% theta.old[-j]
theta.new[j] = ifelse(theta.new[j] <= 0, 0, theta.new[j])
theta.new[j] = theta.new[j] / (Dmat[j, j] + 2 * lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
conv2 = sum(loss == 0) == d
loss
conv2 = sum(loss == 0) == d
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-6
}
conv
conv
theta.old[j] = theta.new[j]
theta.old
j
j=1
theta.old = init.theta
theta.new = rep(0, d)
loss = rep(1, d)
GH = gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
dvec[j] - L + U - r
j
dvec
- L + U - r
dvec
loss = rep(1, d)
GH = gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
(GH$H %*% theta.old - GH$Gradient)
init.theta
theta.old = init.theta
theta.new = rep(0, d)
loss = rep(1, d)
GH = gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
(GH$H %*% theta.old - GH$Gradient)
theta.old
GH$H %*% theta.old
GH$H
gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
theta.old
chat
model$c.new
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
# wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
# w = wz$weight
# z = wz$z
# return(list(zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
c.old = c.init
c.new = rep(0, n)
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:1){ # outer iteration
GH = try(calculate_GH_for_C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = class(GH) == "try-error"
if(err) break
Hess = GH$Hessian
Grad = GH$Gradient
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:n){
V1 = t(z - Rtheta[ ,-j] %*% c.old[-j]) %*% t(W) %*% Rtheta[, j]
V2 = (Rtheta[j, -j] %*% c.old[-j]) / lambda0
V3 = t(Rtheta[, j]) %*% (t(W) %*% Rtheta[, j])
V4 = Rtheta[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-8
conv2 = abs(c.old[j] - c.new[j]) > 5
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | err) break
}
if(i == 1 & (conv1 | conv2 | err)) c.new = c.init
print(c.new)
# zw = z * sqrt(w)
# Rw = Rtheta * w
# cw = c.init
# cw.new = temp = c.init / sqrt(w)
# sw = sqrt(w)
# fit = .Call("cox_c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
#
# b.new = fit$b.new
# c.new = fit$c.new
# cw.new = fit$cw.new
# z = (Hess %*% c.new - Grad) / lambda0
# loglik = t(z - Rtheta %*% c.new) %*% W %*% (z - Rtheta %*% c.new)
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + Hess/lambda0))) / n)^2
# GCV = as.numeric(loglik / den / n)
# print(i)
UHU = Rtheta %*% My_solve(GH$H + lambda0 * Rtheta, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
K
mscale = wt
cand.lambda = lambda0
d = K$numK
n <- length(time)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
f.init = rep(0.5, n)
RS = RiskSet(time, status)
measure <- rep(0, length(cand.lambda))
gcv_list  <- rep(0, length(cand.lambda))
k=1
EigRtheta = eigen(Rtheta)
if (min(EigRtheta$value) < 0) {
Rtheta = Rtheta + max(1e-07, 1.5 * abs(min(EigRtheta$value))) * diag(nrow(Rtheta))
EigRtheta = eigen(Rtheta)
}
pseudoX = Rtheta %*% EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values))
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda, alpha = 0,
standardize = FALSE)
c.init = as.numeric(EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values)) %*% ssCox.en$beta[, 1])
c.init
cand.lambda
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda[k], alpha = 0,
standardize = FALSE)
ssCox.en
k
cand.lambda[k]
glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda[k], alpha = 0,
standardize = FALSE)
glmnet(Rtheta, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda[k], alpha = 0,
standardize = FALSE)
cand.lambda
cand.lambda[k]
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = 1e-7, alpha = 0,
standardize = FALSE)
ssCox.en
glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = 1e-7, alpha = 0,
standardize = FALSE)
glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = 1e-10, alpha = 0,
standardize = FALSE)
lambda0 = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20))
lambda_theta = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20))
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
type = "spline"
algo = "CD"
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
mscale = wt
cand.lambda = lambda0
d = K$numK
n <- length(time)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
f.init = rep(0.5, n)
RS = RiskSet(time, status)
measure <- rep(0, length(cand.lambda))
gcv_list  <- rep(0, length(cand.lambda))
k=1
EigRtheta = eigen(Rtheta)
if (min(EigRtheta$value) < 0) {
Rtheta = Rtheta + max(1e-07, 1.5 * abs(min(EigRtheta$value))) * diag(nrow(Rtheta))
EigRtheta = eigen(Rtheta)
}
pseudoX = Rtheta %*% EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values))
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda[k], alpha = 0,
standardize = FALSE)
glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda[k], alpha = 0,
standardize = FALSE)
tr_x = X
tr_y = y
te_x = X
te_y = y
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
type = "spline"
algo = "CD"
family = 'Cox'
gamma = 0.95
kparam=1
lambda0 = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20))
lambda_theta = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20))
wt = rep(1, ncol(x))
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
mscale = wt
cand.lambda = lambda0
d = K$numK
n <- length(time)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
f.init = rep(0.5, n)
RS = RiskSet(time, status)
measure <- rep(0, length(cand.lambda))
gcv_list  <- rep(0, length(cand.lambda))
EigRtheta = eigen(Rtheta)
if (min(EigRtheta$value) < 0) {
Rtheta = Rtheta + max(1e-07, 1.5 * abs(min(EigRtheta$value))) * diag(nrow(Rtheta))
EigRtheta = eigen(Rtheta)
}
pseudoX = Rtheta %*% EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values))
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda[k], alpha = 0,
standardize = FALSE)
ssCox.en
for (k in 1:length(cand.lambda)){
if(algo == "CD"){
EigRtheta = eigen(Rtheta)
if (min(EigRtheta$value) < 0) {
Rtheta = Rtheta + max(1e-07, 1.5 * abs(min(EigRtheta$value))) * diag(nrow(Rtheta))
EigRtheta = eigen(Rtheta)
}
pseudoX = Rtheta %*% EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values))
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda[k], alpha = 0,
standardize = FALSE)
c.init = as.numeric(EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values)) %*% ssCox.en$beta[, 1])
# f.init = c(Rtheta %*% c.init)
fit = getc.cd(R, Rtheta, mscale, f.init, c.init, time, status, cand.lambda[k], RS)
# Rw = Rtheta * fit$c.new
# XX = fit$zw.new - Rw %*% fit$cw.new - fit$b.new * sqrt(fit$w.new)
# num = t(XX) %*% XX + 1
# S = Rw %*% ginv(t(Rw) %*% Rw) %*% t(Rw)
# den = (1 - sum(diag(S)) / n)^2 + 1
# measure[k] = as.vector( num / den / n )
measure[k] = fit$ACV
# gcv_list[k] = fit$GCV
}
if(algo == "QP"){
# c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
#                           lambda = cand.lambda[k], alpha = 0)$beta)
EigRtheta = eigen(Rtheta)
if (min(EigRtheta$value) < 0) {
Rtheta = Rtheta + max(1e-07, 1.5 * abs(min(EigRtheta$value))) * diag(nrow(Rtheta))
EigRtheta = eigen(Rtheta)
}
pseudoX = Rtheta %*% EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values))
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda, alpha = 0,
standardize = FALSE)
c.init = as.numeric(EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values)) %*% ssCox.en$beta[, 1])
fit = getc.QP(R, Rtheta, c.init, time, status, mscale, cand.lambda[k], RS)
measure[k] = fit$ACV
}
}
