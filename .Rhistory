K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline" | type == "spline2") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear" | type == "linear2") {
K = tcrossprod(x, y)
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam, scale)
{
# if (length(unique(c(A, B))) <= 6)
#   K_temp <- cat_kernel(A, B)
# else K_temp <- spline_kernel(A, B)
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for two-way interactions
if (type == "spline") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[d]] = K_temp
} else{
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds, y, family)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
if(family != "binomial"){
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
}
if(family == "binomial"){
if(is.null(y)) stop("The input of y is essential.")
# Separate indices for 0s and 1s
idx_0 <- which(y == 0)
idx_1 <- which(y == 1)
n0 <- length(idx_0)
n1 <- length(idx_1)
# Compute fold sizes for each class
fsize_0 <- floor(n0 / folds)
fsize_1 <- floor(n1 / folds)
splits_0 <- fsize_0 * rep(1, folds)
splits_1 <- fsize_1 * rep(1, folds)
nextra_0 <- n0 - folds * fsize_0
nextra_1 <- n1 - folds * fsize_1
if (nextra_0 > 0) splits_0[1:nextra_0] <- splits_0[1:nextra_0] + 1
if (nextra_1 > 0) splits_1[1:nextra_1] <- splits_1[1:nextra_1] + 1
randid_0 <- sample(idx_0, n0)
randid_1 <- sample(idx_1, n1)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n / folds))
# Assign 0s and 1s to folds
for (i in 1:folds) {
if(i == 1){
tempid_0 <- randid_0[1:(cumsum(splits_0)[i])]
tempid_1 <- randid_1[1:(cumsum(splits_1)[i])]
} else{
tempid_0 <- randid_0[(cumsum(splits_0)[i - 1] + 1):(cumsum(splits_0)[i])]
tempid_1 <- randid_1[(cumsum(splits_1)[i - 1] + 1):(cumsum(splits_1)[i])]
}
tempid <- c(tempid_0, tempid_1)
length(tempid) <- ceiling(n / folds)
IDmat[, i] <- tempid
}
}
return(IDmat)
}
KL = function(f, mu, obj){
if(obj$family == "gaussian") B = f^2/2
if(obj$family == "binomial") B = log(1 + exp(f))
if(obj$family == "poisson") B = exp(f)
return(mean(-(mu * f) + B))
}
n = length(time)
p = length(wt)
nbasis = max(40, ceiling(12 * n^(2/9)))
basis.id = sort(sample(1:n, nbasis))
nbasis = as.integer(nbasis)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
# solve c (1st)
getc_cvfit = cv.getc.subset(K, time, status, nbasis, basis.id, rep(1, d)/wt^2, lambda0, type, kparam, one.std = TRUE, show = TRUE)
glmnet
cox.path
glmnet::cox.path
library(glmnet)
glmnet::cox.path
glmnet::coxgrad()
glmnet::coxgrad
coxgrad2
glmnet::coxgrad2
# cand.lambda = lambda0
mscale = wt
cand.lambda = lambda0
d = K$numK
n <- length(status)
len = length(cand.lambda)
R = array(NA, c(n, nbasis, d))
for(j in 1:d){
R[, , j] = K$K[[j]][, basis.id]
}
Rtheta <- combine_kernel(R, mscale)
R2 = array(NA, c(nbasis, nbasis, d))
for(j in 1:d){
R2[, , j] = K$K[[j]][basis.id, basis.id]
}
Rtheta2 <- combine_kernel(R2, mscale)
fold = cvsplitID(n, 5, status, family = "gaussian")
measure <- matrix(NA, 5, len)
f=k=1
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, nbasis, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, basis.id]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, nbasis, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, basis.id]
}
te_Rtheta <- combine_kernel(te_R, mscale)
# initialize
loop = 0
EigRtheta2 = eigen(Rtheta2)
while (min(eigen(Rtheta2)$values) < 0 & loop < 10) {
loop = loop + 1
Rtheta2 = Rtheta2 + 1e-08 * diag(nbasis)
EigRtheta2 = eigen(Rtheta2)
}
if (loop == 10)
EigRtheta2$values[EigRtheta2$values < 0] = 1e-08
pseudoX = Rtheta %*% EigRtheta2$vectors %*% diag(sqrt(1/EigRtheta2$values))
c.init = as.vector(glmnet(pseudoX, cbind(time, status), family = "cox", lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
tr_RS = RiskSet(time[tr_id], status[tr_id])
fit = getc.cd(tr_R, R2, tr_Rtheta, Rtheta2, mscale, c.init, time[tr_id], status[tr_id], cand.lambda[k], tr_RS)
fit
coxgrad(exp(Rtheta) %*% c.init, survival::Surv(time, status))
exp(Rtheta) %*% c.init
exp(Rtheta %*% c.init)
coxgrad(exp(Rtheta %*% c.init), survival::Surv(time, status))
survival::Surv(time, status)
exp(Rtheta %*% c.init)
fit
c.init
exp(Rtheta %*% c.init)
c.init
Rtheta
pseudoX
dim(Rtheta)
Rtheta[1:10]
pseudoX[1:10]
c.init = as.vector(glmnet(Rtheta, cbind(time, status), family = "cox", lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
c.init
exp(Rtheta %*% c.init)
coxgrad(exp(Rtheta %*% c.init), survival::Surv(time, status))
glmnet::glmnet
glmnet:::cox.path
glmnet:::cox.fit
coxgrad_results <- coxgrad(exp(Rtheta %*% c.init), survival::Surv(time, status), mscale, std.weights = FALSE, diag.hessian = TRUE)
coxgrad_results
w <- -attributes(coxgrad_results)$diag_hessian
w
eta = exp(Rtheta %*% c.init)
(eta - offset) - ifelse(w != 0, -coxgrad_results/w, 0)
offset
z <- (eta - 0) - ifelse(w != 0, -coxgrad_results/w, 0)
z
glmnet:::cox.fit
Rtheta
fit <- elnet.fit(Rtheta, z, w, lambda, alpha, intercept = FALSE,
thresh = thresh, maxit = maxit, penalty.factor = vp,
exclude = exclude, lower.limits = lower.limits, upper.limits = upper.limits,
warm = fit, from.glmnet.fit = TRUE, save.fit = TRUE)
fit <- glmnet::elnet.fit(Rtheta, z, w, lambda, alpha, intercept = FALSE,
thresh = thresh, maxit = maxit, penalty.factor = vp,
exclude = exclude, lower.limits = lower.limits, upper.limits = upper.limits,
warm = fit, from.glmnet.fit = TRUE, save.fit = TRUE)
fit <- glmnet:::elnet.fit(Rtheta, z, w, lambda, alpha, intercept = FALSE,
thresh = thresh, maxit = maxit, penalty.factor = vp,
exclude = exclude, lower.limits = lower.limits, upper.limits = upper.limits,
warm = fit, from.glmnet.fit = TRUE, save.fit = TRUE)
fit <- glmnet:::elnet.fit(Rtheta, z, w, cand.lambda[k], gamma, intercept = FALSE)
fit
gamma
fit$beta
c.new = fit$beta
test_GH = cosso::gradient.Hessian.C(c.new, te_R, R2, time[te_id], status[te_id], mscale, cand.lambda[k], te_RS)
# calculate ACV for test data
te_RS = RiskSet(time[te_id], status[te_id])
test_GH = cosso::gradient.Hessian.C(c.new, te_R, R2, time[te_id], status[te_id], mscale, cand.lambda[k], te_RS)
test_GH
UHU = te_Rtheta %*% My_solve(test_GH$H, t(te_Rtheta))
sum(status[te_id] == 1)/te_n^2 * (sum(diag(UHU))/(te_n - 1) - sum(UHU)/(te_n^2 - te_n))
for(f in 1:5){
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, nbasis, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, basis.id]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, nbasis, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, basis.id]
}
te_Rtheta <- combine_kernel(te_R, mscale)
# initialize
loop = 0
EigRtheta2 = eigen(Rtheta2)
while (min(eigen(Rtheta2)$values) < 0 & loop < 10) {
loop = loop + 1
Rtheta2 = Rtheta2 + 1e-08 * diag(nbasis)
EigRtheta2 = eigen(Rtheta2)
}
if (loop == 10)
EigRtheta2$values[EigRtheta2$values < 0] = 1e-08
pseudoX = Rtheta %*% EigRtheta2$vectors %*% diag(sqrt(1/EigRtheta2$values))
for (k in 1:len){
c.init = as.vector(glmnet(Rtheta, cbind(time, status), family = "cox", lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
eta = exp(Rtheta %*% c.init)
coxgrad_results <- coxgrad(eta, survival::Surv(time, status), mscale, std.weights = FALSE, diag.hessian = TRUE)
w <- -attributes(coxgrad_results)$diag_hessian
z <- (eta - 0) - ifelse(w != 0, -coxgrad_results/w, 0)
fit <- glmnet:::elnet.fit(Rtheta, z, w, cand.lambda[k], gamma, intercept = FALSE)
c.new = fit$beta
tr_RS = RiskSet(time[tr_id], status[tr_id])
fit = getc.cd(tr_R, R2, tr_Rtheta, Rtheta2, mscale, c.init, time[tr_id], status[tr_id], cand.lambda[k], tr_RS)
# calculate ACV for test data
te_RS = RiskSet(time[te_id], status[te_id])
test_GH = cosso::gradient.Hessian.C(c.new, te_R, R2, time[te_id], status[te_id], mscale, cand.lambda[k], te_RS)
#       test_GH = .Call("gradient_Hessian_C", fit$c.new, as.integer(tr_n), as.integer(nbasis), as.integer(ncol(te_RS)), exp(te_Rtheta %*% fit$c.new),
#                       te_Rtheta, Rtheta2, time[te_id], as.integer(status[te_id]), mscale, cand.lambda[k], as.integer(te_RS),
#                       as.integer(table(time[te_id][status[te_id] == 1])),
#                       PACKAGE = "cdcosso")
UHU = te_Rtheta %*% My_solve(test_GH$H, t(te_Rtheta))
ACV_pen = sum(status[te_id] == 1)/te_n^2 * (sum(diag(UHU))/(te_n - 1) - sum(UHU)/(te_n^2 - te_n))
measure[f, k] = PartialLik(time[te_id], status[te_id], te_RS, te_Rtheta %*% fit$c.new) + ACV_pen
}
}
for(f in 1:5){
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, nbasis, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, basis.id]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, nbasis, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, basis.id]
}
te_Rtheta <- combine_kernel(te_R, mscale)
# initialize
loop = 0
EigRtheta2 = eigen(Rtheta2)
while (min(eigen(Rtheta2)$values) < 0 & loop < 10) {
loop = loop + 1
Rtheta2 = Rtheta2 + 1e-08 * diag(nbasis)
EigRtheta2 = eigen(Rtheta2)
}
if (loop == 10)
EigRtheta2$values[EigRtheta2$values < 0] = 1e-08
pseudoX = Rtheta %*% EigRtheta2$vectors %*% diag(sqrt(1/EigRtheta2$values))
for (k in 1:len){
c.init = as.vector(glmnet(Rtheta, cbind(time, status), family = "cox", lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
eta = exp(Rtheta %*% c.init)
coxgrad_results <- coxgrad(eta, survival::Surv(time, status), mscale, std.weights = FALSE, diag.hessian = TRUE)
w <- -attributes(coxgrad_results)$diag_hessian
z <- (eta - 0) - ifelse(w != 0, -coxgrad_results/w, 0)
fit <- glmnet:::elnet.fit(Rtheta, z, w, cand.lambda[k], gamma, intercept = FALSE)
c.new = fit$beta
tr_RS = RiskSet(time[tr_id], status[tr_id])
# fit = getc.cd(tr_R, R2, tr_Rtheta, Rtheta2, mscale, c.init, time[tr_id], status[tr_id], cand.lambda[k], tr_RS)
# calculate ACV for test data
te_RS = RiskSet(time[te_id], status[te_id])
test_GH = cosso::gradient.Hessian.C(c.new, te_R, R2, time[te_id], status[te_id], mscale, cand.lambda[k], te_RS)
#       test_GH = .Call("gradient_Hessian_C", fit$c.new, as.integer(tr_n), as.integer(nbasis), as.integer(ncol(te_RS)), exp(te_Rtheta %*% fit$c.new),
#                       te_Rtheta, Rtheta2, time[te_id], as.integer(status[te_id]), mscale, cand.lambda[k], as.integer(te_RS),
#                       as.integer(table(time[te_id][status[te_id] == 1])),
#                       PACKAGE = "cdcosso")
UHU = te_Rtheta %*% My_solve(test_GH$H, t(te_Rtheta))
ACV_pen = sum(status[te_id] == 1)/te_n^2 * (sum(diag(UHU))/(te_n - 1) - sum(UHU)/(te_n^2 - te_n))
measure[f, k] = PartialLik(time[te_id], status[te_id], te_RS, te_Rtheta %*% fit$c.new) + ACV_pen
}
}
for(f in 1:5){
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, nbasis, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, basis.id]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, nbasis, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, basis.id]
}
te_Rtheta <- combine_kernel(te_R, mscale)
# initialize
loop = 0
EigRtheta2 = eigen(Rtheta2)
while (min(eigen(Rtheta2)$values) < 0 & loop < 10) {
loop = loop + 1
Rtheta2 = Rtheta2 + 1e-08 * diag(nbasis)
EigRtheta2 = eigen(Rtheta2)
}
if (loop == 10)
EigRtheta2$values[EigRtheta2$values < 0] = 1e-08
pseudoX = Rtheta %*% EigRtheta2$vectors %*% diag(sqrt(1/EigRtheta2$values))
for (k in 1:len){
c.init = as.vector(glmnet(Rtheta, cbind(time, status), family = "cox", lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
eta = exp(Rtheta %*% c.init)
coxgrad_results <- coxgrad(eta, survival::Surv(time, status), mscale, std.weights = FALSE, diag.hessian = TRUE)
w <- -attributes(coxgrad_results)$diag_hessian
z <- (eta - 0) - ifelse(w != 0, -coxgrad_results/w, 0)
fit <- glmnet:::elnet.fit(Rtheta, z, w, cand.lambda[k], gamma, intercept = FALSE)
c.new = fit$beta
tr_RS = RiskSet(time[tr_id], status[tr_id])
# fit = getc.cd(tr_R, R2, tr_Rtheta, Rtheta2, mscale, c.init, time[tr_id], status[tr_id], cand.lambda[k], tr_RS)
# calculate ACV for test data
te_RS = RiskSet(time[te_id], status[te_id])
test_GH = cosso::gradient.Hessian.C(c.new, te_R, R2, time[te_id], status[te_id], mscale, cand.lambda[k], te_RS)
#       test_GH = .Call("gradient_Hessian_C", fit$c.new, as.integer(tr_n), as.integer(nbasis), as.integer(ncol(te_RS)), exp(te_Rtheta %*% fit$c.new),
#                       te_Rtheta, Rtheta2, time[te_id], as.integer(status[te_id]), mscale, cand.lambda[k], as.integer(te_RS),
#                       as.integer(table(time[te_id][status[te_id] == 1])),
#                       PACKAGE = "cdcosso")
UHU = te_Rtheta %*% My_solve(test_GH$H, t(te_Rtheta))
ACV_pen = sum(status[te_id] == 1)/te_n^2 * (sum(diag(UHU))/(te_n - 1) - sum(UHU)/(te_n^2 - te_n))
measure[f, k] = PartialLik(time[te_id], status[te_id], te_RS, te_Rtheta %*% c.new) + ACV_pen
}
}
measure
# optimal lambda1
measure_mean = colMeans(measure, na.rm = T)
measure_se = apply(measure, 2, sd, na.rm = T) / sqrt(5)
sel_id = which(!is.nan(measure_se) & measure_se != Inf)
measure_mean = measure_mean[sel_id]
measure_se = measure_se[sel_id]
cand.lambda = cand.lambda[sel_id]
min_id = which.min(measure_mean)
if(one.std){
cand_ids = which((measure_mean >= measure_mean[min_id]) &
(measure_mean <= (measure_mean[min_id] + measure_se[min_id])))
cand_ids = cand_ids[cand_ids >= min_id]
std_id = max(cand_ids)
optlambda = cand.lambda[std_id]
} else{
optlambda = cand.lambda[min_id]
}
cand_ids = which((measure_mean >= measure_mean[min_id]) &
(measure_mean <= (measure_mean[min_id] + measure_se[min_id])))
cand_ids = cand_ids[cand_ids >= min_id]
std_id = max(cand_ids)
optlambda = cand.lambda[std_id]
ylab = expression("GCV(" * lambda[0] * ")")
plot(log(cand.lambda), measure_mean, main = "Cox family", xlab = expression("Log(" * lambda[0] * ")"), ylab = ylab,
ylim = range(c(measure_mean - measure_se, measure_mean + measure_se)), pch = 15, col = 'red')
arrows(x0 = log(cand.lambda), y0 = measure_mean - measure_se,
x1 = log(cand.lambda), y1 = measure_mean + measure_se,
angle = 90, code = 3, length = 0.1, col = "darkgray")
abline(v = log(optlambda), lty = 2, col = "darkgray")
elnet.fit
glmnet:::elnet.fit
Survival
survival
library(survival)
survival
survival
