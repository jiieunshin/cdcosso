return(IDmat)
}
# solve theta
getc_cvfit  = cv.getc(x, time, status, rep(1, d)/wt^2, lambda0, one.std, type, kparam, algo, show = FALSE)
getc_cvfit
# solve theta
getc_cvfit  = cv.getc(x, time, status, rep(1, d)/wt^2, lambda0, one.std, type, kparam, algo, show = TRUE)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, one.std, type, kparam, algo)
model = getc_cvfit
lambda0 = getc_cvfit$optlambda
mscale = wt
n = length(time)
d = length(mscale)
IDmat = model$IDmat
RS = RiskSet(time, status)
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
init.theta = rep(1, d)
if(algo == "QP") lambda_theta = exp(seq(log(1e-4), log(40), length.out = length(lambda_theta)))
len = length(lambda_theta)
measure <- rep(0, len)
save_theta <- list()
k=1
fit = gettheta.QP(init.theta, model$c.new, G, time, status, lambda0, lambda_theta[k], RS)
save_theta[[k]] <- fit$theta.new
fit$theta.new
theta.adj <- rescale_theta(fit$theta.new)
fit$H %*% theta.adj - fit$G - as.numeric(lambda0 * t(model$c.new) %*% G)
GT = as.numeric(G %*% theta.adj)
GT
z - GT
z = fit$H %*% theta.adj - fit$G - as.numeric(lambda0 * t(model$c.new) %*% G)
z - GT
t(model$c.new) %*% G
G
# z = fit$H %*% theta.adj - fit$G - c(lambda0 * t(model$c.new) %*% G)
# num = t(z - G %*% theta.adj) %*% ginv(fit$H) %*% (z - G %*% theta.adj) + 1
# den = (1 - sum(diag( G %*% ginv( fit$H + lambda_theta[k] * (1-gamma) * diag(1, nrow = nrow(fit$H), ncol = ncol(fit$H)) ))) / n)^2 + 1
dim(G)
# z = fit$H %*% theta.adj - fit$G - c(lambda0 * t(model$c.new) %*% G)
# num = t(z - G %*% theta.adj) %*% ginv(fit$H) %*% (z - G %*% theta.adj) + 1
# den = (1 - sum(diag( G %*% ginv( fit$H + lambda_theta[k] * (1-gamma) * diag(1, nrow = nrow(fit$H), ncol = ncol(fit$H)) ))) / n)^2 + 1
length(model$c.new)
fit$H %*% theta.adj
as.numeric(lambda0 * t(model$c.new) %*% G)
fit$G
G %*% theta.adj
z = as.numeric(fit$H %*% theta.adj - fit$G - as.numeric(lambda0 * t(model$c.new) %*% G))
GT = as.numeric(G %*% theta.adj)
GT
G
theta.adj
# z = fit$H %*% theta.adj - fit$G - c(lambda0 * t(model$c.new) %*% G)
# num = t(z - G %*% theta.adj) %*% ginv(fit$H) %*% (z - G %*% theta.adj) + 1
# den = (1 - sum(diag( G %*% ginv( fit$H + lambda_theta[k] * (1-gamma) * diag(1, nrow = nrow(fit$H), ncol = ncol(fit$H)) ))) / n)^2 + 1
dim(G)
# z = fit$H %*% theta.adj - fit$G - c(lambda0 * t(model$c.new) %*% G)
# num = t(z - G %*% theta.adj) %*% ginv(fit$H) %*% (z - G %*% theta.adj) + 1
# den = (1 - sum(diag( G %*% ginv( fit$H + lambda_theta[k] * (1-gamma) * diag(1, nrow = nrow(fit$H), ncol = ncol(fit$H)) ))) / n)^2 + 1
dim(fit$G)
dim(fit$H)
n
p
fit$H %*% theta.adj - fit$G - c(lambda0 * t(G) %*% model$c.new)
z = fit$H %*% theta.adj - fit$G - c(lambda0 * t(G) %*% model$c.new)
num = t(z - G %*% theta.adj) %*% ginv(fit$H) %*% (z - G %*% theta.adj) + 1
G %*% theta.adj
dim(fit$G)
dim(fit$H)
c(lambda0 * t(G) %*% model$c.new)
fit$G
fit$H %*% theta.adj
glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = cand.lambda[k], alpha = 0, standardize = FALSE)
set.seed(2)
nobs <- 100; nvars <- 15
xvec <- rnorm(nobs * nvars)
xvec[sample.int(nobs * nvars, size = 0.4 * nobs * nvars)] <- 0
x <- matrix(xvec, nrow = nobs)
start_time <- runif(100, min = 0, max = 5)
stop_time <- start_time + runif(100, min = 0.1, max = 3)
status <- rbinom(n = nobs, prob = 0.3, size = 1)
jsurv_ss <- survival::Surv(start_time, stop_time, status)
fit <- glmnet(x, jsurv_ss, family = "cox")
fit
fit$offset
fit$jerr
str(fit)
mscale = wt
cand.lambda = lambda0
n <- length(time)
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
d
n
make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
d
p
K$numK
x
tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, response = "survival")
te_x = te$x
te_y = te$y
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
n <- length(time)
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
RS = RiskSet(time, status)
measure <- rep(0, length(cand.lambda))
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = cand.lambda[k], alpha = 0, standardize = FALSE)$beta)
fit = getc.cd(Rtheta, c.init, time, status, cand.lambda[k], RS)
fit
fit = getc.cd(Rtheta, c.init, time, status, cand.lambda[k], RS)
fit
fit$w.new
calculate_wz_for_c = function(c.init, R, time, status, RS){
n = length(time)
Grad.Term = weight = z = rep(0, n)
for (k in 1:n) {
Sum.exp.eta.Grad = Sum.exp.eta.Hess = 0
id = which(RS[k,] > 0)
eta = as.numeric(R[k,] %*% c.init)
exp.eta = exp(eta)
for(r in id){
Sum.exp.eta = sum(exp(R[RS[,r],] %*% c.init))
Sum.exp.eta.Grad = Sum.exp.eta.Grad + exp.eta / Sum.exp.eta # {j in R_i} exp(R_j c)
Sum.exp.eta.Hess = Sum.exp.eta.Hess + ( exp.eta * Sum.exp.eta - exp.eta^2 ) / Sum.exp.eta^2
}
Grad.Term[k] = status[k] - Sum.exp.eta.Grad
weight[k] = Sum.exp.eta.Hess
z[k] = eta + (Grad.Term[k] + 0.1) / (weight[k] + 0.1)
}
return(list(z = z, weight = weight))
}
calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
calculate_wz_for_c(c.init, Rtheta, time, status, RS)
aa = calculate_wz_for_c(c.init, Rtheta, time, status, RS)
aa$z
outer(aa$z, aa$z)
outer(aa$z, aa$z)[1:10,1:10]
aa$weight
diad(outer(aa$z, aa$z))
diag(outer(aa$z, aa$z))
1/diag(outer(aa$z, aa$z))
1/aa$weight
ginv(outer(aa$z, aa$z))
aa
calculate_wz_for_c = function(c.init, R, time, status, RS){
n = length(time)
Grad.Term = weight = z = rep(0, n)
for (k in 1:n) {
Sum.exp.eta.Grad = Sum.exp.eta.Hess = 0
id = which(RS[k,] > 0)
eta = as.numeric(R[k,] %*% c.init)
exp.eta = exp(eta)
for(r in id){
Sum.exp.eta = sum(exp(R[RS[,r],] %*% c.init))
Sum.exp.eta.Grad = Sum.exp.eta.Grad + exp.eta / Sum.exp.eta # {j in R_i} exp(R_j c)
Sum.exp.eta.Hess = Sum.exp.eta.Hess + ( exp.eta * Sum.exp.eta - exp.eta^2 ) / Sum.exp.eta^2
}
Grad.Term[k] = status[k] - Sum.exp.eta.Grad
weight[k] = Sum.exp.eta.Hess
z[k] = eta + (Grad.Term[k] + 0.1) / (weight[k] + 0.1)
}
return(list(z = z, gradient = Grad.Term, weight = weight))
}
getc.cd = function(Rtheta, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
w = wz$weight
z = wz$z
b = 0
zw = z * sqrt(w)
Rw = Rtheta * w
cw = c.init
cw.new = temp = c.init / sqrt(w)
sw = sqrt(w)
fit = .Call("c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
b.new = fit$b.new
c.new = fit$c.new
cw.new = fit$cw.new
return(list(Rw = Rw, grad = wz$gradient, zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
}
getc.QP = function (R, Rtheta, c.init, time, status, mscale, lambda0, RS)
{
n = length(time)
p = length(mscale)
GH = cosso::gradient.Hessian.C(c.init, R, R, time, status, mscale, lambda0, RS)
c.new = as.numeric(cosso::My_solve(GH$H, GH$H %*% c.init - GH$G))
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
return(list(c.new = c.new, G = GH$G, H = GH$H, UHU = UHU))
}
calculate_wz_for_c = function(c.init, R, time, status, RS){
n = length(time)
Grad.Term = weight = z = rep(0, n)
for (k in 1:n) {
Sum.exp.eta.Grad = Sum.exp.eta.Hess = 0
id = which(RS[k,] > 0)
eta = as.numeric(R[k,] %*% c.init)
exp.eta = exp(eta)
for(r in id){
Sum.exp.eta = sum(exp(R[RS[,r],] %*% c.init))
Sum.exp.eta.Grad = Sum.exp.eta.Grad + exp.eta / Sum.exp.eta # {j in R_i} exp(R_j c)
Sum.exp.eta.Hess = Sum.exp.eta.Hess + ( exp.eta * Sum.exp.eta - exp.eta^2 ) / Sum.exp.eta^2
}
Grad.Term[k] = status[k] - Sum.exp.eta.Grad
weight[k] = Sum.exp.eta.Hess
z[k] = eta + (Grad.Term[k] + 0.1) / (weight[k] + 0.1)
}
return(list(z = z, gradient = Grad.Term, weight = weight))
}
fit = getc.cd(Rtheta, c.init, time, status, cand.lambda[k], RS)
fit
fit$w.new
outer(fit$grad, fit$grad)
ginv(outer(fit$grad, fit$grad))
# mscale = wt
# cand.lambda = lambda0
cv.getc = function(x, time, status, mscale, cand.lambda, one.std, type, kparam, algo, show)
{
n <- length(time)
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
RS = RiskSet(time, status)
measure <- rep(0, length(cand.lambda))
for (k in 1:length(cand.lambda)){
if(algo == "CD"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = cand.lambda[k], alpha = 0, standardize = FALSE)$beta)
fit = getc.cd(Rtheta, c.init, time, status, cand.lambda[k], RS)
Lik = Partial_Lik(time, status, Rtheta, fit$c.new)
Rw = Rtheta * fit$w.new
XX = fit$zw.new - Rw %*% fit$cw.new - fit$b.new * sqrt(fit$w.new)
num = t(XX) %*% XX + 1
S = Rw %*% ginv(t(Rw) %*% Rw) %*% t(Rw)
den = (1 - sum(diag(S)) / n)^2 + 1
measure[k] <- as.vector( num / den / n )
}
if(algo == "QP"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = cand.lambda[k], alpha = 0, standardize = FALSE)$beta)
fit = getc.QP(R, Rtheta, c.init, time, status, mscale, cand.lambda[k], RS)
z = (fit$H %*% fit$c.new - fit$G)/cand.lambda[k]
num = t(z - Rtheta %*% fit$c.new) %*% ginv(fit$H) %*% (z - Rtheta %*% fit$c.new) + 1
den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + fit$H/cand.lambda[k]))) / n)^2 + 1
measure[k] <- as.vector( num / den / n )
# measure[k] <- cosso::PartialLik(time, status, RS, Rtheta %*% fit$c.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
}
}
id = which.min(measure)[1]
optlambda = cand.lambda[id]
# optimal lambda1
if(show) plot(log(cand.lambda), measure, main = "Cox family", xlab = expression("Log(" * lambda[0] * ")"), ylab = "partial likelihood", ylim = range(measure), pch = 15, col = 'red')
if(algo == "CD"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = optlambda, alpha = 0, standardize = FALSE)$beta)
fit = getc.cd(Rtheta, c.init, time, status, optlambda, RS)
out = list(measure = measure, R = R, zw.new = fit$zw.new, w.new = fit$w.new,
b.new = fit$b.new, cw.new = fit$cw.new, c.new = fit$c.new, optlambda = optlambda, conv = TRUE)
}
if(algo == "QP"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = optlambda, alpha = 0, standardize = FALSE)$beta)
fit = getc.QP(R, Rtheta, c.init, time, status, mscale, optlambda, RS)
z.new = (fit$H %*% fit$c.new - fit$G)/optlambda
W.new = ginv(fit$H)
w.new = 1/diag(fit$H)
zw.new = z.new * sqrt(w.new)
cw.new = fit$c.new / sqrt(w.new)
b.new = sum((zw.new - Rtheta %*% cw.new) * sqrt(w.new)) / sum(w.new)
out = list(measure = measure, R = R, W.new = W.new, w.new = w.new, zw.new = zw.new, cw.new = cw.new, c.new = fit$c.new, b.new = b.new,
optlambda = optlambda, conv = TRUE)
}
rm(K)
rm(Rtheta)
return(out)
}
getc.cd = function(Rtheta, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
w = wz$weight
z = wz$z
b = 0
rm(wz)
zw = z * sqrt(w)
Rw = Rtheta * w
cw = c.init
cw.new = temp = c.init / sqrt(w)
sw = sqrt(w)
fit = .Call("c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
b.new = fit$b.new
c.new = fit$c.new
cw.new = fit$cw.new
return(list(Rw = Rw, zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
}
getc.QP = function (R, Rtheta, c.init, time, status, mscale, lambda0, RS)
{
n = length(time)
p = length(mscale)
GH = cosso::gradient.Hessian.C(c.init, R, R, time, status, mscale, lambda0, RS)
c.new = as.numeric(cosso::My_solve(GH$H, GH$H %*% c.init - GH$G))
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
return(list(c.new = c.new, G = GH$G, H = GH$H, UHU = UHU))
}
calculate_wz_for_theta = function(init.theta, G, time, status, RS){
n = length(time)
Grad.Term = weight = z = rep(0, n)
for (k in 1:n) {
Sum.exp.eta.Grad = Sum.exp.eta.Hess = 0
id = which(RS[k,] > 0)
eta = as.numeric(G[k,] %*% init.theta)
exp.eta = exp(eta)
for(r in id){
Sum.exp.eta = sum(exp(G[RS[,r],] %*% init.theta))
Sum.exp.eta.Grad = Sum.exp.eta.Grad + exp.eta / Sum.exp.eta # {j in R_i} exp(R_j c)
Sum.exp.eta.Hess = Sum.exp.eta.Hess + ( exp.eta * Sum.exp.eta - exp.eta^2 ) / Sum.exp.eta^2
}
Grad.Term[k] = status[k] - Sum.exp.eta.Grad
weight[k] = Sum.exp.eta.Hess
z[k] = eta + (Grad.Term + 0.1) / (weight[k] + 0.1)
}
return(list(z = z, gradient = Grad.Term, weight = weight))
}
fit = gettheta.QP(init.theta, model$c.new, G, time, status, lambda0, lambda_theta[k], RS)
save_theta[[k]] <- fit$theta.new
theta.adj <- rescale_theta(fit$theta.new)
W = calculate_wz_for_theta(theta.adj, G, time, status, RS)$gradient
W
grad = calculate_wz_for_theta(theta.adj, G, time, status, RS)$gradient
W = outer(grad, grad)
W
wz = calculate_wz_for_theta(theta.adj, G, time, status, RS)
W = outer(wz$gradient, wz$gradient)
W
fit
theta.adj
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(glmnet)
library(cosso)
n = 50
te_n = 1000
p_sig = 5
p = 10
out = matrix(0, 18, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(50, 100, 200)){
for(p in c(25, 50, 100)){ # signal 10%, 5%, 1%, 0.5%
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, response = "survival")
te_x = te$x
te_y = te$y
# tr_x = cbind(rbinom(n, 1, .7), matrix(runif(n * (p-1), 0, 1), nc = (p-1)))
# hazard = tr_x[, 1] + sin(2 * pi * tr_x[, 2]) + 5 * (tr_x[, 3] - 0.4)^2
# surTime = rexp(n, exp(hazard))
# cenTime = rexp(n, exp(-hazard) + runif(1, 4, 6))
# tr_y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
#
# te_x = cbind(rbinom(te_n, 1, .7), matrix(runif(te_n * (p-1), 0, 1), nc = (p-1)))
# hazard = te_x[,1] + sin(2 * pi * te_x[, 2]) + 5 * (te_x[, 3] - 0.4)^2
# surTime = rexp(te_n, exp(hazard))
# cenTime = rexp(te_n, exp(-hazard) + runif(1, 4, 6))
# te_y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 1, kernel = "spline", scale = T, algo = "QP"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(-poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_miss[i] = Partial_Lik(te_y[,"time"], te_y[,"status"], en3_pred$K.new, fit3$c_step$c.new)
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(-poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_miss[i] = Partial_Lik(te_y[,"time"], te_y[,"status"], en1_pred$K.new, fit10$c_step$c.new)
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$method[[ll]] = "QP"
out$tp[ll] = round(mean(en3_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4)
out$fp[ll] = round(mean(en3_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4)
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$method[[ll]] = "CD"
out$tp[ll] = round(mean(en1_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4)
out$fp[ll] = round(mean(en1_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4)
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", p, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('quadratic prog \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel, na.rm = TRUE) ,"(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en3_tp, na.rm = TRUE), 4), "(", round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4), ")", "\n")
cat('fp :', round(mean(en3_fp, na.rm = TRUE), 4), "(", round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('coordinate descent \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel, na.rm = TRUE) ,"(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en1_tp, na.rm = TRUE), 4), "(", round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4), ")", "\n")
cat('fp :', round(mean(en1_fp, na.rm = TRUE), 4), "(", round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
fit3
