if(missing(p)) p = 10
if(missing(rho)) rho = 0.8
if(missing(SNR)) SNR = 8
if(p <= 5) stop("dimension size should be larger than 5.")
# Sigma = matrix(rho, 4, 4)
# diag(Sigma) = 1
# Sigma = matrix(1, 4, 4)
# for(j in 1:4){
#   for(k in 1:4){
#     Sigma[j, k] = rho^abs(j-k)
#   }
# }
# x = apply(rmvnorm(n, sigma = Sigma), 2, rescale)
t = 2
pp = 4
x = matrix(0, n, pp)
W = matrix(runif(n * pp), n, pp)
U = runif(n)
for(j in 1:pp){
x[, j] = (W[, j] + t * U)/(1 + t)
}
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(1,4))
# curve(f1, 0, 1)
# curve(f2, 0, 1)
# curve(f3, 0, 1)
# curve(f4, 0, 1)
# par(mfrow = c(1,1))
# f = function(t) t/2 - (2 * t - 1)^2 + (sin(2 * pi * t) / (2 - sin(2 * pi * t))) - (0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3) + 1.5
# curve(f, 0, 1)
if(response == "regression"){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, y = f)
}
if(response == "classification"){
V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) - 10 + rnorm(n, 0, sd)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
# plot(prob)
# print(table(y))
out = list(x = x, f = f, y = y)
}
if(response == "count"){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
plot(f)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
# f2 = 2 * (log(f) / max(log(f)))
f2 = f / 3
# f2 = (exp(f) / (1 + exp(f)) + 1)
# f2 = (f - min(f)) / (min(f) - max(f)) * 2
plot(f2)
mu = exp(f2)
y = rpois(n, mu)
out = list(x = x, f = f, y = y)
}
if(response == 'survival'){
V_sig = var(5 * f1(x[,1])) + var(3 * f2(x[,2])) + var(4 * f3(x[,3])) + var(6 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 5 * f1(x[,1]) + 3 * f2(x[,2]) + 4 * f3(x[,3]) + 6 * f4(x[,4]) + rnorm(n, 0, sd)
# V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(3 * f3(x[,3])) + var(4 * f4(x[,4]))
# f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 3 * f3(x[,3]) + 4 * f4(x[,4]) + rnorm(n, 0, sd)
# sd = sqrt(V_sig / SNR)
# e = rnorm(n, 0, sd)
# f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
out = list(x = x, f = f, y = y)
}
return(out)
}
# library(tmvtnorm)
tr = data_generation(n, p, SNR = 4, response = "count")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'poisson', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit10
n
lambda0_input = exp(seq(log(2^{-6}), log(2^{-2}), length.out = 20))
lambda_theta_input = exp(seq(log(2^{-6}), log(2^{-2}), length.out = 20))
tr = data_generation(n, p, SNR = 4, response = "count")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'poisson', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit10
lambda0_input = exp(seq(log(2^{-4}), log(2^{0}), length.out = 20))
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'poisson', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit10
lambda_theta_input = exp(seq(log(2^{-6}), log(2^{1}), length.out = 20))
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'poisson', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit10
n=200
tr = data_generation(n, p, SNR = 4, response = "count")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'poisson', gamma = 1, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'poisson', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit10
#' Load a matrix from a file
#'
#' The predict.cdcosso function is a function that receives the object and test data (testx) of the cdcosso package as input
#' and generates a predicted value for the test data.
#' This function uses the given test data to calculate predictions from the weights and biases generated by the model.
#'
#' @param n The number of observation of a example dataset.
#' @param p Dimension of a example dataset.
#' @param rho Correlation for first five significance variables.
#' @param SNR Signal-to-noise ratio.
#' @param response Type of response variable.
#'
#' @return a list containing the predicted value for the test data (f.new) and the transformed value of that predicted value (mu.new).
#' @export
data_generation = function(n, p, rho, SNR,
response = c("regression", "classification", "count", "survival", "interaction")){
if(response == "classification"){
# f1 = function(t) t - .5
# f2 = function(t) (2 * t - 1)^2 - .4
# f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) - .1
# f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
f1 = function(t) 3 * t
f2 = function(t) pi * sin(pi * t) * 2
f3 = function(t) 8 * t^3
f4 = function(t) 4/ (exp(1) - 1) * exp(t)
}
if(response == "regression"){
f1 = function(t) t^3
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(response == "count"){
f1 = function(t) t^3
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) + .5
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 + .5
}
if(response == "survival"){
f1 = function(t) t^3
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(missing(response))
type = "classification"
response = match.arg(response)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.8
if(missing(SNR)) SNR = 8
if(p <= 5) stop("dimension size should be larger than 5.")
# Sigma = matrix(rho, 4, 4)
# diag(Sigma) = 1
# Sigma = matrix(1, 4, 4)
# for(j in 1:4){
#   for(k in 1:4){
#     Sigma[j, k] = rho^abs(j-k)
#   }
# }
# x = apply(rmvnorm(n, sigma = Sigma), 2, rescale)
t = 2
pp = 4
x = matrix(0, n, pp)
W = matrix(runif(n * pp), n, pp)
U = runif(n)
for(j in 1:pp){
x[, j] = (W[, j] + t * U)/(1 + t)
}
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(1,4))
# curve(f1, 0, 1)
# curve(f2, 0, 1)
# curve(f3, 0, 1)
# curve(f4, 0, 1)
# par(mfrow = c(1,1))
# f = function(t) t/2 - (2 * t - 1)^2 + (sin(2 * pi * t) / (2 - sin(2 * pi * t))) - (0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3) + 1.5
# curve(f, 0, 1)
if(response == "regression"){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, y = f)
}
if(response == "classification"){
V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) - 10 + rnorm(n, 0, sd)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
# plot(prob)
# print(table(y))
out = list(x = x, f = f, y = y)
}
if(response == "count"){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
plot(f)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
# f2 = 2 * (log(f) / max(log(f)))
f2 = f / 3
# f2 = (exp(f) / (1 + exp(f)) + 1)
# f2 = (f - min(f)) / (min(f) - max(f)) * 2
plot(f2)
mu = exp(f2)
y = rpois(n, mu)
out = list(x = x, f = f, y = y)
}
if(response == 'survival'){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
out = list(x = x, f = f, y = y)
}
return(out)
}
# library(tmvtnorm)
lambda0_input = exp(seq(log(2^{-3}), log(2^{0}), length.out = 20))
lambda_theta_input = exp(seq(log(2^{-11}), log(2^{-5}), length.out = 20))
lambda0_input = exp(seq(log(2^{-5}), log(2^{-3}), length.out = 20))
tr = data_generation(n, p, SNR = 4, response = "survival")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'Cox', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit10
lambda_theta_input = exp(seq(log(2^{-15}), log(2^{-5}), length.out = 20))
lambda0_input = exp(seq(log(2^{-11}), log(2^{-3}), length.out = 20))
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'Cox', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit10
lambda_theta_input = exp(seq(log(2^{-15}), log(2^{-8}), length.out = 20))
lambda0_input = exp(seq(log(2^{-11}), log(2^{-6}), length.out = 20))
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'Cox', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
2
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
library(MASS)
n = 100
te_n = 1000
p_sig = 4
p = 160
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
if(n == 200){
lambda0_input = exp(seq(log(2^{-11}), log(2^{-6}), length.out = 20))
} else{
lambda0_input = exp(seq(log(2^{-4}), log(2^{0}), length.out = 20))
}
if(n == 200){
lambda_theta_input = exp(seq(log(2^{-15}), log(2^{-8}), length.out = 20))
} else{
lambda_theta_input = exp(seq(log(2^{-6}), log(2^{1}), length.out = 20))
}
p=20
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 4, response = "survival")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 4, response = "survival")
te_x = te$x
te_y = te$y
# mean(tr_y[,"status"])
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'Cox', gamma = 1, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
fit3
lambda0_input = exp(seq(log(2^{-22}), log(2^{-11}), length.out = 20))
lambda_theta_input = exp(seq(log(2^{-15}), log(2^{-8}), length.out = 20))
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'Cox', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
lambda_theta_input = exp(seq(log(2^{-22}), log(2^{1}), length.out = 20))
fit10 = try(cdcosso(tr_x, tr_y, f = tr$f, cv = "mse", family = 'Cox', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
tr
#' Load a matrix from a file
#'
#' The predict.cdcosso function is a function that receives the object and test data (testx) of the cdcosso package as input
#' and generates a predicted value for the test data.
#' This function uses the given test data to calculate predictions from the weights and biases generated by the model.
#'
#' @param n The number of observation of a example dataset.
#' @param p Dimension of a example dataset.
#' @param rho Correlation for first five significance variables.
#' @param SNR Signal-to-noise ratio.
#' @param response Type of response variable.
#'
#' @return a list containing the predicted value for the test data (f.new) and the transformed value of that predicted value (mu.new).
#' @export
data_generation = function(n, p, rho, SNR,
response = c("regression", "classification", "count", "survival", "interaction")){
if(response == "classification"){
# f1 = function(t) t - .5
# f2 = function(t) (2 * t - 1)^2 - .4
# f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) - .1
# f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
f1 = function(t) 3 * t
f2 = function(t) pi * sin(pi * t) * 2
f3 = function(t) 8 * t^3
f4 = function(t) 4/ (exp(1) - 1) * exp(t)
}
if(response == "regression"){
f1 = function(t) t^3
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(response == "count"){
f1 = function(t) t^3
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) + .5
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 + .5
}
if(response == "survival"){
f1 = function(t) t^3
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(missing(response))
type = "classification"
response = match.arg(response)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.8
if(missing(SNR)) SNR = 8
if(p <= 5) stop("dimension size should be larger than 5.")
# Sigma = matrix(rho, 4, 4)
# diag(Sigma) = 1
# Sigma = matrix(1, 4, 4)
# for(j in 1:4){
#   for(k in 1:4){
#     Sigma[j, k] = rho^abs(j-k)
#   }
# }
# x = apply(rmvnorm(n, sigma = Sigma), 2, rescale)
t = 2
pp = 4
x = matrix(0, n, pp)
W = matrix(runif(n * pp), n, pp)
U = runif(n)
for(j in 1:pp){
x[, j] = (W[, j] + t * U)/(1 + t)
}
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(1,4))
# curve(f1, 0, 1)
# curve(f2, 0, 1)
# curve(f3, 0, 1)
# curve(f4, 0, 1)
# par(mfrow = c(1,1))
# f = function(t) t/2 - (2 * t - 1)^2 + (sin(2 * pi * t) / (2 - sin(2 * pi * t))) - (0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3) + 1.5
# curve(f, 0, 1)
if(response == "regression"){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, y = f)
}
if(response == "classification"){
V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) - 10 + rnorm(n, 0, sd)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
# plot(prob)
# print(table(y))
out = list(x = x, f = f, y = y)
}
if(response == "count"){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
# V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
plot(f)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
# f2 = 2 * (log(f) / max(log(f)))
f2 = f / 3
# f2 = (exp(f) / (1 + exp(f)) + 1)
# f2 = (f - min(f)) / (min(f) - max(f)) * 2
plot(f2)
mu = exp(f2)
y = rpois(n, mu)
out = list(x = x, f = f, y = y)
}
if(response == 'survival'){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p - pp), 0, 1), n, (p - pp))
x = cbind(x, x_nois)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
out = list(x = x, f = f, y = y)
}
return(out)
}
# library(tmvtnorm)
