cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel) ,"(", round(sd(en1_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
out
#' Load a matrix from a file
#'
#' The predict.cdcosso function is a function that receives the object and test data (testx) of the cdcosso package as input
#' and generates a predicted value for the test data.
#' This function uses the given test data to calculate predictions from the weights and biases generated by the model.
#'
#' @param n Model object fitted from the cdcosso package.
#' @param p The test data you want to predict.
#' @param rho The test data you want to predict.
#' @param a The test data you want to predict.
#' @param type The test data you want to predict.
#' @param response The test data you want to predict.
#'
#' @return a list containing the predicted value for the test data (f.new) and the transformed value of that predicted value (mu.new).
#' @export
data_generation = function(n, p, rho, a, type = c("indep", "group-effect", "additive", "interaction", "survival"),
response = c("regression", "classification", "count")){
g1 = function(t) t/4
g2 = function(t) (t/2)^2 - 1
g3 = function(t) exp(3*t)/(1+exp(3*t))
g4 = function(t) sin(t)^3
g5 = function(t) sin(1.4*t)
g6 = function(t) exp(-t/2) * sin(t*2) / 3
if(missing(type))
type = "indep"
type = match.arg(type)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.4
if(type != 'survival'){
if(missing(response))
response = "regression"
response = match.arg(response)
if(type == 'indep'){
Sigma = matrix(rho, 5, 5)
diag(Sigma) = 1
beta = c(rep(3, 5), rep(0, p-5))
x_sig = rmvnorm(n, mean = rep(0, 5), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-5)), n, p-5)
x = cbind(x_sig, x_nois)
pi = exp(x %*% beta) / (exp(x %*% beta) + 1)
y = rbinom(n, 1, pi)
}
if(type == 'group-effect'){
Sigma = matrix(rho, 5, 5)
diag(Sigma) = 1
beta = c(rep(3, 5), rep(0, p-5))
x_sig = rmvnorm(n, mean = rep(0, 5), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-5)), n, p-5)
x = cbind(x_sig, x_nois)
pi = exp(x %*% beta) / (exp(x %*% beta) + 1)
y = rbinom(n, 1, pi)
}
if(type == "additive"){
if(p <= 6) stop("dimension size should be larger than 6.")
Sigma = matrix(rho, 6, 6)
diag(Sigma) = 1
x_sig = rmvnorm(n, mean = rep(0, 6), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-6)), n, p-6)
x = cbind(x_sig, x_nois)
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(2,3))
# plot(x[,1], g1(x[,1]), cex = .6, pch = 16, xlab = 'x1', ylab = 'f1')
# plot(x[,2], g2(x[,2]), cex = .6, pch = 16, xlab = 'x2', ylab = 'f2')
# plot(x[,3], g3(x[,3]), cex = .6, pch = 16, xlab = 'x3', ylab = 'f3')
# plot(x[,4], g4(x[,4]), cex = .6, pch = 16, xlab = 'x4', ylab = 'f4')
# plot(x[,5], g5(x[,5]), cex = .6, pch = 16, xlab = 'x5', ylab = 'f5')
# plot(x[,6], g6(x[,6]), cex = .6, pch = 16, xlab = 'x6', ylab = 'f6')
# par(mfrow = c(1,1))
f = 2*(g1(x[,1]) + g2(x[,2]) + g3(x[,3]) + g4(x[,4]) + g5(x[,5]) + g6(x[,6]))
}
if(type == 'interaction'){
if(p <= 6) stop("dimension size should be larger than 6.")
x = matrix(runif(n*p), n, p)
Sigma = matrix(rho, 6, 6)
diag(Sigma) = 1
x_sig = rmvnorm(n, mean = rep(0, 6), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-6)), n, p-6)
x = cbind(x_sig, x_nois) + rnorm(n, 0, 0.01)
f = 3*g1(x[,1])*g2(x[,2]) + 5*g3(x[,3])*g4(x[,4]) + 4*g5(x[,5])*g6(x[,6]) +
3*g2(x[,2])*g5(x[,5]) + 5*g2(x[,2])*g6(x[,6]) + 4*g5(x[,5])*g6(x[,6])
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
# plot(prob)
# table(y)
}
if(response == "regression"){
y = f
}
if(response == "classification"){
prob = exp(f)/(exp(f) + 1)
# plot(prob)
y = rbinom(n, 1, prob)
}
if(response == "count"){
mu = exp(f)
mu = ifelse(mu > 100, 100, mu)
y = rpois(n, mu)
}
return(list(x = x, f = f, y = y))
}else if(type == 'survival'){
if(p <= 6) stop("dimension size should be larger than 6.")
if(missing(a)) a = 0.3
x = matrix(runif(n*p), n, p)
Sigma = matrix(rho, 6, 6)
diag(Sigma) = 1
x_sig = rmvnorm(n, mean = rep(0, 6), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-6)), n, p-6)
x = cbind(x_sig, x_nois)
f = 2*(g1(x[,1]) + g2(x[,2]) + g3(x[,3]) + g4(x[,4]) + g5(x[,5]) + g6(x[,6])) + rnorm(n, 0, 1)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
return(list(x = x, f = f, y = y))
}
}
# tr = data_generation(n, p, type = "additive", response = "count")
# print(table(tr$y))
ll = 0
for(n in c(100)){
nb = n
for(p in c(12, 60, 120, 240)){
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "group-effect", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "group-effect", response = "classification")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "QP"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 0.8
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 1
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", d, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel) ,"(", round(sd(en3_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel) ,"(", round(sd(en1_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
ll = 0
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(200)){
nb = n
for(p in c(12, 60, 120, 240)){
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "QP"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 0.8
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 1
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", d, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel) ,"(", round(sd(en3_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel) ,"(", round(sd(en1_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
sspline.QP = function (R, y, f, lambda0, obj, c.init)
{
n = length(y)
# initialize
mu = obj$linkinv(f)
w = obj$variance(mu)
z = f + (y - mu) / w
b = 0
zw = z * sqrt(w)
Rw = R * w
cw = c.init / sqrt(w)
sw = sqrt(w)
# iteration
for(i in 1:20){
D = (t(Rw) %*% Rw + n * lambda0 * Rw)
dvec = t(Rw) %*% (zw - b*sw)
cw.new = MASS::ginv(D) %*% dvec
loss = abs(cw-cw.new)
conv = max(loss) < 1e-5
if(conv) break
cw =  cw.new  # if not convergence
}
if(i == 1 & !conv) cw.new = cw
c.new = cw.new * sqrt(w)
b.new = sum((zw - Rw %*% cw.new) * sw) / sum(sw)
return(list(w.new = w, b.new = b.new, c.new = c.new, zw.new = z * w, sw.new = sqrt(w), cw.new = cw.new))
}
cdcosso.glm = function (x, y, wt, lambda0, lambda_theta, gamma, obj, nfolds, one.std, type, kparam, algo)
{
n = length(y)
d = length(wt)
par(mfrow = c(2,2))
# initiation
# init.theta = as.vector(glmnet(x, y, family = "binomial", lambda = lambda_theta[2], gamma = 0)$beta)
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, rep(1, d)/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, sspline_cvfit$optlambda, lambda_theta, gamma, nfolds, obj, one.std, algo)
theta.new = rescale_theta(nng_fit$theta.new, FALSE)
# print(theta.new)
# solve (theta) - 2nd
sspline_cvfit = try({cv.sspline(x, y, theta.new/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo)}) ## 초기값 설정. 수정할 함수
# nng_fit = cv.nng(sspline_cvfit, x, y, wt, sspline_cvfit$optlambda, lambda_theta, gamma, nfolds, obj, one.std, algo)
# theta.new = rescale_theta(nng_fit$theta.new, FALSE)
# print(theta.new)
#
# sspline_cvfit = cv.sspline(x, y, theta.new/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
par(mfrow = c(1,1))
if(algo == "CD")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
if(algo == "QP")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
class(out) = "cosso"
return(out)
}
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(100)){
nb = n
for(p in c(12, 60, 120, 240)){
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "QP"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 0.8
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 1
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", d, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel) ,"(", round(sd(en3_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel) ,"(", round(sd(en1_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
