# print(f)
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
# generate SS-ANOVA
tr_n = length(trainID)
te_n = length(testID)
tr_R = array(NA, c(tr_n, tr_n, d))
te_R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][trainID, trainID]
te_R[, , j] = K$K[[j]][testID, trainID]
}
tr_Rtheta <- wsGram(tr_R, mscale)
te_Rtheta <- wsGram(te_R, mscale)
# initialize
ff = f.init[trainID]
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y[trainID] - mu) / w
c.init = as.vector(glmnet(tr_Rtheta, y[trainID], family = 'gaussian', lambda = cand.lambda[k])$beta)
zw = z * sqrt(w)
obj =  binomial()
# initialize
ff = f.init[trainID]
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y[trainID] - mu) / w
c.init = as.vector(glmnet(tr_Rtheta, y[trainID], family = 'gaussian', lambda = cand.lambda[k])$beta)
zw = z * sqrt(w)
Rw = tr_Rtheta * w
cw = c.init / sqrt(w)
cw
cand.lambda[k]
fit = sspline.cd(tr_Rtheta, y[trainID], ff, cand.lambda[k], obj, c.init)
cw
c.init / sqrt(w)
fit
.Call("Csspline", zw, Rw, cw, sw, tr_n, cand.lambda[k], PACKAGE = "cdcosso")
sw = sqrt(w)
fit = .Call("Csspline", zw, Rw, cw, sw, tr_n, cand.lambda[k], PACKAGE = "cdcosso")
fit
cw
sspline.cd(tr_Rtheta, y[trainID], ff, cand.lambda[k], obj, c.init)
### 실행 #######################################
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
data <- read.table("C:/Users/jieun/Dropbox/저장용/heart+disease/processed.cleveland.data", sep = ",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data[data == "?"] <- NA
data <- na.omit(data)
# 변수 정리
data$cp1 <- ifelse(data$cp == 1, 1, 0)
data$cp2 <- ifelse(data$cp == 2, 1, 0)
data$cp3 <- ifelse(data$cp == 3, 1, 0)
data$cp <- NULL
data$restecg1 <- ifelse(data$restecg == 1, 1, 0)
data$restecg2 <- ifelse(data$restecg == 2, 1, 0)
data$restecg <- NULL
data$slope1 <- ifelse(data$slope == 1, 1, 0)
data$slope2 <- ifelse(data$slope == 2, 1, 0)
data$thal3 <- ifelse(data$thal == 3, 1, 0)
data$thal7 <- ifelse(data$thal == 7, 1, 0)
data$thal <- NULL
data$ca <- as.numeric(data$ca)
yid = which(colnames(data) == "num")
X = data[,-yid]
y = ifelse(data[,yid] == 0, 0, 1)
dim(data)
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
x = tr_x
y = tr_y
family = 'binomial'
gamma = 0.8
kernel = "spline"
one.std = TRUE
scale = T
wt = rep(1, ncol(x))
kparam = 1
nfolds =5
algo = "CD"
lambda0 = exp(seq(log(2^{-5}), log(2^{5}), length.out = 20))
lambda_theta = exp(seq(log(2^{-5}), log(2^{5}), length.out = 20))
make_kernel = function (x, y, type)
{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear") {
K = tcrossprod(x, y)
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam)
{
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for main effects
# if (type == "spline") {
#   # assign the number of anova kernels
#   numK = 2 * dimx
#   # list of kernel matrices
#   anova_kernel = vector(mode = "list", numK)
#   # list of kernel coordinate indices
#   kernelCoord = vector(mode = "list", numK)
#   index = 0
#
#   for (d in 1:dimx) {
#     index = index + 1
#     A = x[, d, drop = FALSE]
#     B = y[, d, drop = FALSE]
#     K_temp = spline_kernel(A, B)
#     anova_kernel[[index]] = K_temp$K1
#     kernelCoord[[index]] = paste("x", d, " linear", sep="")
#     index = index + 1
#     anova_kernel[[index]] = K_temp$K2
#     kernelCoord[[index]] = paste("x", d, " smooth", sep="")
#   }
#
# } else if (type == 'spline2') {
#   numK = (2 * dimx) + (2 * dimx * (2 * dimx - 1) / 2 - dimx)
#   anova_kernel = vector(mode = "list", numK)
#   kernelCoord = vector(mode = "list", numK)
#   index = 0
#   # main effects
#   for (d in 1:dimx) {
#     index = index + 1
#     A = x[, d, drop = FALSE]
#     B = y[, d, drop = FALSE]
#     K_temp = spline_kernel(A, B)
#     anova_kernel[[index]] = K_temp$K1
#     kernelCoord[[index]] = paste("x", d, " linear", sep = "")
#     index = index + 1
#     anova_kernel[[index]] = K_temp$K2
#     kernelCoord[[index]] = paste("x", d, " smooth", sep = "")
#   }
#   # two-way interactions
#   for (i in 1:(dimx - 1)) {
#     for (j in (i + 1):dimx) {
#       index = index + 1
#       A_linear = as.matrix(anova_kernel[[2 * i - 1]])
#       A_smooth = as.matrix(anova_kernel[[2 * i]])
#       B_linear = as.matrix(anova_kernel[[2 * j - 1]])
#       B_smooth = as.matrix(anova_kernel[[2 * j]])
#       anova_kernel[[index]] = A_linear * B_linear
#       kernelCoord[[index]] = paste("x", i, " linear,", " x", j, " linear", sep = "")
#       index = index + 1
#       anova_kernel[[index]] = A_linear * B_smooth
#       kernelCoord[[index]] = paste("x", i, " linear,", " x", j, " smooth", sep = "")
#       index = index + 1
#       anova_kernel[[index]] = A_smooth * B_linear
#       kernelCoord[[index]] = paste("x", i, " smooth,", " x", j, " linear", sep = "")
#       index = index + 1
#       anova_kernel[[index]] = A_smooth * B_smooth
#       kernelCoord[[index]] = paste("x", i, " smooth,", " x", j, " smooth", sep = "")
#     }
#   }
# } else
if (type == "spline-t") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline-t2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
# is used to combine anova kernel matrices with weights determined by theta values. The default theta vector is the vector of ones.
combine_kernel = function(anova_kernel, theta = rep(1, anova_kernel$numK))
{
K = 0
for (d in 1:anova_kernel$numK) {
K = (K + theta[d] * anova_kernel$K[[d]])
}
return(K)
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
wsGram = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
KLD = function(y, fhat, obj){
if(obj$family == "gaussian") B = function(x) x
if(obj$family == "binomial") B = function(x) log(exp(x) + 1)
if(obj$family == "poisson") B = function(x) exp(x)
return(- y * fhat + B(fhat))
}
x = apply(x, 2, rescale)
n = length(y)
d = length(wt)
par(mfrow = c(2,2))
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, rep(1, d)/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
mscale = wt^2
cand.lambda = lambda0
n <- length(y)
IDmat <- cvsplitID(n, nfolds)
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- wsGram(R, mscale)
f.init = rep(0.5, n)
measure <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
miss <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
f=k=1
sspline.cd = function (R, y, f, lambda0, obj, c.init)
{
n = length(y)
mu = obj$linkinv(f)
# initialize
w = obj$variance(mu)
z = f + (y - mu) / w
b = 0
zw = z * sqrt(w)
Rw = R * w
cw = c.init / sqrt(w)
sw = sqrt(w)
cw.new = rep(0, n)
for(i in 1:10){ # outer iteration
for(j in 1:n){
L = 2 * sum((zw - Rw[,-j] %*% cw[-j] - b * sw) * Rw[,j]) - n * lambda0 * c(Rw[j,-j] %*% cw[-j])
R = 2 * sum(Rw[,j]^2) + n * lambda0 * Rw[j,j]
cw.new[j] = L/R
loss = abs(cw-cw.new)
conv1 = max(loss) < 1e-6
conv2 = min(loss) > 10
if(conv1 | conv2) break
cw[j] = cw.new[j]  # if not convergence
}
if(conv1 | conv2) break
}
if(i == 1 & !conv1) cw.new = cw
cw.new = cw.new
c.new = cw.new * sw
b.new = sum((zw - Rw %*% cw.new) * sw) / sum(sw)
return(list(Rw = Rw, z.new = z, zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
}
# R = tr_Rtheta
# y = y[trainID]
# f = f.init[trainID]
# lambda0 = cand.lambda[k]
sspline.QP = function (R, y, f, lambda0, obj, c.init)
{
n = length(y)
mu = obj$linkinv(f)
# initialize
w = obj$variance(mu)
z = f + (y - mu) / w
b = 0
zw = z * sqrt(w)
Rw = R * w
cw = c.init / sqrt(w)
sw = sqrt(w)
cw.new = rep(0, n)
for(i in 1:10){ # outer iteration
Dmat = t(R) %*% R + n * lambda0 * R
dvec = as.vector(t(zw - b * sw) %*% R)
cw.new = ginv(Dmat) %*% dvec
loss = abs(cw-cw.new)
conv = max(loss) < 1e-6
if(conv) break
cw = cw.new  # if not convergence
}
cw.new = cw.new
c.new = cw.new * sw
b.new = sum((zw - Rw %*% cw.new) * sw) / sum(sw)
return(list(Rw = Rw, z.new = z, zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
}
measure <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
miss <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
# print(f)
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
# generate SS-ANOVA
tr_n = length(trainID)
te_n = length(testID)
tr_R = array(NA, c(tr_n, tr_n, d))
te_R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][trainID, trainID]
te_R[, , j] = K$K[[j]][testID, trainID]
}
tr_Rtheta <- wsGram(tr_R, mscale)
te_Rtheta <- wsGram(te_R, mscale)
n <- length(y)
IDmat <- cvsplitID(n, nfolds)
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- wsGram(R, mscale)
f.init = rep(0.5, n)
measure <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
type="spline"
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- wsGram(R, mscale)
f.init = rep(0.5, n)
measure <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
miss <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
# print(f)
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
# generate SS-ANOVA
tr_n = length(trainID)
te_n = length(testID)
tr_R = array(NA, c(tr_n, tr_n, d))
te_R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][trainID, trainID]
te_R[, , j] = K$K[[j]][testID, trainID]
}
tr_Rtheta <- wsGram(tr_R, mscale)
te_Rtheta <- wsGram(te_R, mscale)
# initialize
ff = f.init[trainID]
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y[trainID] - mu) / w
obj="binomial"
# initialize
ff = f.init[trainID]
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y[trainID] - mu) / w
c.init = as.vector(glmnet(tr_Rtheta, y[trainID], family = 'gaussian', lambda = cand.lambda[k])$beta)
f.init
# initialize
ff = f.init[trainID]
mu = obj$linkinv(ff)
obj=binomial()
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y[trainID] - mu) / w
c.init = as.vector(glmnet(tr_Rtheta, y[trainID], family = 'gaussian', lambda = cand.lambda[k])$beta)
c.init
zw = z * sqrt(w)
Rw = tr_Rtheta * w
cw = c.init / sqrt(w)
sw = sqrt(w)
fit = .Call("Csspline", zw, Rw, cw, sw, tr_n, cand.lambda[k], PACKAGE = "cdcosso")
cw
c.init
fit = .Call("Csspline", zw, Rw, cw, sw, tr_n, cand.lambda[k], PACKAGE = "cdcosso")
fit
.Call("Csspline", zw, Rw, cw, sw, tr_n, cand.lambda[k], PACKAGE = "cdcosso")
cw
