L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
# print(theta.new)
conv2 = sum(loss == 0) == d | is.infinite(theta.new[j]) | is.na(theta.new[j])
# conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
loss
theta.new
j
theta.new
# G1 = G[tr_id, ]
# G2 = G[basis.id,]
# time = time[tr_id]
# status = status[tr_id]
# init.theta = rep(1, d)
# f.init = model$f.new[tr_id]
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RiskSet(time, status)
gettheta.cd = function(init.theta, f.init, G1, G2, time, status, chat, lambda0, lambda_theta, gamma, Risk){
n = nrow(G1)
d = ncol(G1)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
for(i in 1:20){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
# print(theta.new)
conv2 = sum(loss == 0) == d | is.infinite(theta.new[j]) | is.na(theta.new[j])
# conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2)) theta.old = rep(0, d)
return(list(theta.new = theta.old))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
type = "spline"
algo = "CD"
family = 'Cox'
gamma = 0.95
kparam=1
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
wt = rep(1, ncol(x))
n = length(time)
p = length(wt)
nbasis = max(40, ceiling(12 * n^(2/9)))
basis.id = sort(sample(1:n, nbasis))
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
model = getc_cvfit
lambda0 = getc_cvfit$optlambda
mscale = wt
n = length(time)
d = length(mscale)
# solve theta
G <- matrix(0, n, d)
for (j in 1:d) {
G[, j] = (model$R[, , j] %*% model$c.new) * (mscale[j]^(-2))
}
init.theta = rep(1, d)
len = length(lambda_theta)
measure = matrix(NA, 5, len)
fold = cvsplitID(n, 5, y, family = "gaussian")
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], time[tr_id], status[tr_id], 0, model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
# G1 = G[tr_id, ]
# G2 = G[basis.id,]
# time = time[tr_id]
# status = status[tr_id]
# init.theta = rep(1, d)
# f.init = model$f.new[tr_id]
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RiskSet(time, status)
gettheta.cd = function(init.theta, f.init, G1, G2, time, status, chat, lambda0, lambda_theta, gamma, Risk){
n = nrow(G1)
d = ncol(G1)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
for(i in 1:20){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
# print(theta.new)
conv2 = sum(loss == 0) == d | is.infinite(theta.new[j]) | is.na(theta.new[j])
# conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2)) theta.old = rep(0, d)
return(list(theta.new = theta.old))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
# G1 = G[tr_id, ]
# G2 = G[basis.id,]
# time = time[tr_id]
# status = status[tr_id]
# init.theta = rep(1, d)
# f.init = model$f.new[tr_id]
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RiskSet(time, status)
gettheta.cd = function(init.theta, f.init, G1, G2, time, status, chat, lambda0, lambda_theta, gamma, Risk){
n = nrow(G1)
d = ncol(G1)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
for(i in 1:20){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
# print(theta.new)
conv2 = sum(loss == 0) == d | is.infinite(theta.new[j]) | is.na(theta.new[j])
# conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2)) theta.old = rep(0, d)
return(list(theta.new = theta.old))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
model$c.new
G[basis.id, ]
t(G[tr_id,])
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
dim(G[basis.id,])
chat
lambda0
dim(t(G[basis.id, ]))
initTheta = init.theta
initC = chat
G1 = G[tr_id,]
G2 = G[basis.id,]
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
eta
-t(G1) %*% status/n
G1
status/n
status
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
t(G[basis.id, ]) %*% chat
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
gettheta.cd
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
fit
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
library(MASS)
n = 200
te_n = 1000
p_sig = 5
p = 100
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# for(nb in c(12, 25, 50, 100)){
iter = 20
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, nbasis = n/2,
lambda0 = exp(seq(log(2^{-8}), log(2^{-4}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-4}), length.out = 20))
), silent = TRUE)
fit10
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
library(MASS)
n = 200
te_n = 1000
p_sig = 5
p = 100
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# for(nb in c(12, 25, 50, 100)){
iter = 20
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, nbasis = n/2,
lambda0 = exp(seq(log(2^{-8}), log(2^{-4}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-4}), length.out = 20))
), silent = TRUE)
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(100, 200, 400)){
for(p in c(25, 50, 100)){ # signal 10%, 5%, 1%, 0.5%
# for(nb in c(12, 25, 50, 100)){
iter = 20
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, response = "survival")
te_x = te$x
te_y = te$y
# mean(tr_y[,"status"])
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 1, kernel = "spline", scale = T, nbasis = n/2,
lambda0 = exp(seq(log(2^{-8}), log(2^{-6}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-6}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
# true_var = c(1,0,0,1,0,0,1,0)
if(!(class(fit3) == 'try-error')){
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
# true_var = c(c(1,0,0,1,0,0,1,0), rep(0, p-8))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(-poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RiskSet, fit3$c_step$f.new)
en3_time[i] = mean(t1)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, nbasis = n/2,
lambda0 = exp(seq(log(2^{-8}), log(2^{-6}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-6}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
# true_var = c(c(1,0,0,1,0,0,1,0), rep(0, p-8))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(-poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RiskSet, fit10$c_step$f.new)
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$method[[ll]] = "QP"
out$tp[ll] = round(mean(en3_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4)
out$fp[ll] = round(mean(en3_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4)
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$method[[ll]] = "CD"
out$tp[ll] = round(mean(en1_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4)
out$fp[ll] = round(mean(en1_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4)
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", p, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('quadratic prog \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel, na.rm = TRUE) ,"(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en3_tp, na.rm = TRUE), 4), "(", round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4), ")", "\n")
cat('fp :', round(mean(en3_fp, na.rm = TRUE), 4), "(", round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('coordinate descent \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel, na.rm = TRUE) ,"(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en1_tp, na.rm = TRUE), 4), "(", round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4), ")", "\n")
cat('fp :', round(mean(en1_fp, na.rm = TRUE), 4), "(", round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
predict.cdcosso
cosso::PartialLik
