ff = f.init[trainID]
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y[trainID] - mu) / w
b = 0
# print(b)
zw = z * sqrt(w)
Rw = tr_Rtheta * w
cw = c.init[trainID] / sqrt(w)
sw = sqrt(w)
# sspline_fit = sspline.cd(tr_Rtheta, y[trainID], f.init[trainID], cand.lambda[k], obj, c.init[trainID])
sspline_fit = .Call("Csspline", zw, Rw, cw, sw, tr_n, cand.lambda[k], PACKAGE = "cdcosso")
b.new = sspline_fit$b.new
c.new = sspline_fit$c.new
cw.new = sspline_fit$cw.new
# print(b.new)
}
if(algo == "QP"){
sspline_fit = sspline.QP(tr_Rtheta, y[trainID], f.init[trainID], cand.lambda[k], obj, c.init[trainID])
b.new = sspline_fit$b.new
c.new = sspline_fit$c.new
cw.new = sspline_fit$cw.new
}
if(sum(is.nan(cw.new)) == tr_n){
next
} else{
# validation
# f.new <- fit$f.new
testfhat = c(b.new + te_Rtheta %*% c.new)
testmu = obj$linkinv(testfhat)
print(testfhat)
# testw = obj$variance(testmu)
# testz = testfhat + (y[testID] - testmu) / testw
#
# testzw = testz * sqrt(testw)
# testRw = te_Rtheta * testw
# rss <- t(testzw - testRw %*% cw.new - b.new * sqrt(testw)) %*% (testzw - testRw %*% cw.new - b.new * sqrt(testw)) + .1
# S = testRw %*% ginv(t(testRw) %*% testRw) %*% t(testRw)
# df = sum(diag(S))
# measure[f, k] <- rss / (1 - df/length(testID) + .1)^2 / length(testID)
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
# if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
# if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
# print(measure)
}
}
}
if(sum(is.na(measure)) == length(cand.lambda) * nfolds){
conv = FALSE
return(list(conv = conv))
}
rm(tr_Rtheta)
rm(te_Rtheta)
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# optimal lambda1
id = which.min(cvm)[1]
optlambda = cand.lambda[id]
# if(one.std){
# st1_err = cvm[id] + cvsd[id] # minimum cv err
# std.id = max(which(cvm[1:id] <= st1_err & cvm[1:id] <= cvm[id]))
# std.id = ifelse(std.id > id, std.id, id)
# optlambda = cand.lambda[std.id]
# } else{
#   optlambda = cand.lambda[id]
# }
#
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd, na.rm = T), max(cvm + cvsd, na.rm = T))
plot(log(cand.lambda), cvm, main = main, xlab = expression("Log(" * lambda[0] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
try(arrows(log(cand.lambda), cvm - cvsd, log(cand.lambda), cvm + cvsd, angle = 90, length = 0.01, col = 'gray'), silent = TRUE)
points(log(cand.lambda), cvm, pch = 15, col = 'red')
abline(v = log(cand.lambda)[id], col = 'darkgrey', lty = 2)
# abline(v = log(cand.lambda)[std.id], col = 'darkgrey', lty = 2)
# c.init = runif(n, -1e-5, 1e-5)
if(algo == "CD"){
ff = c(f.init)
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
# b = mean(z - Rtheta %*% c.init)
# print(b)
zw = z * sqrt(w)
Rw = Rtheta * w
cw = c.init / sqrt(w)
sw = sqrt(w)
# fit = sspline.cd(Rtheta, y, f.init, optlambda, obj, c.init)
fit = .Call("Csspline", zw, Rw, cw, sw, n, optlambda, PACKAGE = "cdcosso")
f.new <- c(fit$b.new + Rtheta %*% fit$c.new)
mu.new = obj$linkinv(f.new)
w.new = obj$variance(mu.new)
z.new = f.new + (y - mu.new) / w.new
out = list(IDmat = IDmat, measure = measure, R = R, w.new = w, zw.new = zw, b.new = fit$b.new,
cw.new = fit$cw.new, c.new = fit$c.new, optlambda = optlambda, conv = TRUE)
}
if(algo == "QP"){
fit = sspline.QP(Rtheta, y, f.init, optlambda, obj, c.init)
f.new <- c(fit$b.new + Rtheta %*% fit$c.new)
mu.new = obj$linkinv(f.new)
w.new = obj$variance(mu.new)
z.new = f.new + (y - mu.new) / w.new
out = list(IDmat = IDmat, measure = measure, R = R, f.new = f.new, zw.new = z.new * w.new, b.new = fit$b.new,
cw.new = fit$cw.new, c.new = fit$c.new, w.new = w.new, optlambda = optlambda, conv = TRUE)
}
rm(K)
rm(Rtheta)
return(out)
}
# solve (theta) - 1st
sspline_cvfit1 = cv.sspline(x, y, rep(1, d)/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 40))
# solve (theta) - 1st
sspline_cvfit1 = cv.sspline(x, y, rep(1, d)/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
data <- read.table("C:/Users/jieun/Dropbox/저장용/heart+disease/processed.cleveland.data", sep = ",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data[data == "?"] <- NA
data <- na.omit(data)
# 변수 정리
data$cp1 <- ifelse(data$cp == 1, 1, 0)
data$cp2 <- ifelse(data$cp == 2, 1, 0)
data$cp3 <- ifelse(data$cp == 3, 1, 0)
data$cp <- NULL
data$restecg1 <- ifelse(data$restecg == 1, 1, 0)
data$restecg2 <- ifelse(data$restecg == 2, 1, 0)
data$restecg <- NULL
data$slope1 <- ifelse(data$slope == 1, 1, 0)
data$slope2 <- ifelse(data$slope == 2, 1, 0)
data$thal3 <- ifelse(data$thal == 3, 1, 0)
data$thal7 <- ifelse(data$thal == 7, 1, 0)
data$thal <- NULL
data$ca <- as.numeric(data$ca)
yid = which(colnames(data) == "num")
X = data[,-yid]
y = ifelse(data[,yid] == 0, 0, 1)
dim(data)
### 실행 #######################################
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
### 실행 #######################################
devtools::install_github("jiieunshin/cdcosso")
data <- read.table("C:/Users/jieun/Dropbox/저장용/heart+disease/processed.cleveland.data", sep = ",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data[data == "?"] <- NA
data <- na.omit(data)
# 변수 정리
data$cp1 <- ifelse(data$cp == 1, 1, 0)
data$cp2 <- ifelse(data$cp == 2, 1, 0)
data$cp3 <- ifelse(data$cp == 3, 1, 0)
data$cp <- NULL
data$restecg1 <- ifelse(data$restecg == 1, 1, 0)
data$restecg2 <- ifelse(data$restecg == 2, 1, 0)
data$restecg <- NULL
data$slope1 <- ifelse(data$slope == 1, 1, 0)
data$slope2 <- ifelse(data$slope == 2, 1, 0)
data$thal3 <- ifelse(data$thal == 3, 1, 0)
data$thal7 <- ifelse(data$thal == 7, 1, 0)
data$thal <- NULL
data$ca <- as.numeric(data$ca)
yid = which(colnames(data) == "num")
X = data[,-yid]
y = ifelse(data[,yid] == 0, 0, 1)
dim(data)
library(cdcosso)
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
fit10
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
cv.nng = function(model, x, y, mscale, lambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
{
n = length(y)
d = length(mscale)
IDmat = model$IDmat
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
Gw = G * sqrt(model$w.new)
uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
init.theta = as.vector(glmnet(Gw, uw, family = "gaussian", lambda = lambda_theta[1])$beta)
# init.theta = rep(1, d)
len = length(lambda_theta)
measure <- matrix(0, ncol = len, nrow = nfolds)
l = 0
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
tr_G = G[trainID,]
te_G = G[testID,]
tr_n = length(trainID)
te_n = length(testID)
for (k in 1:len) {
l = l + 1
if(algo == "CD") {
theta.new = nng.cd(Gw[trainID,], uw[trainID], theta = init.theta, lambda_theta[k], gamma)
# theta.new = .Call("Cnng", Gw[trainID,], uw[trainID], tr_n, d, init.theta, lambda_theta[k], gamma)
}
if(algo == "QP") {
theta.new = nng.QP(model$zw.new[trainID], model$b.new, model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, lambda_theta[k], gamma)
}
testfhat = c(te_G %*% theta.new)
testmu = obj$linkinv(testfhat)
# testw = obj$variance(testmu)
# testz = testfhat + (y[testID] - testmu) / testw
# testzw = testz * sqrt(testw)
# testGw = te_G * sqrt(testw)
# testuw = testzw - model$b.new * sqrt(testw) - (te_n/2) * lambda0 * model$cw.new[testID]
# rss <- t(testuw - testGw %*% theta.new) %*% (testuw - testGw %*% theta.new) + .1
# l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
# l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
# S = l1 + l2
# measure[f, k] <- rss / (1 - d * S/te_n + .1)^2 / te_n
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
# if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
# if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
}
}
measure[is.nan(measure)] <- NA
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
cvm[is.nan(cvm)] <- NA
cvsd[is.na(cvsd)] <- 0
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
if(is.na(std.id)){
std.id = id
optlambda = lambda_theta[std.id]
} else{
std.id = ifelse(std.id > id, std.id, id)
optlambda = lambda_theta[std.id]
}
} else{
optlambda = lambda_theta[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd, na.rm = TRUE), max(cvm + cvsd, na.rm = TRUE))
xrange = log(lambda_theta)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
if(algo == "CD"){
theta.new = nng.cd(Gw, uw, theta = init.theta, optlambda, gamma)
# theta.new = .Call("Cnng", Gw, uw, n, d, init.theta, optlambda, gamma)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
if(algo == "QP"){
theta.new = nng.QP(model$zw.new, model$b.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optlambda, gamma, obj)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
fit10
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
# t1 = system.time({
#   fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = FALSE, scale = T, algo = "QP"), silent = TRUE)
# })  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
# if(!(class(fit3) == 'try-error')){
#   time3[i] = t1[3]
#   en3_varsel[i] = sum(ifelse(fit3$theta_step$theta.new > 0, 1, 0))
#   en3_pred = predict.cdcosso(fit3, te_x)
#   en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new <= 0.5, 0, 1))
# }
if(!(class(fit10) == 'try-error')){
time10[i] = t2[3]
en1_varsel[i] = sum(ifelse(fit10$theta_step$theta.new > 0, 1, 0))
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
en1_miss
fit10
cv.sspline = function (x, y, mscale, nfolds, cand.lambda, obj, one.std, type, kparam, algo)
{
n <- length(y)
IDmat <- cvsplitID(n, nfolds)
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- wsGram(R, mscale)
c.init = as.vector(glmnet(Rtheta, y, family = obj$family, lambda = cand.lambda[1], alpha = 0)$beta)
if(sum(c.init == 0) == n){
c.init = rep(1e-10, n)
} else{
c.init = scale(c.init)
}
f.init = c(Rtheta %*% c.init)
# print(f.init)
# print(mean(y == ifelse(obj$linkinv(f.init) < 0.5, 0, 1)))
measure <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
# generate SS-ANOVA
tr_n = length(trainID)
te_n = length(testID)
tr_R = array(NA, c(tr_n, tr_n, d))
te_R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][trainID, trainID]
te_R[, , j] = K$K[[j]][testID, trainID]
}
tr_Rtheta <- wsGram(tr_R, mscale)
te_Rtheta <- wsGram(te_R, mscale)
for (k in 1:length(cand.lambda)) {
if(algo == "CD"){
# initialize
ff = f.init[trainID]
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y[trainID] - mu) / w
b = 0
# print(b)
zw = z * sqrt(w)
Rw = tr_Rtheta * w
cw = c.init[trainID] / sqrt(w)
sw = sqrt(w)
# sspline_fit = sspline.cd(tr_Rtheta, y[trainID], f.init[trainID], cand.lambda[k], obj, c.init[trainID])
sspline_fit = .Call("Csspline", zw, Rw, cw, sw, tr_n, cand.lambda[k], PACKAGE = "cdcosso")
b.new = sspline_fit$b.new
c.new = sspline_fit$c.new
cw.new = sspline_fit$cw.new
# print(b.new)
}
if(algo == "QP"){
sspline_fit = sspline.QP(tr_Rtheta, y[trainID], f.init[trainID], cand.lambda[k], obj, c.init[trainID])
b.new = sspline_fit$b.new
c.new = sspline_fit$c.new
cw.new = sspline_fit$cw.new
}
if(sum(is.nan(cw.new)) == tr_n){
next
} else{
# validation
# f.new <- fit$f.new
testfhat = c(b.new + te_Rtheta %*% c.new)
testmu = obj$linkinv(testfhat)
# testw = obj$variance(testmu)
# testz = testfhat + (y[testID] - testmu) / testw
#
# testzw = testz * sqrt(testw)
# testRw = te_Rtheta * testw
# rss <- t(testzw - testRw %*% cw.new - b.new * sqrt(testw)) %*% (testzw - testRw %*% cw.new - b.new * sqrt(testw)) + .1
# S = testRw %*% ginv(t(testRw) %*% testRw) %*% t(testRw)
# df = sum(diag(S))
# measure[f, k] <- rss / (1 - df/length(testID) + .1)^2 / length(testID)
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
# if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
# if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
# print(measure)
}
}
}
if(sum(is.na(measure)) == length(cand.lambda) * nfolds){
conv = FALSE
return(list(conv = conv))
}
rm(tr_Rtheta)
rm(te_Rtheta)
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# optimal lambda1
id = which.min(cvm)[1]
optlambda = cand.lambda[id]
# if(one.std){
# st1_err = cvm[id] + cvsd[id] # minimum cv err
# std.id = max(which(cvm[1:id] <= st1_err & cvm[1:id] <= cvm[id]))
# std.id = ifelse(std.id > id, std.id, id)
# optlambda = cand.lambda[std.id]
# } else{
#   optlambda = cand.lambda[id]
# }
#
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd, na.rm = T), max(cvm + cvsd, na.rm = T))
plot(log(cand.lambda), cvm, main = main, xlab = expression("Log(" * lambda[0] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
try(arrows(log(cand.lambda), cvm - cvsd, log(cand.lambda), cvm + cvsd, angle = 90, length = 0.01, col = 'gray'), silent = TRUE)
points(log(cand.lambda), cvm, pch = 15, col = 'red')
abline(v = log(cand.lambda)[id], col = 'darkgrey', lty = 2)
# abline(v = log(cand.lambda)[std.id], col = 'darkgrey', lty = 2)
# c.init = runif(n, -1e-5, 1e-5)
if(algo == "CD"){
ff = c(f.init)
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
# b = mean(z - Rtheta %*% c.init)
# print(b)
zw = z * sqrt(w)
Rw = Rtheta * w
cw = c.init / sqrt(w)
sw = sqrt(w)
# fit = sspline.cd(Rtheta, y, f.init, optlambda, obj, c.init)
fit = .Call("Csspline", zw, Rw, cw, sw, n, optlambda, PACKAGE = "cdcosso")
f.new <- c(fit$b.new + Rtheta %*% fit$c.new)
mu.new = obj$linkinv(f.new)
w.new = obj$variance(mu.new)
z.new = f.new + (y - mu.new) / w.new
print(f.new)
out = list(IDmat = IDmat, measure = measure, R = R, w.new = w, zw.new = zw, b.new = fit$b.new,
cw.new = fit$cw.new, c.new = fit$c.new, optlambda = optlambda, conv = TRUE)
}
if(algo == "QP"){
fit = sspline.QP(Rtheta, y, f.init, optlambda, obj, c.init)
f.new <- c(fit$b.new + Rtheta %*% fit$c.new)
mu.new = obj$linkinv(f.new)
w.new = obj$variance(mu.new)
z.new = f.new + (y - mu.new) / w.new
out = list(IDmat = IDmat, measure = measure, R = R, f.new = f.new, zw.new = z.new * w.new, b.new = fit$b.new,
cw.new = fit$cw.new, c.new = fit$c.new, w.new = w.new, optlambda = optlambda, conv = TRUE)
}
rm(K)
rm(Rtheta)
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
