theta.new = nng.QP(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, M[k], gamma)
}
testfhat = te_G %*% theta.new
testmu = obj$linkinv(testfhat)
testw = obj$variance(testmu)
testz = testfhat + (y[testID] - testmu) / testw
testzw = testz * sqrt(testw)
testGw = te_G * sqrt(testw)
# rss <- t(testzw - testGw %*% theta.new) %*% (testzw - testGw %*% theta.new) + .1
# l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
# l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
# S = l1 + l2
# measure[f, k] <- rss / (1 - d*S/length(testID) + .1)^2 / length(testID)
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
}
}
# measure[is.nan(measure)] = 1e-30
# mid = colSums(measure) != 0
# measure = measure[,mid]
# if(algo == "CD") lambda_theta = lambda_theta[mid]
# if(algo == "QP") M = M[mid]
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
std.id = ifelse(std.id > id, std.id, id)
if(algo == "CD") optlambda = lambda_theta[std.id]
if(algo == "QP") optM = M[std.id]
} else{
if(algo == "CD") optlambda = lambda_theta[id]
if(algo == "QP") optM = M[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
if(algo == "CD") xrange = log(lambda_theta)
if(algo == "QP") xrange = log(M)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
# init.theta = as.vector(scale(glmnet(x, y, family = "binomial", lambda = optlambda, gamma = 0)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD"){
Gw = G * sqrt(model$w.new)
uw = model$zw.new - model$b.new * model$sw.new - (n/2) * lambda0 * model$cw.new
# theta.new = nng.cd(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
#                  theta = init.theta, lambda0, optlambda, gamma)
theta.new = .Call("Cnng", Gw, uw, init.theta, optlambda, gamma)
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new)
}
if(algo == "QP"){
theta.new = nng.QP(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optM, gamma, obj)
out = list(cv_error = measure, optM = optM, gamma = gamma, theta.new = theta.new)
}
return(out)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
cv.nng = function(model, x, y, mscale, init.theta, lambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo)
{
n = length(y)
d = length(mscale)
IDmat = model$IDmat
sdx <- sqrt(drop(rep(1, n) %*% (x^2))/(n - 1))
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
if(algo == "CD") len = length(lambda_theta)
if(algo == "QP") len = length(M)
measure <- matrix(0, ncol = len, nrow = nfolds)
l = 0
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
tr_G = G[trainID,]
te_G = G[testID,]
tr_n = length(trainID)
te_n = length(testID)
for (k in 1:len) {
# init.theta = as.vector(scale(glmnet(x[trainID,], y[trainID], family = "binomial", lambda = lambda_theta[k], gamma = gamma)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD") {
theta.new = nng.cd(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, lambda_theta[k], gamma)
# Gw = tr_G * sqrt(model$w.new[trainID])
# uw = model$zw.new[trainID] - model$b.new * model$sw.new[trainID] - (tr_n/2) * lambda0 * model$cw.new[trainID]
# theta.new = .Call("Cnng", Gw, uw, init.theta, lambda_theta[k], gamma)
}
if(algo == "QP") {
theta.new = nng.QP(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, M[k], gamma)
}
testfhat = te_G %*% theta.new
testmu = obj$linkinv(testfhat)
testw = obj$variance(testmu)
testz = testfhat + (y[testID] - testmu) / testw
testzw = testz * sqrt(testw)
testGw = te_G * sqrt(testw)
# rss <- t(testzw - testGw %*% theta.new) %*% (testzw - testGw %*% theta.new) + .1
# l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
# l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
# S = l1 + l2
# measure[f, k] <- rss / (1 - d*S/length(testID) + .1)^2 / length(testID)
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
}
}
# measure[is.nan(measure)] = 1e-30
# mid = colSums(measure) != 0
# measure = measure[,mid]
# if(algo == "CD") lambda_theta = lambda_theta[mid]
# if(algo == "QP") M = M[mid]
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
std.id = ifelse(std.id > id, std.id, id)
if(algo == "CD") optlambda = lambda_theta[std.id]
if(algo == "QP") optM = M[std.id]
} else{
if(algo == "CD") optlambda = lambda_theta[id]
if(algo == "QP") optM = M[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
if(algo == "CD") xrange = log(lambda_theta)
if(algo == "QP") xrange = log(M)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
# init.theta = as.vector(scale(glmnet(x, y, family = "binomial", lambda = optlambda, gamma = 0)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD"){
# Gw = G * sqrt(model$w.new)
# uw = model$zw.new - model$b.new * model$sw.new - (n/2) * lambda0 * model$cw.new
theta.new = nng.cd(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
theta = init.theta, lambda0, optlambda, gamma)
# theta.new = .Call("Cnng", Gw, uw, init.theta, optlambda, gamma)
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new)
}
if(algo == "QP"){
theta.new = nng.QP(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optM, gamma, obj)
out = list(cv_error = measure, optM = optM, gamma = gamma, theta.new = theta.new)
}
return(out)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:20){
theta.new = sapply(1:d, function(j) {
sum((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new - r, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
if(sum(theta.new == 0) < d) theta.new = theta.new / sd(theta.new)
loss = abs(theta-theta.new)
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
print(theta.new)
print(conv)
return(theta.new)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:20){
theta.new = sapply(1:d, function(j) {
sum((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new - r, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
if(sum(theta.new == 0) < d) theta.new = theta.new / sd(theta.new)
loss = abs(theta-theta.new)
print(loss)
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
# print(theta.new)
print(conv)
return(theta.new)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:20){
theta.new = sapply(1:d, function(j) {
sum((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new - r, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
if(sum(theta.new == 0) < d) theta.new = theta.new / sd(theta.new)
loss = abs(theta-theta.new)
print(max(loss))
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
# print(theta.new)
print(conv)
return(theta.new)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:20){
theta.new = sapply(1:d, function(j) {
sum((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new - r, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
loss = abs(theta-theta.new)
print(max(loss))
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
# print(theta.new)
print(conv)
return(theta.new)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:20){
theta.new = sapply(1:d, function(j) {
mean((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new - r, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
loss = abs(theta-theta.new)
print(max(loss))
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
# print(theta.new)
print(conv)
return(theta.new)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:20){
theta.new = sapply(1:d, function(j) {
mean((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new - r, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
loss = abs(theta-theta.new)
print(max(loss))
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
print(i)
print(theta.new)
print(conv)
return(theta.new)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:20){
theta.new = sapply(1:d, function(j) {
mean((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new - r, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
loss = abs(theta-theta.new)
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
return(theta.new)
}
cv.nng = function(model, x, y, mscale, init.theta, lambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo)
{
n = length(y)
d = length(mscale)
IDmat = model$IDmat
sdx <- sqrt(drop(rep(1, n) %*% (x^2))/(n - 1))
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
if(algo == "CD") len = length(lambda_theta)
if(algo == "QP") len = length(M)
measure <- matrix(0, ncol = len, nrow = nfolds)
l = 0
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
tr_G = G[trainID,]
te_G = G[testID,]
tr_n = length(trainID)
te_n = length(testID)
for (k in 1:len) {
# init.theta = as.vector(scale(glmnet(x[trainID,], y[trainID], family = "binomial", lambda = lambda_theta[k], gamma = gamma)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD") {
theta.new = nng.cd(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, lambda_theta[k], gamma)
# Gw = tr_G * sqrt(model$w.new[trainID])
# uw = model$zw.new[trainID] - model$b.new * model$sw.new[trainID] - (tr_n/2) * lambda0 * model$cw.new[trainID]
# theta.new = .Call("Cnng", Gw, uw, init.theta, lambda_theta[k], gamma)
}
if(algo == "QP") {
theta.new = nng.QP(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, M[k], gamma)
}
testfhat = c(te_G %*% as.matrix(theta.new))
testmu = obj$linkinv(testfhat)
testw = obj$variance(testmu)
testz = testfhat + (y[testID] - testmu) / testw
testzw = testz * sqrt(testw)
testGw = te_G * sqrt(testw)
# rss <- t(testzw - testGw %*% theta.new) %*% (testzw - testGw %*% theta.new) + .1
# l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
# l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
# S = l1 + l2
# measure[f, k] <- rss / (1 - d*S/length(testID) + .1)^2 / length(testID)
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
}
}
# measure[is.nan(measure)] = 1e-30
# mid = colSums(measure) != 0
# measure = measure[,mid]
# if(algo == "CD") lambda_theta = lambda_theta[mid]
# if(algo == "QP") M = M[mid]
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
std.id = ifelse(std.id > id, std.id, id)
if(algo == "CD") optlambda = lambda_theta[std.id]
if(algo == "QP") optM = M[std.id]
} else{
if(algo == "CD") optlambda = lambda_theta[id]
if(algo == "QP") optM = M[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
if(algo == "CD") xrange = log(lambda_theta)
if(algo == "QP") xrange = log(M)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
# init.theta = as.vector(scale(glmnet(x, y, family = "binomial", lambda = optlambda, gamma = 0)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD"){
# Gw = G * sqrt(model$w.new)
# uw = model$zw.new - model$b.new * model$sw.new - (n/2) * lambda0 * model$cw.new
theta.new = nng.cd(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
theta = init.theta, lambda0, optlambda, gamma)
# theta.new = .Call("Cnng", Gw, uw, init.theta, optlambda, gamma)
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new)
}
if(algo == "QP"){
theta.new = nng.QP(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optM, gamma, obj)
out = list(cv_error = measure, optM = optM, gamma = gamma, theta.new = theta.new)
}
return(out)
}
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="CD")
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo="QP")
nng_fit
nng.QP = function (zw, b, sw, cw, w, G, theta, lambda0, M, gamma, obj)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
# theta = rep(1, d)
# print(theta)
uw = zw - b * sw - (n/2) * lambda0 * cw
# print(algo)
Amat = rbind(diag(1, d), rep(-1, d))
bvec = c(rep(0, d), -M)
for(i in 1:10){
Dmat = 2 * (t(Gw) %*% Gw  + diag(1-gamma, d))
dvec = c(2 * t(uw) %*% Gw - gamma)
# dvec = ifelse(dvec > 0 & abs(dvec) > lambda_theta * gamma, dvec, 0)
# theta.new = c(ginv(Dmat) %*% dvec)
theta.new <- solve.QP(Dmat, dvec, t(Amat), bvec)$solution
theta.new[theta.new < 1e-10] <- 0
if(sum(theta.new == 0) < d) theta.new = theta.new / sd(theta.new)
loss = abs(theta-theta.new)
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
return(theta.new)
}
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:20){
theta.new = sapply(1:d, function(j) {
mean((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new - r, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
loss = abs(theta-theta.new)
conv = max(loss) < 1e-5
if(conv) break
theta = theta.new
}
return(theta.new)
}
