tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, response = "survival")
te_x = te$x
te_y = te$y
# mean(te_y[,"status"])
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 1, kernel = "spline", scale = T, algo = "CD",
lambda_theta = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(-poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RiskSet, fit3$c_step$f.new)
en3_time[i] = mean(t1)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, algo = "CD",
lambda_theta = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20)),
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(-poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RiskSet, fit10$c_step$f.new)
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$method[[ll]] = "QP"
out$tp[ll] = round(mean(en3_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4)
out$fp[ll] = round(mean(en3_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4)
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$method[[ll]] = "CD"
out$tp[ll] = round(mean(en1_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4)
out$fp[ll] = round(mean(en1_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4)
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", p, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('quadratic prog \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel, na.rm = TRUE) ,"(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en3_tp, na.rm = TRUE), 4), "(", round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4), ")", "\n")
cat('fp :', round(mean(en3_fp, na.rm = TRUE), 4), "(", round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('coordinate descent \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel, na.rm = TRUE) ,"(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en1_tp, na.rm = TRUE), 4), "(", round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4), ")", "\n")
cat('fp :', round(mean(en1_fp, na.rm = TRUE), 4), "(", round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
ggplot(out, aes(x = p, y = f1, group = method, color = factor(method))) +
geom_line() +
geom_point() +
geom_errorbar(data = out, aes(ymin = f1 - f1_se, ymax = f1 + f1_se), width = 0.1) +  # 오류 막대 추가
labs(x = "", y = "", color = "method") +
facet_grid( ~ n, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # x축 텍스트 회전
strip.text = element_text(size = 11, face = "bold"),  # 패널 텍스트 크기와 굵기 조정
strip.placement = "outside",
axis.ticks = element_line(colour = "darkgray", size = 1),
panel.border = element_rect(colour = "black", fill = NA, size = .7),
strip.background = element_rect(fill = "lightgray", colour = "black"))
library(ggplot2)
ggplot(out, aes(x = p, y = f1, group = method, color = factor(method))) +
geom_line() +
geom_point() +
geom_errorbar(data = out, aes(ymin = f1 - f1_se, ymax = f1 + f1_se), width = 0.1) +  # 오류 막대 추가
labs(x = "", y = "", color = "method") +
facet_grid( ~ n, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # x축 텍스트 회전
strip.text = element_text(size = 11, face = "bold"),  # 패널 텍스트 크기와 굵기 조정
strip.placement = "outside",
axis.ticks = element_line(colour = "darkgray", size = 1),
panel.border = element_rect(colour = "black", fill = NA, size = .7),
strip.background = element_rect(fill = "lightgray", colour = "black"))
ggplot(out, aes(x = p, y = miss, group = method, color = factor(method))) +
geom_line() +
geom_point() +
geom_errorbar(data = out, aes(ymin = miss - miss_se, ymax = miss + miss_se), width = 0.1) +  # 오류 막대 추가
labs(x = "", y = "", color = "method") +
facet_grid( ~ n, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # x축 텍스트 회전
strip.text = element_text(size = 11, face = "bold"),  # 패널 텍스트 크기와 굵기 조정
strip.placement = "outside",
axis.ticks = element_line(colour = "darkgray", size = 1),
panel.border = element_rect(colour = "black", fill = NA, size = .7),
strip.background = element_rect(fill = "lightgray", colour = "black"))
library(ggplot2)
ggplot(out, aes(x = p, y = f1, group = method, color = factor(method))) +
geom_line() +
geom_point() +
geom_errorbar(data = out, aes(ymin = f1 - f1_se, ymax = f1 + f1_se), width = 0.1) +  # 오류 막대 추가
labs(x = "", y = "", color = "method") +
facet_grid( ~ n, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # x축 텍스트 회전
strip.text = element_text(size = 11, face = "bold"),  # 패널 텍스트 크기와 굵기 조정
strip.placement = "outside",
axis.ticks = element_line(colour = "darkgray", size = 1),
panel.border = element_rect(colour = "black", fill = NA, size = .7),
strip.background = element_rect(fill = "lightgray", colour = "black"))
ggplot(out, aes(x = p, y = miss, group = method, color = factor(method))) +
geom_line() +
geom_point() +
geom_errorbar(data = out, aes(ymin = miss - miss_se, ymax = miss + miss_se), width = 0.1) +  # 오류 막대 추가
labs(x = "", y = "", color = "method") +
facet_grid( ~ n, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # x축 텍스트 회전
strip.text = element_text(size = 11, face = "bold"),  # 패널 텍스트 크기와 굵기 조정
strip.placement = "outside",
axis.ticks = element_line(colour = "darkgray", size = 1),
panel.border = element_rect(colour = "black", fill = NA, size = .7),
strip.background = element_rect(fill = "lightgray", colour = "black"))
fit10
cosso::garrote.Cox
gradient.Hessian.Theta
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, time, status, RS, Hess.FullNumer.unScale)
getc_cvfit
model = getc_cvfit
lambda0 = getc_cvfit$optlambda
mscale = wt
n = length(time)
d = length(mscale)
IDmat = model$IDmat
RS = RiskSet(time, status)
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
if(algo == "QP") lambda_theta = exp(seq(log(1e-4), log(40), length.out = length(lambda_theta)))
len = length(lambda_theta)
measure <- rep(0, len)
save_theta <- list()
k=1
init.theta=rep(1, d)
chat = model$c.new
lambda0 = model$optlambda
lambda_theta = lambda_theta[1]
gamma
Risk
G
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, time, status, RS, Hess.FullNumer.unScale)
gradient.Hessian.Theta
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, M = 0, time, status, RS, Hess.FullNumer.unScale)
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, M = 0, time, status, RS)
garrote.Cox
ess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
Hess.FullNumer.unScale[, , i]
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, M = 0, time, status, RS)
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, M = 0, time, status, RS, Hess.FullNumer.unScale)
GH
p
d
getc.cd
Hess = GH$Hessian
Grad = GH$Gradient
# 2 * n * lambda0 * Rtheta2
w = 1/diag(Hess)
# 2 * n * lambda0 * Rtheta2
w = 1/diag(Hess)
w
gradient.Hessian.Theta
gradient.Hessian.Theta
gradient.Hessian.Theta = function (initTheta, initC, G1, G2, lambda0, time, status, riskset, Hess.FullNumer.unScale)
{
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
Grad.Term1 = -t(G1) %*% status/n
Grad.Term2 = matrix(NA, ncol = ncol(riskset), nrow = p)
Grad.FullNumer = t(G1) %*% diag(as.numeric(exp(eta)))
Grad.FullDenom = Hess.FullDenom = exp(eta)
Hess.FullNumer = Hess.FullNumer.unScale * array(rep(exp(eta), each = p^2), dim = c(p, p, n))
Hess.Term1 = Hess.Term2 = array(NA, dim = c(p, p, ncol(riskset)))
k = 1
tempSum.exp.eta = sum(exp(eta[riskset[, k]]), na.rm = TRUE)
tempGradient.numer = apply(Grad.FullNumer[, riskset[, k]], 1, sum, na.rm = TRUE)
tempHessian.numer = apply(Hess.FullNumer[, , riskset[, k]], c(1, 2), sum, na.rm = TRUE)
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
for (k in 2:ncol(riskset)) {
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
}
else {
tempGradient.numer = tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer = tempHessian.numer - Hess.FullNumer[, , excludeID]
}
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
}
Grad.Term2 = apply(Grad.Term2, 1, sum)/n
Gradient = Grad.Term1 + Grad.Term2
Hessian = apply(Hess.Term1, c(1, 2), sum)/n - apply(Hess.Term2, c(1, 2), sum)/n
return(list(Gradient = Gradient, Hessian = Hessian))
}
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, M = 0, time, status, RS, Hess.FullNumer.unScale)
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, time, status, RS, Hess.FullNumer.unScale)
Hess = GH$Hessian
Grad = GH$Gradient
Hess
1/diag(Hess)
gradient.Hessian.Theta = function (initTheta, initC, G1, G2, lambda0, time, status, riskset, Hess.FullNumer.unScale)
{
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
Grad.Term1 = -t(G1) %*% status/n
Grad.Term2 = matrix(NA, ncol = ncol(riskset), nrow = p)
Grad.Term3 = lambda0 * t(G2) %*% initC / 2
Grad.FullNumer = t(G1) %*% diag(as.numeric(exp(eta)))
Grad.FullDenom = Hess.FullDenom = exp(eta)
Hess.FullNumer = Hess.FullNumer.unScale * array(rep(exp(eta), each = p^2), dim = c(p, p, n))
Hess.Term1 = Hess.Term2 = array(NA, dim = c(p, p, ncol(riskset)))
k = 1
tempSum.exp.eta = sum(exp(eta[riskset[, k]]), na.rm = TRUE)
tempGradient.numer = apply(Grad.FullNumer[, riskset[, k]], 1, sum, na.rm = TRUE)
tempHessian.numer = apply(Hess.FullNumer[, , riskset[, k]], c(1, 2), sum, na.rm = TRUE)
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
for (k in 2:ncol(riskset)) {
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
}
else {
tempGradient.numer = tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer = tempHessian.numer - Hess.FullNumer[, , excludeID]
}
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
}
Grad.Term2 = apply(Grad.Term2, 1, sum)/n
Gradient = Grad.Term1 + Grad.Term2 + Grad.Term3
Hessian = apply(Hess.Term1, c(1, 2), sum)/n - apply(Hess.Term2, c(1, 2), sum)/n
return(list(Gradient = Gradient, Hessian = Hessian))
}
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, time, status, RS, Hess.FullNumer.unScale)
Hess = GH$Hessian
Grad = GH$Gradient
# 2 * n * lambda0 * Rtheta2
w = 1/diag(Hess)
w
lambda0
lambda0=0.00001
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, time, status, RS, Hess.FullNumer.unScale)
Hess = GH$Hessian
Grad = GH$Gradient
# 2 * n * lambda0 * Rtheta2
w = 1/diag(Hess)
w
lambda0
gradient.Hessian.Theta = function (initTheta, initC, G1, G2, lambda0, time, status, riskset, Hess.FullNumer.unScale)
{
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
Grad.Term1 = -t(G1) %*% status/n
Grad.Term2 = matrix(NA, ncol = ncol(riskset), nrow = p)
Grad.Term3 = lambda0 * t(G2) %*% initC / 2
Grad.FullNumer = t(G1) %*% diag(as.numeric(exp(eta)))
Grad.FullDenom = Hess.FullDenom = exp(eta)
Hess.FullNumer = Hess.FullNumer.unScale * array(rep(exp(eta), each = p^2), dim = c(p, p, n))
Hess.Term1 = Hess.Term2 = array(NA, dim = c(p, p, ncol(riskset)))
k = 1
tempSum.exp.eta = sum(exp(eta[riskset[, k]]), na.rm = TRUE)
tempGradient.numer = apply(Grad.FullNumer[, riskset[, k]], 1, sum, na.rm = TRUE)
tempHessian.numer = apply(Hess.FullNumer[, , riskset[, k]], c(1, 2), sum, na.rm = TRUE)
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
for (k in 2:ncol(riskset)) {
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
}
else {
tempGradient.numer = tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer = tempHessian.numer - Hess.FullNumer[, , excludeID]
}
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
}
Grad.Term2 = apply(Grad.Term2, 1, sum)/n
Gradient = Grad.Term1 + Grad.Term2 + Grad.Term3
Hessian = apply(Hess.Term1, c(1, 2), sum)/n - apply(Hess.Term2, c(1, 2), sum)/n
return(list(Gradient = Gradient, Hessian = Hessian))
}
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, time, status, RS, Hess.FullNumer.unScale)
Hess = GH$Hessian
Grad = GH$Gradient
# 2 * n * lambda0 * Rtheta2
w = 1/diag(Hess)
z = (Hess %*% c.init - Grad) / lambda0
w
z
gettheta.cd
f.init - ifelse(w != 0, - Grad/w, 0)
f.init
Grad/w
ifelse(w != 0, - Grad/w, 0)
diag(Hess)
1/diag(Hess)
f.init - ifelse(w != 0, - Grad/w, 0)
# 2 * n * lambda0 * Rtheta2
w = 1/diag(Hess)
z = f.init - ifelse(w != 0, - Grad/w, 0)
c(z * sqrt(w)) - 2 * lambda0 * (chat / sqrt(w + 1e-10))
uw = c(z * sqrt(w)) - 2 * lambda0 * (chat / sqrt(w + 1e-10))
Gw = G * sqrt(w)
uw
Gw
theta.new = .Call("cox_theta_step", Gw, uw, n, d, init.theta, lambda_theta, gamma)
theta.new
w
z
z = rep(0.5, d) - ifelse(w != 0, - Grad/w, 0)
z
uw = c(z * sqrt(w)) - 2 * lambda0 * (chat / sqrt(w + 1e-10))
Gw = G * sqrt(w)
uw
Gw
theta.new = .Call("cox_theta_step", Gw, uw, n, d, init.theta, lambda_theta, gamma)
theta.new
gettheta.cd = function(init.theta, f.init, G, time, status, chat, lambda0, lambda_theta, gamma, Risk){
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
wz = calculate_wz_for_theta(init.theta, G, time, status, Risk)
w = wz$weight
z = wz$z
uw = c(z * sqrt(w)) - 2 * lambda0 * (chat / sqrt(w + 1e-10))
Gw = G * sqrt(w)
theta.new = .Call("cox_theta_step", Gw, uw, n, d, init.theta, lambda_theta, gamma)
#
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
GH = gradient.Hessian.Theta(init.theta, chat, G, G, lambda0, time, status, RS, Hess.FullNumer.unScale)
Hess = GH$Hessian
Grad = GH$Gradient
# 2 * n * lambda0 * Rtheta2
w = 1/diag(Hess)
z = rep(0.5, d) - ifelse(w != 0, - Grad/w, 0)
uw = c(z * sqrt(w)) - 2 * lambda0 * (chat / sqrt(w + 1e-10))
Gw = G * sqrt(w)
theta.new = .Call("cox_theta_step", Gw, uw, n, d, init.theta, lambda_theta, gamma)
# theta.new = ifelse(theta.new <= 1e-6, 0, theta.new)
return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
gradient.Hessian.Theta = function (initTheta, initC, G1, G2, lambda0, time, status, riskset, Hess.FullNumer.unScale)
{
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
Grad.Term1 = -t(G1) %*% status/n
Grad.Term2 = matrix(NA, ncol = ncol(riskset), nrow = p)
Grad.Term3 = lambda0 * t(G2) %*% initC / 2
Grad.FullNumer = t(G1) %*% diag(as.numeric(exp(eta)))
Grad.FullDenom = Hess.FullDenom = exp(eta)
Hess.FullNumer = Hess.FullNumer.unScale * array(rep(exp(eta), each = p^2), dim = c(p, p, n))
Hess.Term1 = Hess.Term2 = array(NA, dim = c(p, p, ncol(riskset)))
k = 1
tempSum.exp.eta = sum(exp(eta[riskset[, k]]), na.rm = TRUE)
tempGradient.numer = apply(Grad.FullNumer[, riskset[, k]], 1, sum, na.rm = TRUE)
tempHessian.numer = apply(Hess.FullNumer[, , riskset[, k]], c(1, 2), sum, na.rm = TRUE)
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
for (k in 2:ncol(riskset)) {
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
}
else {
tempGradient.numer = tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer = tempHessian.numer - Hess.FullNumer[, , excludeID]
}
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
}
Grad.Term2 = apply(Grad.Term2, 1, sum)/n
Gradient = Grad.Term1 + Grad.Term2 + Grad.Term3
Hessian = apply(Hess.Term1, c(1, 2), sum)/n - apply(Hess.Term2, c(1, 2), sum)/n
return(list(Gradient = Gradient, Hessian = Hessian))
}
lambda_theta = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20))
lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
theta_cvfit
# solve (theta) - 2nd
theta.new = rescale_theta(theta_cvfit$theta.new)
# print(theta.new)
getc_cvfit = cv.getc(K, time, status, theta.new/wt^2, lambda0, type, kparam, algo, show = TRUE)
# time = unlist(tr_y[, "time"])
# status = unlist(tr_y[, "status"])
# type = "spline"
# algo = "CD"
# family = 'Cox'
# gamma = 0.95
# kparam=1
# lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
# lambda_theta = exp(seq(log(2^{-27}), log(2^{2}), length.out = 20))
# wt = rep(1, ncol(x))
cdcosso.cox = function (x, time, status, wt, lambda0, lambda_theta, gamma, type, kparam, scale, algo)
{
n = length(time)
p = length(wt)
# cat("fit COSSO  with n = ", n, "p =", p, "\n")
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
# cat("kernel:", type, "and d =", d, "\n")
par(mfrow = c(1,3))
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
# solve (theta) - 2nd
theta.new = rescale_theta(theta_cvfit$theta.new)
# print(theta.new)
getc_cvfit = cv.getc(K, time, status, theta.new/wt^2, lambda0, type, kparam, algo, show = TRUE)
par(mfrow = c(1,1))
out = list(data = list(x = x, time = time, status = status, RiskSet = RiskSet(time, status), R = getc_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = getc_cvfit,
theta_step = theta_cvfit,
family = "Cox",
algorithm = algo)
return(out)
}
