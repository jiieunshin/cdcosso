Sum.exp.eta.Grad = Sum.exp.eta.Grad + exp.eta / Sum.exp.eta # {j in R_i} exp(R_j c)
Sum.exp.eta.Hess = Sum.exp.eta.Hess + ( exp.eta * Sum.exp.eta - exp.eta^2 ) / Sum.exp.eta^2
}
Grad.Term = status[k] - Sum.exp.eta.Grad
weight[k] = Sum.exp.eta.Hess
z[k] = eta + Grad.Term / weight[k]
}
return(list(z = z, weight = weight))
}
# calculate_GH_for_theta = function(theta, G, chat, time, status, lambda0, Risk){
#   n = length(time)
#   d = length(theta)
#   tie.size = as.numeric(table(time[status == 1]))
#   # if (min(eigen(R)$value) < 0)
#   #   R = R + 1e-08 * diag(nrow(R))
#   eta = G %*% theta
#   Hess.FullNumer.unScale = array(NA, dim = c(d, d, n))
#   for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
#
#   Grad.Term1 = -t(G) %*% status/n
#   Grad.Term2 = matrix(NA, ncol = ncol(Risk), nrow = d)
#   Grad.Term3 = 2 * lambda0 * t(G) %*% chat
#   Grad.FullNumer = t(G) %*% diag(as.numeric(exp(eta)))
#   Grad.FullDenom = Hess.FullDenom = exp(eta)
#   Hess.FullNumer = Hess.FullNumer.unScale * array(rep(exp(eta), each = d^2),
#                                                   dim = c(d, d, n)
#   )
#   Hess.Term1 = Hess.Term2 = array(NA, dim = c(d, d, ncol(Risk)))
#   k = 1
#   tempSum.exp.eta = sum(exp(eta[Risk[, k]]), na.rm = TRUE)
#   temp.Gradient.numer = apply(Grad.FullNumer[, Risk[, k]], 1, sum, na.rm = TRUE)
#   temp.Hessian.numer = apply(Hess.FullNumer[, , Risk[, k]], c(1, 2), sum, na.rm = TRUE)
#   Grad.Term2[, k] = tie.size[k] * temp.Gradient.numer/tempSum.exp.eta
#   Hess.Term1[, , k] = temp.Hessian.numer/tempSum.exp.eta
#   Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
#   for (k in 2:ncol(Risk)) {
#     excludeID = Risk[, k - 1][!Risk[, k - 1] %in% Risk[, k]]
#     tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
#     if (length(excludeID) > 1) {
#       temp.Gradient.numer = temp.Gradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
#       temp.Hessian.numer = temp.Hessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
#     }
#     else {
#       temp.Gradient.numer = temp.Gradient.numer - Grad.FullNumer[, excludeID]
#       temp.Hessian.numer = temp.Hessian.numer - Hess.FullNumer[, , excludeID]
#     }
#     Grad.Term2[, k] = tie.size[k] * temp.Gradient.numer/tempSum.exp.eta
#     Hess.Term1[, , k] = temp.Hessian.numer/tempSum.exp.eta
#     Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
#   }
#   Grad.Term2 = apply(Grad.Term2, 1, sum)/n
#   Gradient = as.vector(Grad.Term1 + Grad.Term2 + Grad.Term3)
#   Hessian = apply(Hess.Term1, c(1, 2), sum)/n - apply(Hess.Term2, c(1, 2), sum)/n
#   return(list(Gradient = Gradient, Hessian = Hessian))
# }
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
train_id = sort(sample(1:nrow(X), nrow(X) * 0.7))
test_id = (1:nrow(X))[-train_id]
tr_x = X[train_id,]
tr_y = y[train_id,]
te_x = X[test_id,]
te_y = y[test_id,]
# t1 = system.time({
#   fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = FALSE, scale = T, algo = "QP"), silent = TRUE)
# })  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
# print(fit10$theta_step$theta.new)
# if(!(class(fit3) == 'try-error')){
#   time3[i] = t1[3]
#   en3_varsel[i] = sum(ifelse(fit3$theta_step$theta.new > 0, 1, 0))
#   en3_pred = predict.cdcosso(fit3, te_x)
#   en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new <= 0.5, 0, 1))
# }
# if(!(class(fit10) == 'try-error')){
#   time10[i] = t2[3]
#   en1_varsel[i] = sum(ifelse(fit10$theta_step$theta.new > 0, 1, 0))
#   en1_pred = predict.cdcosso(fit10, te_x)
#   # en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
#   en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# }
#
# if(i == iter){
# print(Sys.time())
# cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
# cat("\n iteration :", i, "\n")
#
# cat('(gamma=0.7) \n')
# cat("length :", sum(!is.na(en3_miss)), "\n")
# cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
# cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
#
# cat('(gamma=1) \n')
# cat("length :", sum(!is.na(en1_miss)), "\n")
# cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
# cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
# time = unlist(y[, 'time'])
# status = unlist(y[, 'status'])
# mscale = rep(1, d)/wt^2
# nfolds = 5
# cand.lambda = lambda0
cv.getc = function(x, time, status, mscale, nfolds, cand.lambda, one.std, type, kparam, algo)
{
n <- length(time)
IDmat <- cvsplitID(n, nfolds)
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- wsGram(R, mscale)
RS = RiskSet(time, status)
measure <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
miss <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
# generate SS-ANOVA
tr_n = length(trainID)
te_n = length(testID)
tr_RS = RiskSet(time[trainID], status[trainID])
te_RS = RiskSet(time[testID], status[testID])
tr_R = array(NA, c(tr_n, tr_n, d))
te_R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][trainID, trainID]
te_R[, , j] = K$K[[j]][testID, trainID]
}
tr_Rtheta <- wsGram(tr_R, mscale)
te_Rtheta <- wsGram(te_R, mscale)
for (k in 1:length(cand.lambda)){
# dyn.load("src/coxfuncs.dll")
# .Call("Cget_c", tr_Rtheta, Rtheta, n, tr_n, tr_RS, c.init, cand.lambda[k])
if(algo == "CD"){
c.init = as.vector(glmnet(tr_Rtheta, cbind(time = time[trainID], status = status[trainID]), family = 'cox', lambda = cand.lambda[k], alpha = 0)$beta)
fit = getc.cd(tr_Rtheta, c.init, time[trainID], status[trainID], cand.lambda[k], tr_RS)
}
if(algo == "QP"){
# fit = getc.QP(tr_Rtheta, Rtheta, time[trainID], status[trainID], tr_RS, cand.lambda[k])
}
Lik = PartialLik(time[trainID], status[trainID], tr_RS, tr_Rtheta, fit$c.new)
XX = fit$zw.new - (tr_Rtheta * fit$w.new) %*% fit$cw.new - fit$b.new * fit$sw.new
num = t(XX) %*% XX
den = (1 - sum(diag(tr_Rtheta %*% ginv(tr_Rtheta + diag(fit$w.new)/cand.lambda[k]))) / tr_n)^2
measure[f, k] <- as.vector(num / den / tr_n)
# UHU = fit$Hessian %*% fit$c.new - fit$Gradient / diag(fit$Hessian)
miss[f, k] = Lik
}
}
# print(measure)
rm(tr_Rtheta)
rm(te_Rtheta)
measure[measure == -Inf | measure == Inf | is.nan(measure)] <- NA
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
ylab = "Approximate cross-validation"
# optimal lambda1
# id = which.min(cvm)[1]
id = cvm[10]
optlambda = cand.lambda[id]
# plotting error bar
main = "Cox family"
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
plot(log(cand.lambda), cvm, main = main, xlab = expression("Log(" * lambda[0] * ")"), ylab = ylab, ylim = max_min, type = 'n')
try(arrows(log(cand.lambda), cvm - cvsd, log(cand.lambda), cvm + cvsd, angle = 90, length = 0.01, col = 'gray'), silent = TRUE)
points(log(cand.lambda), cvm, pch = 15, col = 'red')
abline(v = log(cand.lambda)[id], col = 'darkgrey', lty = 2)
# if(one.std) abline(v = log(cand.lambda)[std.id], col = 'darkgrey')
###
miss_cvm <- apply(miss, 2, mean, na.rm = T)
misS_cvsd <- apply(miss, 2, sd, na.rm = T) / sqrt(nrow(miss)) + 1e-22
max_min <- c(min(miss_cvm - misS_cvsd, na.rm = TRUE), max(miss_cvm + misS_cvsd, na.rm = TRUE))
plot(log(cand.lambda), miss_cvm, main = main, xlab = expression("Log(" * lambda[0] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
try(arrows(log(cand.lambda), miss_cvm - misS_cvsd, log(cand.lambda), miss_cvm + misS_cvsd, angle = 90, length = 0.01, col = 'gray'), silent = TRUE)
points(log(cand.lambda), miss_cvm, pch = 15, col = 'red')
abline(v = log(cand.lambda)[id], col = 'darkgrey', lty = 2)
###
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox', lambda = optlambda, alpha = 0)$beta)
fit = getc.cd(Rtheta, c.init, time, status, optlambda, RS)
# f.new = c(Rtheta %*% c.new)
out = list(IDmat = IDmat, RS = RS, measure = measure, R = R, w.new = fit$w.new, zw.new = fit$zw.new, b.new = fit$b.new,
cw.new = fit$cw.new, c.new = fit$c.new, optlambda = optlambda, conv = TRUE)
rm(K)
rm(Rtheta)
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
fit10
# time = unlist(y[, 'time'])
# status = unlist(y[, 'status'])
# mscale = rep(1, d)/wt^2
# nfolds = 5
# cand.lambda = lambda0
cv.getc = function(x, time, status, mscale, nfolds, cand.lambda, one.std, type, kparam, algo)
{
n <- length(time)
IDmat <- cvsplitID(n, nfolds)
K = make_anovaKernel(x, x, type = type, kparam)
d = K$numK
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- wsGram(R, mscale)
RS = RiskSet(time, status)
measure <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
miss <- matrix(NA, ncol = length(cand.lambda), nrow = nfolds)
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
# generate SS-ANOVA
tr_n = length(trainID)
te_n = length(testID)
tr_RS = RiskSet(time[trainID], status[trainID])
te_RS = RiskSet(time[testID], status[testID])
tr_R = array(NA, c(tr_n, tr_n, d))
te_R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][trainID, trainID]
te_R[, , j] = K$K[[j]][testID, trainID]
}
tr_Rtheta <- wsGram(tr_R, mscale)
te_Rtheta <- wsGram(te_R, mscale)
for (k in 1:length(cand.lambda)){
# dyn.load("src/coxfuncs.dll")
# .Call("Cget_c", tr_Rtheta, Rtheta, n, tr_n, tr_RS, c.init, cand.lambda[k])
if(algo == "CD"){
c.init = as.vector(glmnet(tr_Rtheta, cbind(time = time[trainID], status = status[trainID]), family = 'cox', lambda = cand.lambda[k], alpha = 0)$beta)
fit = getc.cd(tr_Rtheta, c.init, time[trainID], status[trainID], cand.lambda[k], tr_RS)
}
if(algo == "QP"){
# fit = getc.QP(tr_Rtheta, Rtheta, time[trainID], status[trainID], tr_RS, cand.lambda[k])
}
Lik = PartialLik(time[trainID], status[trainID], tr_RS, tr_Rtheta, fit$c.new)
XX = fit$zw.new - (tr_Rtheta * fit$w.new) %*% fit$cw.new - fit$b.new * fit$sw.new
num = t(XX) %*% XX
den = (1 - sum(diag(tr_Rtheta %*% ginv(tr_Rtheta + diag(fit$w.new)/cand.lambda[k]))) / tr_n)^2
measure[f, k] <- as.vector(num / den / tr_n)
# UHU = fit$Hessian %*% fit$c.new - fit$Gradient / diag(fit$Hessian)
miss[f, k] = Lik
}
}
# print(measure)
rm(tr_Rtheta)
rm(te_Rtheta)
measure[measure == -Inf | measure == Inf | is.nan(measure)] <- NA
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
ylab = "Approximate cross-validation"
# optimal lambda1
# id = which.min(cvm)[1]
id = 10
optlambda = cand.lambda[id]
# plotting error bar
main = "Cox family"
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
plot(log(cand.lambda), cvm, main = main, xlab = expression("Log(" * lambda[0] * ")"), ylab = ylab, ylim = max_min, type = 'n')
try(arrows(log(cand.lambda), cvm - cvsd, log(cand.lambda), cvm + cvsd, angle = 90, length = 0.01, col = 'gray'), silent = TRUE)
points(log(cand.lambda), cvm, pch = 15, col = 'red')
abline(v = log(cand.lambda)[id], col = 'darkgrey', lty = 2)
# if(one.std) abline(v = log(cand.lambda)[std.id], col = 'darkgrey')
###
miss_cvm <- apply(miss, 2, mean, na.rm = T)
misS_cvsd <- apply(miss, 2, sd, na.rm = T) / sqrt(nrow(miss)) + 1e-22
max_min <- c(min(miss_cvm - misS_cvsd, na.rm = TRUE), max(miss_cvm + misS_cvsd, na.rm = TRUE))
plot(log(cand.lambda), miss_cvm, main = main, xlab = expression("Log(" * lambda[0] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
try(arrows(log(cand.lambda), miss_cvm - misS_cvsd, log(cand.lambda), miss_cvm + misS_cvsd, angle = 90, length = 0.01, col = 'gray'), silent = TRUE)
points(log(cand.lambda), miss_cvm, pch = 15, col = 'red')
abline(v = log(cand.lambda)[id], col = 'darkgrey', lty = 2)
###
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox', lambda = optlambda, alpha = 0)$beta)
fit = getc.cd(Rtheta, c.init, time, status, optlambda, RS)
# f.new = c(Rtheta %*% c.new)
out = list(IDmat = IDmat, RS = RS, measure = measure, R = R, w.new = fit$w.new, zw.new = fit$zw.new, b.new = fit$b.new,
cw.new = fit$cw.new, c.new = fit$c.new, optlambda = optlambda, conv = TRUE)
rm(K)
rm(Rtheta)
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
fit10
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(50, 100, 200, 400)){
nb = n
for(p in c(50, 100, 200, 400)){
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "additive", response = "regression")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "regression")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "QP"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_miss[i] = mean((te_y - en1_pred$mu.new)^2)
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 0.8
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 1
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", d, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel) ,"(", round(sd(en3_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel) ,"(", round(sd(en1_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
### 실행 #######################################
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(50, 100, 200, 400)){
nb = n
for(p in c(50, 100, 200, 400)){
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "additive", response = "regression")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "regression")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "QP"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_miss[i] = mean((te_y - en1_pred$mu.new)^2)
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 0.8
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 1
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", d, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel) ,"(", round(sd(en3_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel) ,"(", round(sd(en1_varsel)/sqrt(iter), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
fit10
