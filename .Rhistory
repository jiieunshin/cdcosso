Sum.exp.eta.Grad = Sum.exp.eta.Grad + exp.eta / Sum.exp.eta # {j in R_i} exp(R_j c)
Sum.exp.eta.Hess = Sum.exp.eta.Hess + ( exp.eta * Sum.exp.eta - exp.eta^2 ) / Sum.exp.eta^2
}
Grad.Term[k] = status[k] - Sum.exp.eta.Grad
weight[k] = Sum.exp.eta.Hess
z[k] = eta - ifelse(weight[k] != 0, - Grad.Term[k]/weight[k], 0)
}
return(list(z = z, gradient = Grad.Term, weight = weight))
}
gettheta.QP = function(init.theta, c.hat, G, time, status, lambda0, lambda_theta, Risk, ACV_pen){
n = nrow(G)
p = ncol(G)
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta),
length(init.theta),
n)
)
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
loop = 0
iter.diff = Inf
old.Theta = init.theta
while (loop < 15 & iter.diff > 1e-04) {
loop = loop + 1
GH = cosso::gradient.Hessian.Theta(old.Theta, c.hat, G, G,
lambda0, lambda_theta, time, status, Risk, Hess.FullNumer.unScale)
if(min(eigen(GH$H)$value) < 0)
GH$H = GH$H + max(1e-07, 1.5 * abs(min(eigen(GH$H)$value))) * diag(length(old.Theta))
dvec = -(GH$G - GH$H %*% old.Theta)
Amat = t(rbind(diag(p), rep(-1, p)))
bvec = c(rep(0, p), -lambda_theta)
new.Theta = cosso::My_solve.QP(GH$H, dvec, Amat, bvec)
new.Theta[new.Theta < 1e-8] = 0
iter.diff = mean(abs(new.Theta - old.Theta))
old.Theta = new.Theta
}
UHU = G %*% My_solve(GH$H, t(G))
ACV = cosso::PartialLik(time, status, Risk, G %*% new.Theta) + ACV_pen
return(list(theta.new = new.Theta, G = GH$G, H = GH$H, ACV = ACV))
}
make_kernel = function (x, y, type)
{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
cat_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
n1 <- length(x)
n2 <- length(y)
x <- rep(x, times = n2)
y <- rep(y, each = n1)
L <- length(unique(c(x, y)))
K <- matrix(L * (x == y) - 1, n1, n2)
return(K)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly" | type == "poly2") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline" | type == "spline2") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear" | type == "linear2") {
K = tcrossprod(x, y)
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam, scale)
{
# if (length(unique(c(A, B))) <= 6)
#   K_temp <- cat_kernel(A, B)
# else K_temp <- spline_kernel(A, B)
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for two-way interactions
if (type == "spline") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo ="QP", show = TRUE)
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo ="QP", show = TRUE)
getc_cvfit
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
algo
init.theta = rep(1, d)
f.init = model$f.new
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
model = getc_cvfit
lambda0 = getc_cvfit$optlambda
mscale = wt
n = length(time)
d = length(mscale)
IDmat = model$IDmat
RS = RiskSet(time, status)
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
if(algo == "QP") lambda_theta = exp(seq(log(1e-4), log(40), length.out = length(lambda_theta)))
len = length(lambda_theta)
measure <- rep(0, len)
save_theta <- list()
k=1
fit = gettheta.cd(rep(1, d), model$f.new, G, time, status, 0, model$c.new, model$ACV_pen,
0, lambda0, lambda_theta[k], gamma, RS)
init.theta = rep(1, d)
f.init = model$f.new
chat = model$c.new
ACV_pen = model$ACV_pen
lambda_theta = lambda_theta[k]
Risk = RS
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
theta.old = init.theta
theta.new = rep(0, d)
loss = rep(1, d)
GH = gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
GH
theta.old
chat
G
lambda0
time
Risk
Hess.FullNumer.unScale
gradient.Hessian.Theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
try(GH)
Hess.FullNumer.unScale
initTheta = init.theta
initC = chat
G1 = G
G2 = G
riskset = RS
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
eta
Grad.Term1 = -t(G1) %*% status/n
Grad.Term2 = matrix(NA, ncol = ncol(riskset), nrow = p)
Grad.Term3 = lambda0 * t(G2) %*% initC
Grad.Term1
Grad.Term2
lambda0 * t(G2) %*% initC
Grad.Term2 = matrix(NA, ncol = ncol(riskset), nrow = p)
Grad.Term3 = lambda0 * t(G2) %*% initC
Grad.FullNumer = t(G1) %*% diag(as.numeric(exp(eta)))
Grad.FullDenom = Hess.FullDenom = exp(eta)
Hess.FullNumer = Hess.FullNumer.unScale * array(rep(exp(eta), each = p^2), dim = c(p, p, n))
Hess.Term1 = Hess.Term2 = array(NA, dim = c(p, p, ncol(riskset)))
Grad.FullNumer
Grad.FullDenom
Hess.FullNumer
Hess.Term1 = Hess.Term2 = array(NA, dim = c(p, p, ncol(riskset)))
k = 1
tempSum.exp.eta = sum(exp(eta[riskset[, k]]), na.rm = TRUE)
tempGradient.numer = apply(Grad.FullNumer[, riskset[, k]], 1, sum, na.rm = TRUE)
tempHessian.numer = apply(Hess.FullNumer[, , riskset[, k]], c(1, 2), sum, na.rm = TRUE)
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
Hess.Term2
Grad.Term2[, k]
tempHessian.numer
k
k=2
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
excludeID
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
}
else {
tempGradient.numer
for (k in 2:ncol(riskset)) {
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
}
else {
tempGradient.numer = tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer = tempHessian.numer - Hess.FullNumer[, , excludeID]
}
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
}
Hess.Term2
apply(Grad.Term2, 1, sum)/n
Grad.Term2
n
is.nan(Grad.Term2)
Grad.Term2
k=43
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
Grad.Term1 = -t(G1) %*% status/n
Grad.Term2 = matrix(NA, ncol = ncol(riskset), nrow = p)
Grad.Term3 = lambda0 * t(G2) %*% initC
Grad.FullNumer = t(G1) %*% diag(as.numeric(exp(eta)))
Grad.FullDenom = Hess.FullDenom = exp(eta)
Hess.FullNumer = Hess.FullNumer.unScale * array(rep(exp(eta), each = p^2), dim = c(p, p, n))
Hess.Term1 = Hess.Term2 = array(NA, dim = c(p, p, ncol(riskset)))
k = 1
tempSum.exp.eta = sum(exp(eta[riskset[, k]]), na.rm = TRUE)
tempGradient.numer = apply(Grad.FullNumer[, riskset[, k]], 1, sum, na.rm = TRUE)
tempHessian.numer = apply(Hess.FullNumer[, , riskset[, k]], c(1, 2), sum, na.rm = TRUE)
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
for (k in 2:41) {
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
}
else {
tempGradient.numer = tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer = tempHessian.numer - Hess.FullNumer[, , excludeID]
}
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
}
k=43
riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta - sum(exp(eta[excludeID]))
tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer - Hess.FullNumer[, , excludeID]
tie.size[k] * tempGradient.numer/tempSum.exp.eta
Grad.Term2[, k]
Grad.Term2
tempHessian.numer/tempSum.exp.eta
k=43
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
}
length(excludeID) > 1
tempGradient.numer
tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
tie.size[k] * tempGradient.numer/tempSum.exp.eta
tie.size[k]
tempGradient.numer/tempSum.exp.eta
tempSum.exp.eta
cosso::gradient.Hessian.Theta
excludeID
k
sum(exp(eta[excludeID]))
tempSum.exp.eta
sum(exp(eta[excludeID]))
tempSum.exp.eta - sum(exp(eta[excludeID]))
k=41
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
Grad.Term1 = -t(G1) %*% status/n
Grad.Term2 = matrix(NA, ncol = ncol(riskset), nrow = p)
Grad.Term3 = lambda0 * t(G2) %*% initC
Grad.FullNumer = t(G1) %*% diag(as.numeric(exp(eta)))
Grad.FullDenom = Hess.FullDenom = exp(eta)
Hess.FullNumer = Hess.FullNumer.unScale * array(rep(exp(eta), each = p^2), dim = c(p, p, n))
Hess.Term1 = Hess.Term2 = array(NA, dim = c(p, p, ncol(riskset)))
k = 1
tempSum.exp.eta = sum(exp(eta[riskset[, k]]), na.rm = TRUE)
tempGradient.numer = apply(Grad.FullNumer[, riskset[, k]], 1, sum, na.rm = TRUE)
tempHessian.numer = apply(Hess.FullNumer[, , riskset[, k]], c(1, 2), sum, na.rm = TRUE)
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
k = 41
for (k in 2:41) {
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
} else {
tempGradient.numer = tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer = tempHessian.numer - Hess.FullNumer[, , excludeID]
}
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
}
k=42
riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta
tempSum.exp.eta - sum(exp(eta[excludeID]))
sum(exp(eta[excludeID]))
tempSum.exp.eta
tempGradient.numer
tempSum.exp.eta
tempGradient.numer/tempSum.exp.eta
initC
try(cosso(x, y, family = 'Cox'), silent = TRUE)
try(cosso(tr_x, tr_y, family = 'Cox'), silent = TRUE)
# pbc dataset (survival)
library(compound.Cox)
data(PBC)
str(PBC)
X = PBC[,3:19]
# X = cbind(X, matrix(pnorm(rnorm(276*31)), 276, 31))
y = cbind(PBC[,1:2])
names(y) = c("time", "status")
str(X)
aaa = cosso(tr_x, tr_y, family = 'Cox')
library(cosso)
aaa = cosso(tr_x, tr_y, family = 'Cox')
aaa = cosso(X, y, family = 'Cox')
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID,]
te_x = X[testID, ]
te_y = y[testID,]
aaa = cosso(tr_x, tr_y, family = 'Cox')
tr_x
X
y
tr_x
tr_y
cosso(tr_x, tr_y, family = 'Cox')
