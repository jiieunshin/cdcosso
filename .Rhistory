cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
# init.theta = rep(1, d)
# f.init = model$f.new
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RS
gettheta.cd = function(init.theta, f.init, G, time, status, bhat, chat, ACV_pen, const, lambda0, lambda_theta, gamma, Risk){
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
theta.old = init.theta
theta.new = rep(0, d)
for(i in 1:20){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
conv2 = sum(loss == 0) == d
conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2 | conv3){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2 | conv3)) theta.new = rep(0, d)
ACV = cosso::PartialLik(time, status, Risk, G %*% theta.new) + ACV_pen
return(list(theta.new = theta.new, ACV = ACV))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
# init.theta = rep(1, d)
# f.init = model$f.new
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RS
gettheta.cd = function(init.theta, f.init, G, time, status, bhat, chat, ACV_pen, const, lambda0, lambda_theta, gamma, Risk){
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
theta.old = init.theta
theta.new = rep(0, d)
for(i in 1:40){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
conv2 = sum(loss == 0) == d
conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2 | conv3){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2 | conv3)) theta.new = rep(0, d)
ACV = cosso::PartialLik(time, status, Risk, G %*% theta.new) + ACV_pen
return(list(theta.new = theta.new, ACV = ACV))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
# init.theta = rep(1, d)
# f.init = model$f.new
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RS
gettheta.cd = function(init.theta, f.init, G, time, status, bhat, chat, ACV_pen, const, lambda0, lambda_theta, gamma, Risk){
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
theta.old = init.theta
theta.new = rep(0, d)
for(i in 1:60){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
conv2 = sum(loss == 0) == d
conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2 | conv3){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2 | conv3)) theta.new = rep(0, d)
ACV = cosso::PartialLik(time, status, Risk, G %*% theta.new) + ACV_pen
return(list(theta.new = theta.new, ACV = ACV))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
# Risk = RS
# lambda0 = cand.lambda[14]
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
# wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
# w = wz$weight
# z = wz$z
# return(list(zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:10){ # outer iteration
if(err) break
Hess = GH$Hessian - 2 * lambda0 * Rtheta
Grad = GH$Gradient - 2 * lambda0 * Rtheta %*% c.old
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:n){
V1 = t(z - Rtheta[ ,-j] %*% c.old[-j]) %*% t(W) %*% Rtheta[, j]
V2 = (Rtheta[j, -j] %*% c.old[-j]) / lambda0
V3 = t(Rtheta[, j]) %*% (t(W) %*% Rtheta[, j])
V4 = Rtheta[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-12
conv2 = abs(c.old[j] - c.new[j]) > 5
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | err) break
}
if(i == 1 & (conv1 | conv2 | err)) c.new = c.init
print(i)
# zw = z * sqrt(w)
# Rw = Rtheta * w
# cw = c.init
# cw.new = temp = c.init / sqrt(w)
# sw = sqrt(w)
# fit = .Call("cox_c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
# b.new = fit$b.new
# c.new = fit$c.new
# cw.new = fit$cw.new
# z = (Hess %*% c.new - Grad) / lambda0
# loglik = t(z - Rtheta %*% c.new) %*% W %*% (z - Rtheta %*% c.new)
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + Hess/lambda0))) / n)^2
# GCV = as.numeric(loglik / den / n)
# print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
rm(getc_cvfit)
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
# init.theta = rep(1, d)
# f.init = model$f.new
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RS
gettheta.cd = function(init.theta, f.init, G, time, status, bhat, chat, ACV_pen, const, lambda0, lambda_theta, gamma, Risk){
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
theta.old = init.theta
theta.new = rep(0, d)
for(i in 1:15){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
conv2 = sum(loss == 0) == d
conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2 | conv3){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2 | conv3)) theta.new = rep(0, d)
ACV = cosso::PartialLik(time, status, Risk, G %*% theta.new) + ACV_pen
return(list(theta.new = theta.new, ACV = ACV))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
# Risk = RS
# lambda0 = cand.lambda[14]
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
# wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
# w = wz$weight
# z = wz$z
# return(list(zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:2){ # outer iteration
if(err) break
Hess = GH$Hessian - 2 * lambda0 * Rtheta
Grad = GH$Gradient - 2 * lambda0 * Rtheta %*% c.old
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:n){
V1 = t(z - Rtheta[ ,-j] %*% c.old[-j]) %*% t(W) %*% Rtheta[, j]
V2 = (Rtheta[j, -j] %*% c.old[-j]) / lambda0
V3 = t(Rtheta[, j]) %*% (t(W) %*% Rtheta[, j])
V4 = Rtheta[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-12
conv2 = abs(c.old[j] - c.new[j]) > 5
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | err) break
}
if(i == 1 & (conv1 | conv2 | err)) c.new = c.init
print(i)
# zw = z * sqrt(w)
# Rw = Rtheta * w
# cw = c.init
# cw.new = temp = c.init / sqrt(w)
# sw = sqrt(w)
# fit = .Call("cox_c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
# b.new = fit$b.new
# c.new = fit$c.new
# cw.new = fit$cw.new
# z = (Hess %*% c.new - Grad) / lambda0
# loglik = t(z - Rtheta %*% c.new) %*% W %*% (z - Rtheta %*% c.new)
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + Hess/lambda0))) / n)^2
# GCV = as.numeric(loglik / den / n)
# print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
rm(getc_cvfit)
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
# Risk = RS
# lambda0 = cand.lambda[14]
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
# wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
# w = wz$weight
# z = wz$z
# return(list(zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:60){ # outer iteration
if(err) break
Hess = GH$Hessian - 2 * lambda0 * Rtheta
Grad = GH$Gradient - 2 * lambda0 * Rtheta %*% c.old
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:n){
V1 = t(z - Rtheta[ ,-j] %*% c.old[-j]) %*% t(W) %*% Rtheta[, j]
V2 = (Rtheta[j, -j] %*% c.old[-j]) / lambda0
V3 = t(Rtheta[, j]) %*% (t(W) %*% Rtheta[, j])
V4 = Rtheta[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-12
conv2 = abs(c.old[j] - c.new[j]) > 5
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | err) break
}
if(i == 1 & (conv1 | conv2 | err)) c.new = c.init
print(i)
# zw = z * sqrt(w)
# Rw = Rtheta * w
# cw = c.init
# cw.new = temp = c.init / sqrt(w)
# sw = sqrt(w)
# fit = .Call("cox_c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
# b.new = fit$b.new
# c.new = fit$c.new
# cw.new = fit$cw.new
# z = (Hess %*% c.new - Grad) / lambda0
# loglik = t(z - Rtheta %*% c.new) %*% W %*% (z - Rtheta %*% c.new)
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + Hess/lambda0))) / n)^2
# GCV = as.numeric(loglik / den / n)
# print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
rm(getc_cvfit)
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
names(X)[15]
# Risk = RS
# lambda0 = cand.lambda[14]
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
# wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
# w = wz$weight
# z = wz$z
# return(list(zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:25){ # outer iteration
if(err) break
Hess = GH$Hessian - 2 * lambda0 * Rtheta
Grad = GH$Gradient - 2 * lambda0 * Rtheta %*% c.old
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:n){
V1 = t(z - Rtheta[ ,-j] %*% c.old[-j]) %*% t(W) %*% Rtheta[, j]
V2 = (Rtheta[j, -j] %*% c.old[-j]) / lambda0
V3 = t(Rtheta[, j]) %*% (t(W) %*% Rtheta[, j])
V4 = Rtheta[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-12
conv2 = abs(c.old[j] - c.new[j]) > 5
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | err) break
}
if(i == 1 & (conv1 | conv2 | err)) c.new = c.init
print(i)
# zw = z * sqrt(w)
# Rw = Rtheta * w
# cw = c.init
# cw.new = temp = c.init / sqrt(w)
# sw = sqrt(w)
# fit = .Call("cox_c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
# b.new = fit$b.new
# c.new = fit$c.new
# cw.new = fit$cw.new
# z = (Hess %*% c.new - Grad) / lambda0
# loglik = t(z - Rtheta %*% c.new) %*% W %*% (z - Rtheta %*% c.new)
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + Hess/lambda0))) / n)^2
# GCV = as.numeric(loglik / den / n)
# print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
lambda0 = exp(seq(log(2^{-12}), log(2^{12}), length.out = 20))
lambda_theta = exp(seq(log(2^{-12}), log(2^{12}), length.out = 20))
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
