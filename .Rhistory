en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
plot(en1_pred$mu.new)
cv.sspline.cd
fit10
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
i=1
data <- read.table("C:/Users/jieun/Dropbox/저장용/heart+disease/processed.cleveland.data", sep = ",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data[data == "?"] <- NA
data <- na.omit(data)
# 변수 정리
data$cp1 <- ifelse(data$cp == 1, 1, 0)
data$cp2 <- ifelse(data$cp == 2, 1, 0)
data$cp3 <- ifelse(data$cp == 3, 1, 0)
data$cp <- NULL
data$restecg1 <- ifelse(data$restecg == 1, 1, 0)
data$restecg2 <- ifelse(data$restecg == 2, 1, 0)
data$restecg <- NULL
data$slope1 <- ifelse(data$slope == 1, 1, 0)
data$slope2 <- ifelse(data$slope == 2, 1, 0)
data$thal3 <- ifelse(data$slope == 3, 1, 0)
data$thal7 <- ifelse(data$slope == 7, 1, 0)
data$thal <- NULL
data$ca <- as.numeric(data$ca)
yid = which(colnames(data) == "num")
X = data[,-yid]
y = ifelse(data[,yid] == 0, 0, 1)
dim(data)
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
fit10
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# heart disease 데이터 정리
data <- read.table("C:/Users/jieun/Dropbox/저장용/heart+disease/processed.cleveland.data", sep = ",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data[data == "?"] <- NA
data <- na.omit(data)
# 변수 정리
data$cp1 <- ifelse(data$cp == 1, 1, 0)
data$cp2 <- ifelse(data$cp == 2, 1, 0)
data$cp3 <- ifelse(data$cp == 3, 1, 0)
data$cp <- NULL
data$restecg1 <- ifelse(data$restecg == 1, 1, 0)
data$restecg2 <- ifelse(data$restecg == 2, 1, 0)
data$restecg <- NULL
data$slope1 <- ifelse(data$slope == 1, 1, 0)
data$slope2 <- ifelse(data$slope == 2, 1, 0)
data$thal3 <- ifelse(data$slope == 3, 1, 0)
data$thal7 <- ifelse(data$slope == 7, 1, 0)
data$thal <- NULL
data$ca <- as.numeric(data$ca)
yid = which(colnames(data) == "num")
X = data[,-yid]
y = ifelse(data[,yid] == 0, 0, 1)
dim(data)
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
fit10
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
plot(en1_pred$mu.new)
fit10
predict.cdcosso = function(object, testx)
{
testx = apply(testx, 2, rescale)
K = make_anovaKernel(testx, object$data$x, object$data$kernel, object$data$kparam)
tr_n = dim(object$data$x)[1]
te_n <- dim(testx)[1]
d = K$numK
R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
wt = rep(1, d)
if(sum(object$theta_step$theta.new == 0) == d){
t.new = rep(1e-10, d)
} else{
if(object$algorithm == "CD") t.new = object$theta_step$theta.new
if(object$algorithm == "QP") t.new = object$theta_step$theta.new
# t.new = object$theta_step$theta.new
}
Rtheta <- wsGram(R, t.new/wt^2)
sdx <- sqrt(drop(rep(1, te_n) %*% (Rtheta^2))/(tr_n - 1))
if(object$algorithm == "QP"){
c.new = object$c_step$c.new / sdx
} else if(object$algorithm == "CD"){
c.new = object$c_step$c.new
}
f.new = Rtheta %*% c.new + object$c_step$b.new
mu.new = object$object$linkinv(f.new)
return(list(f.new = f.new, mu.new = mu.new))
}
make_kernel = function (x, y, type)
{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear") {
K = tcrossprod(x, y)
}
if (type == "anova_gaussian") {
K = 0
for (d in 1:p) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = kernelMatrix(A, B, type = "gaussian", kparam = kparam)
K = K + K_temp
}
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam)
{
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for main effects
if (type == "spline") {
# assign the number of anova kernels
numK = 2 * dimx
# list of kernel matrices
anova_kernel = vector(mode = "list", numK)
# list of kernel coordinate indices
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = K_temp$K1
kernelCoord[[index]] = paste("x", d, " linear", sep="")
index = index + 1
anova_kernel[[index]] = K_temp$K2
kernelCoord[[index]] = paste("x", d, " smooth", sep="")
}
} else if (type == 'spline2') {
numK = (2 * dimx) + (2 * dimx * (2 * dimx - 1) / 2 - dimx)
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
# main effects
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = K_temp$K1
kernelCoord[[index]] = paste("x", d, " linear", sep = "")
index = index + 1
anova_kernel[[index]] = K_temp$K2
kernelCoord[[index]] = paste("x", d, " smooth", sep = "")
}
# two-way interactions
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A_linear = as.matrix(anova_kernel[[2 * i - 1]])
A_smooth = as.matrix(anova_kernel[[2 * i]])
B_linear = as.matrix(anova_kernel[[2 * j - 1]])
B_smooth = as.matrix(anova_kernel[[2 * j]])
anova_kernel[[index]] = A_linear * B_linear
kernelCoord[[index]] = paste("x", i, " linear,", " x", j, " linear", sep = "")
index = index + 1
anova_kernel[[index]] = A_linear * B_smooth
kernelCoord[[index]] = paste("x", i, " linear,", " x", j, " smooth", sep = "")
index = index + 1
anova_kernel[[index]] = A_smooth * B_linear
kernelCoord[[index]] = paste("x", i, " smooth,", " x", j, " linear", sep = "")
index = index + 1
anova_kernel[[index]] = A_smooth * B_smooth
kernelCoord[[index]] = paste("x", i, " smooth,", " x", j, " smooth", sep = "")
}
}
} else if (type == "spline-t") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline-t2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
# is used to combine anova kernel matrices with weights determined by theta values. The default theta vector is the vector of ones.
combine_kernel = function(anova_kernel, theta = rep(1, anova_kernel$numK))
{
K = 0
for (d in 1:anova_kernel$numK) {
K = (K + theta[d] * anova_kernel$K[[d]])
}
return(K)
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
wsGram = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
predict.cdcosso(fit10, te_x)
predict.cdcosso = function(object, testx)
{
testx = apply(testx, 2, rescale)
K = make_anovaKernel(testx, object$data$x, object$data$kernel, object$data$kparam)
tr_n = dim(object$data$x)[1]
te_n <- dim(testx)[1]
d = K$numK
R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
wt = rep(1, d)
if(sum(object$theta_step$theta.new == 0) == d){
t.new = rep(1e-10, d)
} else{
if(object$algorithm == "CD") t.new = scale(object$theta_step$theta.new)
if(object$algorithm == "QP") t.new = object$theta_step$theta.new
# t.new = object$theta_step$theta.new
}
Rtheta <- wsGram(R, t.new/wt^2)
sdx <- sqrt(drop(rep(1, te_n) %*% (Rtheta^2))/(tr_n - 1))
if(object$algorithm == "QP"){
c.new = object$c_step$c.new / sdx
} else if(object$algorithm == "CD"){
c.new = object$c_step$c.new
}
f.new = Rtheta %*% c.new + object$c_step$b.new
mu.new = object$object$linkinv(f.new)
return(list(f.new = f.new, mu.new = mu.new))
}
predict.cdcosso(fit10, te_x)
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
plot(en1_pred$mu.new)
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
i=1
data <- read.table("C:/Users/jieun/Dropbox/저장용/heart+disease/processed.cleveland.data", sep = ",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data[data == "?"] <- NA
data <- na.omit(data)
# 변수 정리
data$cp1 <- ifelse(data$cp == 1, 1, 0)
data$cp2 <- ifelse(data$cp == 2, 1, 0)
data$cp3 <- ifelse(data$cp == 3, 1, 0)
data$cp <- NULL
data$restecg1 <- ifelse(data$restecg == 1, 1, 0)
data$restecg2 <- ifelse(data$restecg == 2, 1, 0)
data$restecg <- NULL
data$slope1 <- ifelse(data$slope == 1, 1, 0)
data$slope2 <- ifelse(data$slope == 2, 1, 0)
data$thal3 <- ifelse(data$slope == 3, 1, 0)
data$thal7 <- ifelse(data$slope == 7, 1, 0)
data$thal <- NULL
data$ca <- as.numeric(data$ca)
yid = which(colnames(data) == "num")
X = data[,-yid]
y = ifelse(data[,yid] == 0, 0, 1)
dim(data)
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
en1_pred = predict.cdcosso(fit10, te_x)
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
en1_pred = predict.cdcosso(fit10, te_x)
fit10
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T, algo = "QP"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(class(fit3) == 'try-error' | class(fit10) == 'try-error'){
next
} else{
time3[i] = t1[3]
time10[i] = t2[3]
en3_varsel[i] = sum(ifelse(fit3$theta_step$theta.new > 0, 1, 0))
en1_varsel[i] = sum(ifelse(fit10$theta_step$theta.new > 0, 1, 0))
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new <= 0.5, 0, 1))
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
fit10
