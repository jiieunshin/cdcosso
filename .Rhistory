n <- length(time)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
f.init = rep(0.5, n)
RS = RiskSet(time, status)
measure <- rep(0, length(cand.lambda))
for (k in 1:length(cand.lambda)){
if(algo == "CD"){
EigRtheta = eigen(Rtheta)
if (min(EigRtheta$value) < 0) {
Rtheta = Rtheta + max(1e-07, 1.5 * abs(min(EigRtheta$value))) * diag(nrow(Rtheta))
EigRtheta = eigen(Rtheta)
}
pseudoX = Rtheta %*% EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values))
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = cand.lambda[k], alpha = 0,
standardize = FALSE)
init.C = as.numeric(EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values)) %*% ssCox.en$beta[, 1])
f.init = c(Rtheta %*% init.C)
# c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
#                           lambda = cand.lambda[k], alpha = 0)$beta)
fit = getc.cd(Rtheta, f.init, init.C, time, status, cand.lambda[k], RS)
Rw = Rtheta * fit$w.new
XX = fit$zw.new - Rw %*% fit$cw.new - fit$b.new * sqrt(fit$w.new)
num = t(XX) %*% XX + 1
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + diag(w)/cand.lambda[k]))) / n)^2
S = Rw %*% ginv(t(Rw) %*% Rw) %*% t(Rw)
den = (1 - sum(diag(S)) / n)^2 + 1
measure[k] <- as.vector( num / den / n)
# W = outer(fit$gradient, fit$gradient)
# UHU = Rtheta %*% W %*% t(Rtheta)
# measure[k] <- cosso::PartialLik(time, status, RS, Rtheta %*% fit$c.new)
# + sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
}
if(algo == "QP"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = cand.lambda[k], alpha = 0)$beta)
fit = getc.QP(R, Rtheta, c.init, time, status, mscale, cand.lambda[k], RS)
# measure[k] <- cosso::PartialLik(time, status, RS, Rtheta %*% fit$c.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
HH =  fit$H - 2 * cand.lambda[k] * Rtheta
HHH = ginv(HH/cand.lambda[k] + Rtheta)
GG = fit$G - 2 * cand.lambda[k] * Rtheta %*% fit$c.new
z = (HHH %*% fit$c.new - GG) / cand.lambda[k]
num = t(z - Rtheta %*% fit$c.new) %*% ginv(HH) %*% (z - Rtheta %*% fit$c.new)
S = Rtheta %*% ginv(Rtheta + HH/cand.lambda[k])
den = (1 - sum(diag(S)) / n)^2 + 1
measure[k] <- as.vector( num / den / n )
}
}
id = which.min(measure)[1]
optlambda = cand.lambda[id]
# optimal lambda1
if(show) plot(log(cand.lambda), measure, main = "Cox family", xlab = expression("Log(" * lambda[0] * ")"), ylab = "partial likelihood", ylim = range(measure), pch = 15, col = 'red')
if(algo == "CD"){
EigRtheta = eigen(Rtheta)
if (min(EigRtheta$value) < 0) {
Rtheta = Rtheta + max(1e-07, 1.5 * abs(min(EigRtheta$value))) * diag(nrow(Rtheta))
EigRtheta = eigen(Rtheta)
}
pseudoX = Rtheta %*% EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values))
ssCox.en = glmnet(pseudoX, cbind(time = time, status = status),
family = "cox", lambda = optlambda, alpha = 0,
standardize = FALSE)
init.C = as.numeric(EigRtheta$vectors %*% diag(sqrt(1/EigRtheta$values)) %*% ssCox.en$beta[, 1])
f.init = Rtheta %*% init.C
# c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
#                           lambda = optlambda, alpha = 0, standardize = FALSE)$beta)
fit = getc.cd(Rtheta, f.init, init.C, time, status, optlambda, RS)
out = list(measure = measure, R = R, f.new = c(Rtheta %*% fit$c.new), cw.new = fit$cw.new, z.new = fit$z.new, w.new = fit$w.new,
c.new = fit$c.new, b.new = fit$b.new, optlambda = optlambda, conv = TRUE)
}
if(algo == "QP"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = optlambda, alpha = 0, standardize = FALSE)$beta)
fit = getc.QP(R, Rtheta, c.init, time, status, mscale, optlambda, RS)
out = list(measure = measure, R = R, f.new = c(Rtheta %*% fit$c.new), c.new = fit$c.new, optlambda = optlambda, conv = TRUE)
}
rm(K)
rm(Rtheta)
return(out)
}
getc.cd = function(Rtheta, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
# wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
# w = wz$weight
# z = wz$z
y = cbind(time = time, status = status)
coxgrad_results = coxgrad(f, y, rep(1, length(f)), std.weights = FALSE, diag.hessian = TRUE)
w = - attributes(coxgrad_results)$diag_hessian * n
z = f - ifelse(w != 0, - coxgrad_results/w, 0) * n
zw = z * sqrt(w)
Rw = Rtheta * w
cw = c.init
cw.new = temp = c.init / sqrt(w)
sw = sqrt(w)
fit = .Call("c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
b.new = fit$b.new
c.new = fit$c.new
cw.new = fit$cw.new
return(list(zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
}
getc.QP = function (R, Rtheta, c.init, time, status, mscale, lambda0, RS)
{
n = length(time)
p = length(mscale)
GH = cosso::gradient.Hessian.C(c.init, R, R, time, status, mscale, lambda0, RS)
c.new = as.numeric(cosso::My_solve(GH$H, GH$H %*% c.init - GH$G))
UHU = Rtheta %*% cosso::My_solve(GH$H, t(Rtheta))
return(list(c.new = c.new, G = GH$G, H = GH$H, UHU = UHU))
}
calculate_wz_for_c = function(c.init, R, time, status, RS){
n = length(time)
Grad.Term = weight = z = rep(0, n)
for (k in 1:n) {
Sum.exp.eta.Grad = Sum.exp.eta.Hess = 0
id = which(RS[k,] > 0)
eta = as.numeric(R[k,] %*% c.init)
exp.eta = exp(eta)
for(r in id){
Sum.exp.eta = sum(exp(R[RS[,r],] %*% c.init))
Sum.exp.eta.Grad = Sum.exp.eta.Grad + exp.eta / Sum.exp.eta # {j in R_i} exp(R_j c)
Sum.exp.eta.Hess = Sum.exp.eta.Hess + ( exp.eta * Sum.exp.eta - exp.eta^2 ) / Sum.exp.eta^2
}
Grad.Term[k] = status[k] - Sum.exp.eta.Grad
weight[k] = Sum.exp.eta.Hess
z[k] = eta + (Grad.Term[k] + 0.1) / (weight[k] + 0.1)
}
return(list(z = z, gradient = Grad.Term, weight = weight))
}
n = length(time)
p = length(wt)
# cat("fit COSSO  with n = ", n, "p =", p, "\n")
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
# cat("kernel:", type, "and d =", d, "\n")
par(mfrow = c(1,3))
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
model = getc_cvfit
lambda0 = getc_cvfit$optlambda
mscale = wt
n = length(time)
d = length(mscale)
IDmat = model$IDmat
RS = RiskSet(time, status)
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
if(algo == "QP") lambda_theta = exp(seq(log(1e-4), log(40), length.out = length(lambda_theta)))
len = length(lambda_theta)
measure <- rep(0, len)
save_theta <- list()
k=1
fit = gettheta.cd(init.theta, model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
fit
measure <- rep(0, len)
save_theta <- list()
for (k in 1:len) {
if(algo == "CD"){
init.theta = rep(1, d)
# Gw = G * sqrt(model$w.new)
# uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
# theta.new = .Call("theta_step", Gw, uw, n, d, init.theta, lambda_theta[k], gamma)
# save_theta[[k]] <- theta.new
#
# XX = model$zw.new - Gw %*% theta.new
# num = t(XX) %*% XX + 1
# den = (1 - sum(diag( Gw %*% ginv( t(Gw) %*% Gw) %*% t(Gw) )) / n)^2 + 1
fit = gettheta.cd(init.theta, model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
save_theta[[k]] <- fit$theta.new
XX = fit$zw.new - fit$Gw %*% fit$theta.new
num = t(XX) %*% XX + 1
den = (1 - sum(diag( fit$Gw %*% ginv( t(fit$Gw) %*% fit$Gw) %*% t(fit$Gw) )) / n)^2 + 1
measure[k] <- as.vector(num / den / n)
# measure[k] <- cosso::PartialLik(time, status, RS, G %*% theta.adj) / (1 - sum(fit$theta.new != 0) / n)^2 / n
}
if(algo == "QP"){
init.theta = rep(1, d)
fit = gettheta.QP(init.theta, model$c.new, G, time, status, lambda0, lambda_theta[k], RS)
save_theta[[k]] <- fit$theta.new
measure[k] <- as.vector(cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) / (1 - sum(fit$theta.new != 0))^2 /n)
# measure[k] <- cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
}
}
len
save_theta
# print(save_theta)
# print(measure)
id = which.min(measure)[1]
optlambda = lambda_theta[id]
# plotting error bar
xrange = log(lambda_theta)
plot(xrange, measure, main = "Cox family", xlab = expression("Log(" * lambda[theta] * ")"), ylab = "partial likelihood", ylim = range(measure), pch = 15, col = 'red')
save_theta[[id]]
gettheta.cd(init.theta, model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
k=1
gettheta.cd(init.theta, model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
save_theta[[k]]
fit = gettheta.cd(init.theta, model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
save_theta[[k]] <- fit$theta.new
save_theta[[k]]
save_theta
k
measure <- rep(0, len)
save_theta <- list()
for (k in 1:len) {
if(algo == "CD"){
init.theta = rep(1, d)
# Gw = G * sqrt(model$w.new)
# uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
# theta.new = .Call("theta_step", Gw, uw, n, d, init.theta, lambda_theta[k], gamma)
# save_theta[[k]] <- theta.new
#
# XX = model$zw.new - Gw %*% theta.new
# num = t(XX) %*% XX + 1
# den = (1 - sum(diag( Gw %*% ginv( t(Gw) %*% Gw) %*% t(Gw) )) / n)^2 + 1
fit = gettheta.cd(init.theta, model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
save_theta[[k]] <- fit$theta.new
XX = fit$zw.new - fit$Gw %*% fit$theta.new
num = t(XX) %*% XX + 1
den = (1 - sum(diag( fit$Gw %*% ginv( t(fit$Gw) %*% fit$Gw) %*% t(fit$Gw) )) / n)^2 + 1
measure[k] <- as.vector(num / den / n)
# measure[k] <- cosso::PartialLik(time, status, RS, G %*% theta.adj) / (1 - sum(fit$theta.new != 0) / n)^2 / n
}
if(algo == "QP"){
init.theta = rep(1, d)
fit = gettheta.QP(init.theta, model$c.new, G, time, status, lambda0, lambda_theta[k], RS)
save_theta[[k]] <- fit$theta.new
measure[k] <- as.vector(cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) / (1 - sum(fit$theta.new != 0))^2 /n)
# measure[k] <- cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
}
}
algo
save_theta
gettheta.cd(init.theta, model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
init.theta
init.theta
measure <- rep(0, len)
save_theta <- list()
for (k in 1:len) {
if(algo == "CD"){
# init.theta = rep(1, d)
# Gw = G * sqrt(model$w.new)
# uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
# theta.new = .Call("theta_step", Gw, uw, n, d, init.theta, lambda_theta[k], gamma)
# save_theta[[k]] <- theta.new
#
# XX = model$zw.new - Gw %*% theta.new
# num = t(XX) %*% XX + 1
# den = (1 - sum(diag( Gw %*% ginv( t(Gw) %*% Gw) %*% t(Gw) )) / n)^2 + 1
fit = gettheta.cd(rep(1, d), model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
save_theta[[k]] <- fit$theta.new
XX = fit$zw.new - fit$Gw %*% fit$theta.new
num = t(XX) %*% XX + 1
den = (1 - sum(diag( fit$Gw %*% ginv( t(fit$Gw) %*% fit$Gw) %*% t(fit$Gw) )) / n)^2 + 1
measure[k] <- as.vector(num / den / n)
# measure[k] <- cosso::PartialLik(time, status, RS, G %*% theta.adj) / (1 - sum(fit$theta.new != 0) / n)^2 / n
}
if(algo == "QP"){
init.theta = rep(1, d)
fit = gettheta.QP(init.theta, model$c.new, G, time, status, lambda0, lambda_theta[k], RS)
save_theta[[k]] <- fit$theta.new
measure[k] <- as.vector(cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) / (1 - sum(fit$theta.new != 0))^2 /n)
# measure[k] <- cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
}
}
save_theta[[k]]
save_theta
# print(save_theta)
# print(measure)
id = which.min(measure)[1]
optlambda = lambda_theta[id]
# plotting error bar
xrange = log(lambda_theta)
plot(xrange, measure, main = "Cox family", xlab = expression("Log(" * lambda[theta] * ")"), ylab = "partial likelihood", ylim = range(measure), pch = 15, col = 'red')
save_theta[[id]]
model$f.new
G
model$b.new
(n/2) * lambda0 * model$cw.new
lambda_theta
k
gamma
RS
model$f.new
G
n
gettheta.cd(rep(1, d), model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
k=1
gettheta.cd(rep(1, d), model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
measure <- rep(0, len)
save_theta <- list()
for (k in 1:len) {
if(algo == "CD"){
# init.theta = rep(1, d)
# Gw = G * sqrt(model$w.new)
# uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
# theta.new = .Call("theta_step", Gw, uw, n, d, init.theta, lambda_theta[k], gamma)
# save_theta[[k]] <- theta.new
#
# XX = model$zw.new - Gw %*% theta.new
# num = t(XX) %*% XX + 1
# den = (1 - sum(diag( Gw %*% ginv( t(Gw) %*% Gw) %*% t(Gw) )) / n)^2 + 1
fit = gettheta.cd(rep(1, d), model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
save_theta[[k]] <- fit$theta.new
XX = fit$zw.new - fit$Gw %*% fit$theta.new
num = t(XX) %*% XX + 1
den = (1 - sum(diag( fit$Gw %*% ginv( t(fit$Gw) %*% fit$Gw) %*% t(fit$Gw) )) / n)^2 + 1
measure[k] <- as.vector(num / den / n)
# measure[k] <- cosso::PartialLik(time, status, RS, G %*% theta.adj) / (1 - sum(fit$theta.new != 0) / n)^2 / n
}
if(algo == "QP"){
init.theta = rep(1, d)
fit = gettheta.QP(init.theta, model$c.new, G, time, status, lambda0, lambda_theta[k], RS)
save_theta[[k]] <- fit$theta.new
measure[k] <- as.vector(cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) / (1 - sum(fit$theta.new != 0))^2 /n)
# measure[k] <- cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
}
}
save_theta
plot(xrange, measure, main = "Cox family", xlab = expression("Log(" * lambda[theta] * ")"), ylab = "partial likelihood", ylim = range(measure), pch = 15, col = 'red')
fit = gettheta.cd(rep(0, d), model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
fit
measure <- rep(0, len)
save_theta <- list()
for (k in 1:len) {
if(algo == "CD"){
# init.theta = rep(1, d)
# Gw = G * sqrt(model$w.new)
# uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
# theta.new = .Call("theta_step", Gw, uw, n, d, init.theta, lambda_theta[k], gamma)
# save_theta[[k]] <- theta.new
#
# XX = model$zw.new - Gw %*% theta.new
# num = t(XX) %*% XX + 1
# den = (1 - sum(diag( Gw %*% ginv( t(Gw) %*% Gw) %*% t(Gw) )) / n)^2 + 1
fit = gettheta.cd(rep(0, d), model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
save_theta[[k]] <- fit$theta.new
XX = fit$zw.new - fit$Gw %*% fit$theta.new
num = t(XX) %*% XX + 1
den = (1 - sum(diag( fit$Gw %*% ginv( t(fit$Gw) %*% fit$Gw) %*% t(fit$Gw) )) / n)^2 + 1
measure[k] <- as.vector(num / den / n)
# measure[k] <- cosso::PartialLik(time, status, RS, G %*% theta.adj) / (1 - sum(fit$theta.new != 0) / n)^2 / n
}
if(algo == "QP"){
init.theta = rep(1, d)
fit = gettheta.QP(init.theta, model$c.new, G, time, status, lambda0, lambda_theta[k], RS)
save_theta[[k]] <- fit$theta.new
measure[k] <- as.vector(cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) / (1 - sum(fit$theta.new != 0))^2 /n)
# measure[k] <- cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
}
}
# print(save_theta)
# print(measure)
id = which.min(measure)[1]
optlambda = lambda_theta[id]
# plotting error bar
xrange = log(lambda_theta)
plot(xrange, measure, main = "Cox family", xlab = expression("Log(" * lambda[theta] * ")"), ylab = "partial likelihood", ylim = range(measure), pch = 15, col = 'red')
save_theta
measure <- rep(0, len)
save_theta <- list()
for (k in 1:len) {
if(algo == "CD"){
# init.theta = rep(1, d)
# Gw = G * sqrt(model$w.new)
# uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
# theta.new = .Call("theta_step", Gw, uw, n, d, init.theta, lambda_theta[k], gamma)
# save_theta[[k]] <- theta.new
#
# XX = model$zw.new - Gw %*% theta.new
# num = t(XX) %*% XX + 1
# den = (1 - sum(diag( Gw %*% ginv( t(Gw) %*% Gw) %*% t(Gw) )) / n)^2 + 1
fit = gettheta.cd(rep(1, d), model$f.new, G, time, status, model$b.new, (n/2) * lambda0 * model$cw.new, lambda_theta[k], gamma, RS)
save_theta[[k]] <- fit$theta.new
XX = fit$zw.new - fit$Gw %*% fit$theta.new
num = t(XX) %*% XX + 1
den = (1 - sum(diag( fit$Gw %*% ginv( t(fit$Gw) %*% fit$Gw) %*% t(fit$Gw) )) / n)^2 + 1
measure[k] <- as.vector(num / den / n)
# measure[k] <- cosso::PartialLik(time, status, RS, G %*% theta.adj) / (1 - sum(fit$theta.new != 0) / n)^2 / n
}
if(algo == "QP"){
init.theta = rep(1, d)
fit = gettheta.QP(init.theta, model$c.new, G, time, status, lambda0, lambda_theta[k], RS)
save_theta[[k]] <- fit$theta.new
measure[k] <- as.vector(cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) / (1 - sum(fit$theta.new != 0))^2 /n)
# measure[k] <- cosso::PartialLik(time, status, RS,  G %*% fit$theta.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
}
}
save_theta
# mscale = wt
# cand.lambda = lambda0
cv.getc = function(K, time, status, mscale, cand.lambda, type, kparam, algo, show)
{
d = K$numK
n <- length(time)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
f.init = rep(0.5, n)
RS = RiskSet(time, status)
measure <- rep(0, length(cand.lambda))
for (k in 1:length(cand.lambda)){
if(algo == "CD"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = cand.lambda[k], alpha = 0)$beta)
fit = getc.cd(Rtheta, f.init, c.init, time, status, cand.lambda[k], RS)
Rw = Rtheta * fit$w.new
XX = fit$zw.new - Rw %*% fit$cw.new - fit$b.new * sqrt(fit$w.new)
num = t(XX) %*% XX + 1
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + diag(w)/cand.lambda[k]))) / n)^2
S = Rw %*% ginv(t(Rw) %*% Rw) %*% t(Rw)
den = (1 - sum(diag(S)) / n)^2 + 1
measure[k] <- as.vector( num / den / n)
# W = outer(fit$gradient, fit$gradient)
# UHU = Rtheta %*% W %*% t(Rtheta)
# measure[k] <- cosso::PartialLik(time, status, RS, Rtheta %*% fit$c.new)
# + sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
}
if(algo == "QP"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = cand.lambda[k], alpha = 0)$beta)
fit = getc.QP(R, Rtheta, c.init, time, status, mscale, cand.lambda[k], RS)
# measure[k] <- cosso::PartialLik(time, status, RS, Rtheta %*% fit$c.new) + sum(status == 1)/n^2 * (sum(diag(fit$UHU))/(n - 1) - sum(fit$UHU)/(n^2 - n))
HH =  fit$H - 2 * cand.lambda[k] * Rtheta
HHH = ginv(HH/cand.lambda[k] + Rtheta)
GG = fit$G - 2 * cand.lambda[k] * Rtheta %*% fit$c.new
z = (HHH %*% fit$c.new - GG) / cand.lambda[k]
num = t(z - Rtheta %*% fit$c.new) %*% ginv(HH) %*% (z - Rtheta %*% fit$c.new)
S = Rtheta %*% ginv(Rtheta + HH/cand.lambda[k])
den = (1 - sum(diag(S)) / n)^2 + 1
measure[k] <- as.vector( num / den / n )
}
}
id = which.min(measure)[1]
optlambda = cand.lambda[id]
# optimal lambda1
if(show) plot(log(cand.lambda), measure, main = "Cox family", xlab = expression("Log(" * lambda[0] * ")"), ylab = "partial likelihood", ylim = range(measure), pch = 15, col = 'red')
if(algo == "CD"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = optlambda, alpha = 0, standardize = FALSE)$beta)
fit = getc.cd(Rtheta, f.init, c.init, time, status, optlambda, RS)
out = list(measure = measure, R = R, f.new = c(Rtheta %*% fit$c.new), cw.new = fit$cw.new, z.new = fit$z.new, w.new = fit$w.new,
c.new = fit$c.new, b.new = fit$b.new, optlambda = optlambda, conv = TRUE)
}
if(algo == "QP"){
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = optlambda, alpha = 0, standardize = FALSE)$beta)
fit = getc.QP(R, Rtheta, c.init, time, status, mscale, optlambda, RS)
out = list(measure = measure, R = R, f.new = c(Rtheta %*% fit$c.new), c.new = fit$c.new, optlambda = optlambda, conv = TRUE)
}
rm(K)
rm(Rtheta)
return(out)
}
lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
# solve theta
getc_cvfit  = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo, show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
mscale = wt
cand.lambda = lambda0
d = K$numK
n <- length(time)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
f.init = rep(0.5, n)
RS = RiskSet(time, status)
measure <- rep(0, length(cand.lambda))
k=1
c.init = as.vector(glmnet(Rtheta, cbind(time = time, status = status), family = 'cox',
lambda = cand.lambda[k], alpha = 0)$beta)
fit = getc.cd(Rtheta, f.init, c.init, time, status, cand.lambda[k], RS)
Rw = Rtheta * fit$w.new
XX = fit$zw.new - Rw %*% fit$cw.new - fit$b.new * sqrt(fit$w.new)
num = t(XX) %*% XX + 1
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + diag(w)/cand.lambda[k]))) / n)^2
S = Rw %*% ginv(t(Rw) %*% Rw) %*% t(Rw)
den = (1 - sum(diag(S)) / n)^2 + 1
fit
n = ncol(Rtheta)
y = cbind(time = time, status = status)
coxgrad_results = coxgrad(f, y, rep(1, length(f)), std.weights = FALSE, diag.hessian = TRUE)
w = - attributes(coxgrad_results)$diag_hessian * n
z = f - ifelse(w != 0, - coxgrad_results/w, 0) * n
w
w = - attributes(coxgrad_results)$diag_hessian
z = f - ifelse(w != 0, - coxgrad_results/w, 0)
w
z
lambda0[1]
lambda0
attributes(coxgrad_results)
Rtheta %*% c.init
G = w + 2 * lambda0 * c(Rtheta %*% c.init)
G
