std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
std.id = ifelse(std.id > id, std.id, id)
optlambda = lambda_theta[std.id]
} else{
optlambda = lambda_theta[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
xrange = log(lambda_theta)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
if(algo == "CD"){
# theta.new = nng.cd(Gw, uw, theta = init.theta, optlambda, gamma)
theta.new = .Call("Cnng", Gw, uw, n, d, init.theta, optlambda, gamma)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
if(algo == "QP"){
theta.new = nng.QP(model$zw.new, model$b.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optlambda, gamma, obj)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
return(out)
}
# zw = model$zw.new[trainID]
# b = model$b.new
# sw = model$sw.new[trainID]
# cw = model$cw.new[trainID]
# w = model$w.new[trainID]
# G = tr_G
# y = y[trainID]
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
theta.new = rep(0, d)
for(i in 1:20){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / (sum(Gw[,j]^2) + n * lambda_theta * (1-gamma)) / 2
loss = abs(theta[j] - theta.new[j])
conv = max(loss) < 1e-6
if(i != 1 & conv) break
theta = theta.new
}
}
if(i == 1 & !conv){
theta = rep(0, d)
}
# else if(sum(theta.new = 0) == d){
#   theta = theta.new / sd(theta.new)
# }
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
return(theta)
}
nng.QP = function (zw, b, cw, w, G, theta, lambda0, lambda_theta, gamma, obj)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sqrt(w) - (n/2) * lambda0 * cw
# print(algo)
Amat = diag(1, d)
bvec = rep(0, d)
for(i in 1:20){
Dmat = 2 * (t(Gw) %*% Gw  + diag(lambda_theta * (1-gamma), d))
dvec = c(2 * t(uw) %*% Gw - gamma * lambda_theta)
# dvec = ifelse(dvec > 0 & abs(dvec) > lambda_theta * gamma, dvec, 0)
# theta.new = c(ginv(Dmat) %*% dvec)
theta.new <- solve.QP(Dmat, dvec, t(Amat), bvec)$solution
theta.new[theta.new < 1e-10] <- 0
if(sum(theta.new == 0) < d) theta.new = theta.new / sd(theta.new)
loss = abs(theta-theta.new)
conv = max(loss) < 1e-10
if(conv) break
theta = theta.new
}
return(theta.new)
}
######################
# object = fit3
# testx = te_x
KLD = function(f, y, family = "binomial"){
if(family == 'poisson') D = function(f, y) exp(f) - y*f
if(family == 'binomial') D = function(f, y) log(exp(1-f)+1) - y*f
if(family == 'Cox') D = function(f, y) log(exp(1-f)+1) - y*f
return(D(f, y))
}
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
# t1 = system.time({
#   fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = FALSE, scale = T, algo = "QP"), silent = TRUE)
# })  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
# if(!(class(fit3) == 'try-error')){
#   time3[i] = t1[3]
#   en3_varsel[i] = sum(ifelse(fit3$theta_step$theta.new > 0, 1, 0))
#   en3_pred = predict.cdcosso(fit3, te_x)
#   en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new <= 0.5, 0, 1))
# }
if(!(class(fit10) == 'try-error')){
time10[i] = t2[3]
en1_varsel[i] = sum(ifelse(fit10$theta_step$theta.new > 0, 1, 0))
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
cv.nng = function(model, x, y, mscale, init.theta, lambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
{
n = length(y)
d = length(mscale)
IDmat = model$IDmat
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
Gw = G * sqrt(model$w.new)
uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
len = length(lambda_theta)
measure <- matrix(0, ncol = len, nrow = nfolds)
l = 0
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
tr_G = G[trainID,]
te_G = G[testID,]
tr_n = length(trainID)
te_n = length(testID)
for (k in 1:len) {
l = l + 1
if(algo == "CD") {
# theta.new = nng.cd(Gw[trainID,], uw[trainID], theta = init.theta, lambda_theta[k], gamma)
theta.new = .Call("Cnng", Gw[trainID,], uw[trainID], tr_n, d, init.theta, lambda_theta[k], gamma)
# print(theta.new)
}
if(algo == "QP") {
theta.new = nng.QP(model$zw.new[trainID], model$b.new, model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, lambda_theta[k], gamma)
}
testfhat = c(te_G %*% theta.new)
testmu = obj$linkinv(testfhat)
testw = obj$variance(testmu)
testz = testfhat + (y[testID] - testmu) / testw
testzw = testz * sqrt(testw)
testGw = te_G * sqrt(testw)
testuw = testzw - model$b.new * sqrt(testw) - (te_n/2) * lambda0 * model$cw.new[testID]
rss <- t(testuw - testGw %*% theta.new) %*% (testuw - testGw %*% theta.new) + .1
S = ginv(t(testGw) %*% testGw)
df = sum(diag(S))
measure[f, k] <- rss / (1 - df/te_n + .1)^2 / te_n
l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
S = l1 + l2
measure[f, k] <- rss / (1 - d * S/te_n + .1)^2 / te_n
# if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
# if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
# if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
}
}
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
std.id = ifelse(std.id > id, std.id, id)
optlambda = lambda_theta[std.id]
} else{
optlambda = lambda_theta[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
xrange = log(lambda_theta)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
if(algo == "CD"){
# theta.new = nng.cd(Gw, uw, theta = init.theta, optlambda, gamma)
theta.new = .Call("Cnng", Gw, uw, n, d, init.theta, optlambda, gamma)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
if(algo == "QP"){
theta.new = nng.QP(model$zw.new, model$b.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optlambda, gamma, obj)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
return(out)
}
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
# t1 = system.time({
#   fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = FALSE, scale = T, algo = "QP"), silent = TRUE)
# })  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
# if(!(class(fit3) == 'try-error')){
#   time3[i] = t1[3]
#   en3_varsel[i] = sum(ifelse(fit3$theta_step$theta.new > 0, 1, 0))
#   en3_pred = predict.cdcosso(fit3, te_x)
#   en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new <= 0.5, 0, 1))
# }
if(!(class(fit10) == 'try-error')){
time10[i] = t2[3]
en1_varsel[i] = sum(ifelse(fit10$theta_step$theta.new > 0, 1, 0))
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
data = read.csv("C:/Users/jieun/Dropbox/저장용/ilpd+indian+liver+patient+dataset/Indian Liver Patient Dataset (ILPD).csv", header = F)
str(data)
data <- na.omit(data)
dim(data)
colnames(data) = c("Age", "Gender", "TB", "DB", "Alkphos", "Sgpt", "Sgot", "TP", "ALB", "A/Gratio", "Selector")
data$Gender = as.numeric(as.factor(data$Gender)) - 1
yid = which(colnames(data) == "Selector")
X = as.matrix(data[, -yid])
y = data[, yid] - 1
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
# t1 = system.time({
#   fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = FALSE, scale = T, algo = "QP"), silent = TRUE)
# })  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
# if(!(class(fit3) == 'try-error')){
#   time3[i] = t1[3]
#   en3_varsel[i] = sum(ifelse(fit3$theta_step$theta.new > 0, 1, 0))
#   en3_pred = predict.cdcosso(fit3, te_x)
#   en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new <= 0.5, 0, 1))
# }
if(!(class(fit10) == 'try-error')){
time10[i] = t2[3]
en1_varsel[i] = sum(ifelse(fit10$theta_step$theta.new > 0, 1, 0))
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
cv.nng = function(model, x, y, mscale, init.theta, lambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
{
n = length(y)
d = length(mscale)
IDmat = model$IDmat
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
Gw = G * sqrt(model$w.new)
uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
len = length(lambda_theta)
measure <- matrix(0, ncol = len, nrow = nfolds)
l = 0
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
tr_G = G[trainID,]
te_G = G[testID,]
tr_n = length(trainID)
te_n = length(testID)
for (k in 1:len) {
l = l + 1
if(algo == "CD") {
# theta.new = nng.cd(Gw[trainID,], uw[trainID], theta = init.theta, lambda_theta[k], gamma)
theta.new = .Call("Cnng", Gw[trainID,], uw[trainID], tr_n, d, init.theta, lambda_theta[k], gamma)
print(theta.new)
}
if(algo == "QP") {
theta.new = nng.QP(model$zw.new[trainID], model$b.new, model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, lambda_theta[k], gamma)
}
testfhat = c(te_G %*% theta.new)
testmu = obj$linkinv(testfhat)
testw = obj$variance(testmu)
testz = testfhat + (y[testID] - testmu) / testw
testzw = testz * sqrt(testw)
testGw = te_G * sqrt(testw)
testuw = testzw - model$b.new * sqrt(testw) - (te_n/2) * lambda0 * model$cw.new[testID]
rss <- t(testuw - testGw %*% theta.new) %*% (testuw - testGw %*% theta.new) + .1
S = ginv(t(testGw) %*% testGw)
df = sum(diag(S))
measure[f, k] <- rss / (1 - df/te_n + .1)^2 / te_n
l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
S = l1 + l2
measure[f, k] <- rss / (1 - d * S/te_n + .1)^2 / te_n
# if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
# if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
# if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
}
}
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
std.id = ifelse(std.id > id, std.id, id)
optlambda = lambda_theta[std.id]
} else{
optlambda = lambda_theta[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
xrange = log(lambda_theta)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
if(algo == "CD"){
# theta.new = nng.cd(Gw, uw, theta = init.theta, optlambda, gamma)
theta.new = .Call("Cnng", Gw, uw, n, d, init.theta, optlambda, gamma)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
if(algo == "QP"){
theta.new = nng.QP(model$zw.new, model$b.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optlambda, gamma, obj)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
return(out)
}
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
# t1 = system.time({
#   fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = FALSE, scale = T, algo = "QP"), silent = TRUE)
# })  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
# if(!(class(fit3) == 'try-error')){
#   time3[i] = t1[3]
#   en3_varsel[i] = sum(ifelse(fit3$theta_step$theta.new > 0, 1, 0))
#   en3_pred = predict.cdcosso(fit3, te_x)
#   en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new <= 0.5, 0, 1))
# }
if(!(class(fit10) == 'try-error')){
time10[i] = t2[3]
en1_varsel[i] = sum(ifelse(fit10$theta_step$theta.new > 0, 1, 0))
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
