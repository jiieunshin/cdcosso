{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
pow = (diag(t(Gw) %*% Gw) + n * lambda_theta * (1-gamma)) / 2
theta.new = rep(0, d)
for(i in 1:80){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j])
theta.new[j] = theta.new[j] / sum(Gw[,j]^2)
loss = abs(theta - theta.new)
conv = max(loss) < 1e-6
if(conv) break
}
}
if(i == 1) theta = rep(0, d)
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
# print(i)
# print(conv)
print(i)
print(theta)
return(theta)
}
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
pow = (diag(t(Gw) %*% Gw) + n * lambda_theta * (1-gamma)) / 2
theta.new = rep(0, d)
for(i in 1:80){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / sum(Gw[,j]^2)
loss = abs(theta - theta.new)
conv = max(loss) < 1e-6
if(conv) break
}
}
if(i == 1) theta = rep(0, d)
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
# print(i)
# print(conv)
print(i)
print(theta)
return(theta)
}
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
pow = (diag(t(Gw) %*% Gw) + n * lambda_theta * (1-gamma)) / 2
theta.new = rep(0, d)
for(i in 1:80){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / sum(Gw[,j]^2)
loss = abs(theta - theta.new)
conv = max(loss) < 1e-6
if(conv) break
theta = theta.new
}
}
if(i == 1) theta = rep(0, d)
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
# print(i)
# print(conv)
print(i)
print(theta)
return(theta)
}
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
pow = (diag(t(Gw) %*% Gw) + n * lambda_theta * (1-gamma)) / 2
theta.new = rep(0, d)
for(i in 1:80){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / sum(Gw[,j]^2)
loss = abs(theta - theta.new)
conv = max(loss) < 1e-6
if(conv) break
}
theta = theta.new
}
if(i == 1) theta = rep(0, d)
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
# print(i)
# print(conv)
print(i)
print(theta)
return(theta)
}
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
nng_fit
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
pow = (diag(t(Gw) %*% Gw) + n * lambda_theta * (1-gamma)) / 2
theta.new = rep(0, d)
for(i in 1:80){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / sum(Gw[,j]^2)
loss = abs(theta - theta.new)
conv = max(loss) < 1e-6
if(i != 1 & conv) break
theta = theta.new
}
}
if(i == 1) theta = rep(0, d)
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
# print(i)
# print(conv)
print(i)
print(theta)
return(theta)
}
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
pow = (diag(t(Gw) %*% Gw) + n * lambda_theta * (1-gamma)) / 2
theta.new = rep(0, d)
for(i in 1:80){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / sum(Gw[,j]^2)
loss = abs(theta - theta.new)
conv = max(loss) < 1e-6
if(i != 1 & conv) break
theta = theta.new
}
}
if(i == 1 & !conv) theta = rep(0, d)
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
# print(i)
# print(conv)
print(i)
print(theta)
return(theta)
}
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
nng_fit
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
pow = (diag(t(Gw) %*% Gw) + n * lambda_theta * (1-gamma)) / 2
theta.new = rep(0, d)
for(i in 1:80){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / sum(Gw[,j]^2)
loss = abs(theta - theta.new)
conv = max(loss) < 1e-6
if(i != 1 & conv) break
theta = theta.new
}
}
if(i == 1 & !conv) theta = rep(0, d)
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
print(i)
print(conv)
print(i)
print(theta)
return(theta)
}
nng_fit
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
cv.nng = function(model, x, y, mscale, init.theta, lambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
{
n = length(y)
d = length(mscale)
IDmat = model$IDmat
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
Gw = G * sqrt(model$w.new)
uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
sdx <- sqrt(drop(rep(1, n) %*% (Gw^2))/(n - 1))
len = length(lambda_theta)
measure <- matrix(0, ncol = len, nrow = nfolds)
l = 0
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
tr_G = G[trainID,]
te_G = G[testID,]
tr_n = length(trainID)
te_n = length(testID)
for (k in 1:len) {
if(algo == "CD") {
theta.new = nng.cd(Gw[trainID,], uw[trainID], theta = init.theta, lambda_theta[k], gamma)
# print(theta.new)
# Gw = tr_G * sqrt(model$w.new[trainID])
# uw = model$zw.new[trainID] - model$b.new * sqrt(odel$w.new[trainID]) - (tr_n/2) * lambda0 * model$cw.new[trainID]
#
# theta.new = .Call("Cnng", Gw, uw, init.theta, lambda_theta[k], gamma)
}
if(algo == "QP") {
theta.new = nng.QP(model$zw.new[trainID], model$b.new, model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, lambda_theta[k], gamma)
}
testfhat = c(te_G %*% theta.new)
# plot(testfhat)
testmu = obj$linkinv(testfhat)
# testw = obj$variance(testmu)
# testz = testfhat + (y[testID] - testmu) / testw
# testzw = model$zw.new[testID]
# testGw = te_G * sqrt(model$w.new[testID])
# testuw = model$zw.new[testID] - model$b.new * sqrt(model$w.new[testID]) - (te_n/2) * lambda0 * model$cw.new[testID]
# rss <- t(testuw - testGw %*% theta.new) %*% (testuw - testGw %*% theta.new) + .1
# S = ginv(t(testGw) %*% testGw)
# df = sum(diag(S))
# measure[f, k] <- rss / (1 - df/te_n + .1)^2 / te_n
# l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
# l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
# S = l1 + l2
# measure[f, k] <- rss / (1 - d * S/te_n + .1)^2 / te_n
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
}
}
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
std.id = ifelse(std.id > id, std.id, id)
optlambda = lambda_theta[std.id]
} else{
optlambda = lambda_theta[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
xrange = log(lambda_theta)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
if(algo == "CD"){
theta.new = nng.cd(Gw, uw, theta = init.theta, optlambda, gamma)
# theta.new = .Call("Cnng", Gw, uw, init.theta, optlambda, gamma)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
if(algo == "QP"){
theta.new = nng.QP(model$zw.new, model$b.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optlambda, gamma, obj)
f.new = c(G %*% as.matrix(theta.new))
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new, f.new = f.new)
}
return(out)
}
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
pow = (diag(t(Gw) %*% Gw) + n * lambda_theta * (1-gamma)) / 2
theta.new = rep(0, d)
for(i in 1:80){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / sum(Gw[,j]^2)
loss = abs(theta - theta.new)
conv = max(loss) < 1e-6
if(i != 1 & conv) break
theta = theta.new
}
}
if(i == 1 & !conv) theta = rep(0, d)
# print(theta)
# if(sum(theta == 0) != d) theta = theta / sd(theta)
return(theta)
}
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
nng_fit
# solve (theta) - 2nd
Rtheta <- wsGram(sspline_cvfit$R, theta.new/wt^2)
sdx <- sqrt(drop(rep(1, n) %*% (Rtheta^2))/(n - 1))
c.upt = sspline_cvfit$c.new
f.init <- c(sspline_cvfit$b.new + Rtheta %*% sspline_cvfit$c.new)
#
sspline_cvfit = cv.sspline(x, y, theta.new/wt^2, rep(mean(y), n), nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
cdcosso.glm = function (x, y, wt, lambda0, lambda_theta, gamma, obj, nfolds, one.std, type, kparam, algo)
{
n = length(y)
d = length(wt)
par(mfrow = c(1,2))
# initiation
# init.theta = as.vector(glmnet(x, y, family = "binomial", lambda = lambda_theta[2], gamma = 0)$beta)
init.theta = rep(1, d)
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, init.theta/wt^2, rep(mean(y), n), nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
optlambda0 = sspline_cvfit$optlambda
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
# solve (theta) - 2nd
Rtheta <- wsGram(sspline_cvfit$R, theta.new/wt^2)
c.upt = sspline_cvfit$c.new
f.init <- c(sspline_cvfit$b.new + Rtheta %*% sspline_cvfit$c.new)
sspline_cvfit = cv.sspline(x, y, theta.new/wt^2, rep(mean(y), n), nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
par(mfrow = c(1,1))
if(algo == "CD")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
if(algo == "QP")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
class(out) = "cosso"
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
en1_pred = predict.cdcosso(fit10, te_x)
predict.cdcosso = function(object, testx)
{
testx = apply(testx, 2, rescale)
K = make_anovaKernel(testx, object$data$x, object$data$kernel, object$data$kparam)
tr_n = dim(object$data$x)[1]
te_n <- dim(testx)[1]
d = K$numK
R = array(NA, c(te_n, tr_n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
wt = rep(1, d)
Rtheta <- wsGram(R, object$theta_step$theta.new/wt^2)
# if(object$algorithm == "QP"){
#   sdx <- sqrt(drop(rep(1, te_n) %*% (Rtheta^2))/(tr_n - 1))
#   c.new = object$c_step$c.new / sdx
# } else if(object$algorithm == "CD"){
# }
c.new = object$c_step$c.new
f.new = Rtheta %*% c.new + object$c_step$b.new
mu.new = object$object$linkinv(f.new)
return(list(f.new = f.new, mu.new = mu.new))
}
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
plot(en1_pred$mu.new )
fit10
cdcosso.glm = function (x, y, wt, lambda0, lambda_theta, gamma, obj, nfolds, one.std, type, kparam, algo)
{
n = length(y)
d = length(wt)
par(mfrow = c(1,2))
# initiation
# init.theta = as.vector(glmnet(x, y, family = "binomial", lambda = lambda_theta[2], gamma = 0)$beta)
init.theta = rep(1, d)
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, init.theta/wt^2, rep(mean(y), n), nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
optlambda0 = sspline_cvfit$optlambda
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
# solve (theta) - 2nd
Rtheta <- wsGram(sspline_cvfit$R, nng_fit$theta.new/wt^2)
c.upt = sspline_cvfit$c.new
f.init <- c(sspline_cvfit$b.new + Rtheta %*% sspline_cvfit$c.new)
sspline_cvfit = cv.sspline(x, y, nng_fit$theta.new/wt^2, rep(mean(y), n), nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
par(mfrow = c(1,1))
if(algo == "CD")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
if(algo == "QP")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
class(out) = "cosso"
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", scale = T, one.std = FALSE, algo = "CD"), silent = TRUE)
fit10
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
en1_pred$mu.new
plot(fit10 )
plot(en1_pred$mu.new)
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# for(nb in c(12, 25, 50, 100)){
iter = 20
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
te_y = te$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = FALSE, scale = T, algo = "CD"), silent = TRUE)
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
cdcosso.glm = function (x, y, wt, lambda0, lambda_theta, gamma, obj, nfolds, one.std, type, kparam, algo)
{
n = length(y)
d = length(wt)
par(mfrow = c(1,2))
# initiation
# init.theta = as.vector(glmnet(x, y, family = "binomial", lambda = lambda_theta[2], gamma = 0)$beta)
init.theta = rep(1, d)
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, init.theta/wt^2, rep(mean(y), n), nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
optlambda0 = sspline_cvfit$optlambda
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, gamma, nfolds, obj, one.std, algo)
# solve (theta) - 2nd
Rtheta <- wsGram(sspline_cvfit$R, nng_fit$theta.new/wt^2)
c.upt = sspline_cvfit$c.new
f.init <- c(sspline_cvfit$b.new + Rtheta %*% sspline_cvfit$c.new)
sspline_cvfit = cv.sspline(x, y, nng_fit$theta.new/wt^2, rep(mean(y), n), nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
nng_fit = cv.nng(sspline_cvfit, x, y, wt, nng_fit$theta.new, sspline_cvfit$optlambda, lambda_theta, gamma, nfolds, obj, one.std, algo)
par(mfrow = c(1,1))
if(algo == "CD")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
if(algo == "QP")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
class(out) = "cosso"
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = FALSE, scale = T, algo = "CD"), silent = TRUE)
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
