cosso_fit
cosso_fit = cosso(tr_x, tr_y, "Gaussian")
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20))
), silent = TRUE)
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, iter, ncol(X))
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID]
te_x = X[testID, ]
te_y = y[testID]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', cv = "mse", gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{5}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{5}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
time3[i] = t1
en3_varsel[i,] = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RiskSet, fit3$c_step$f.new)
# en3_miss[i] = mean((te_y - en3_pred$mu.new)^2)
en3_miss[i] = mean((te_y - ifelse(en3_pred$mu.new < 0.5, 0, 1))^2)
}
if(!(class(fit10) == 'try-error')){
time10[i] = t2
en1_varsel[i,] = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RiskSet, fit10$c_step$f.new)
# en1_miss[i] = mean((te_y - en1_pred$mu.new)^2)
en1_miss[i] = mean((te_y - ifelse(en1_pred$mu.new < 0.5, 0, 1))^2)
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
fit10
en1_varsel
colMeans(en1_varsel)
K = make_anovaKernel(tr_x, fit10$data$x[fit10$data$basis.id,], fit10$data$kernel, fit10$data$kparam)
d = K$numK
R = array(NA, c(nrow(tr_x), length(fit10$data$basis.id), d))
for (j in 1:d) {
R[, , j] = K$K[[j]]
}
p = ncol(X)
par(mfrow=c(2,p))
for(j in 1:p){
ff = c(R[, , j] %*% fit10$c_step$c.new)
plot(ff)
}
for(j in 1:p){
plot(X[,j], y)
}
K = make_anovaKernel(X, fit10$data$x[fit10$data$basis.id,], fit10$data$kernel, fit10$data$kparam)
d = K$numK
R = array(NA, c(nrow(X), length(fit10$data$basis.id), d))
for (j in 1:d) {
R[, , j] = K$K[[j]]
}
p = ncol(X)
par(mfrow=c(2,p))
for(j in 1:p){
ff = c(R[, , j] %*% fit10$c_step$c.new)
plot(ff)
}
for(j in 1:p){
plot(X[,j], y)
}
plot(X[,j], ff)
K = make_anovaKernel(X, fit10$data$x[fit10$data$basis.id,], fit10$data$kernel, fit10$data$kparam)
d = K$numK
R = array(NA, c(nrow(X), length(fit10$data$basis.id), d))
for (j in 1:d) {
R[, , j] = K$K[[j]]
}
p = ncol(X)
par(mfrow=c(2,p))
for(j in 1:p){
ff = c(R[, , j] %*% fit10$c_step$c.new)
plot(X[,j], ff)
}
for(j in 1:p){
plot(X[,j], y)
}
cor(X)
fit10
fit10 = try(cdcosso(X, y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
fit10 = cdcosso(X, y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
fit10 = cdcosso(X, y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{5}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20)))
fit10
K = make_anovaKernel(X, fit10$data$x[fit10$data$basis.id,], fit10$data$kernel, fit10$data$kparam)
d = K$numK
R = array(NA, c(nrow(X), length(fit10$data$basis.id), d))
for (j in 1:d) {
R[, , j] = K$K[[j]]
}
p = ncol(X)
par(mfrow=c(2,p))
for(j in 1:p){
ff = c(R[, , j] %*% fit10$c_step$c.new)
plot(X[,j], ff)
}
for(j in 1:p){
plot(X[,j], y)
}
fit10 = cdcosso(X, y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{1}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20)))
it10
fit10 = cdcosso(X, y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{1}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20)))
fit10
K = make_anovaKernel(X, fit10$data$x[fit10$data$basis.id,], fit10$data$kernel, fit10$data$kparam)
d = K$numK
R = array(NA, c(nrow(X), length(fit10$data$basis.id), d))
for (j in 1:d) {
R[, , j] = K$K[[j]]
}
p = ncol(X)
par(mfrow=c(2,p))
for(j in 1:p){
ff = c(R[, , j] %*% fit10$c_step$c.new)
plot(X[,j], ff)
}
for(j in 1:p){
plot(X[,j], y)
}
fit10 = cdcosso(X, y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{1}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-2}), length.out = 20)))
fit10 = cdcosso(X, y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{1}), log(2^{6}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-2}), length.out = 20)))
fit10
K = make_anovaKernel(X, fit10$data$x[fit10$data$basis.id,], fit10$data$kernel, fit10$data$kparam)
d = K$numK
R = array(NA, c(nrow(X), length(fit10$data$basis.id), d))
for (j in 1:d) {
R[, , j] = K$K[[j]]
}
p = ncol(X)
par(mfrow=c(2,p))
for(j in 1:p){
ff = c(R[, , j] %*% fit10$c_step$c.new)
plot(X[,j], ff)
}
for(j in 1:p){
plot(X[,j], y)
}
p = ncol(X)
par(mfrow=c(2,p))
for(j in 1:p){
ff = c(R[, , j] %*% fit10$c_step$c.new) + fit10$c_step$b.new
plot(X[,j], ff)
}
for(j in 1:p){
plot(X[,j], y)
}
fit10 = cdcosso(X, y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{1}), log(2^{5}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{-1}), length.out = 20)))
K = make_anovaKernel(X, fit10$data$x[fit10$data$basis.id,], fit10$data$kernel, fit10$data$kparam)
d = K$numK
R = array(NA, c(nrow(X), length(fit10$data$basis.id), d))
for (j in 1:d) {
R[, , j] = K$K[[j]]
}
p = ncol(X)
par(mfrow=c(2,p))
for(j in 1:p){
ff = c(R[, , j] %*% fit10$c_step$c.new) + fit10$c_step$b.new
plot(X[,j], ff)
}
for(j in 1:p){
plot(X[,j], y)
}
fit10
en1_miss
i=1
iter = 100
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, iter, ncol(X))
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID]
te_x = X[testID, ]
te_y = y[testID]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', cv = "mse", gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{5}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{5}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
time3[i] = t1
en3_varsel[i,] = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RiskSet, fit3$c_step$f.new)
# en3_miss[i] = mean((te_y - en3_pred$mu.new)^2)
en3_miss[i] = mean((te_y - ifelse(en3_pred$mu.new < 0.5, 0, 1))^2)
}
if(!(class(fit10) == 'try-error')){
time10[i] = t2
en1_varsel[i,] = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RiskSet, fit10$c_step$f.new)
# en1_miss[i] = mean((te_y - en1_pred$mu.new)^2)
en1_miss[i] = mean((te_y - ifelse(en1_pred$mu.new < 0.5, 0, 1))^2)
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
colMeans(en1_varsel)
fit10
colMeans(en1_varsel)
mean(en1_miss)
dim( X)
trainID
dim(tr_x)
dim(t3_x)
dim(te_x)
library(camerondata)
data(randhealth)
df = na.omit(randhealth)
X = df[1:1000,-1]
y = df[1:1000,1]
str(X)
dim(X)
nrow(df)
seln = sample(1:nrow(df), size = 400)
seln
seln = sample(1:nrow(df), size = 400)
X = df[seln,-1]
y = df[seln,1]
str(X)
dim(X)
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, iter, ncol(X))
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
cat("\n iteration :", i, "\n")
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID]
te_x = X[testID, ]
te_y = y[testID]
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{5}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20))
), silent = TRUE)
fit10
tr_y
tr_x
tr_y
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{15}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-20}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{30}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-20}), log(2^{0}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{30}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{0}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{-30}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{0}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{25}), log(2^{30}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{0}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{0}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{22}), log(2^{25}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-22}), log(2^{0}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{22}), log(2^{25}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-22}), log(2^{0}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{25}), log(2^{30}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-30}), log(2^{-20}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{25}), log(2^{30}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-30}), log(2^{-20}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{10}), log(2^{30}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-30}), log(2^{-20}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{10}), log(2^{40}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{-20}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{10}), log(2^{15}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{-20}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{15}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-15}), log(2^{15}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-8}), log(2^{15}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', cv = "mse", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{5}), log(2^{40}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10
library(compound.Cox)
data(PBC)
X = PBC[,3:19]
y = PBC[,1:2]
names(y) = c("time", "status")
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID, ]
te_x = X[testID, ]
te_y = y[testID, ]
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10
tr_y
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-10}), log(2^{20}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-20}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{40}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{-40}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{0}), log(2^{-40}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{40}), log(2^{40}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-60}), log(2^{40}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-60}), log(2^{0}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10
dim(X)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-20}), log(2^{20}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T, nbasis = 100,
lambda0 = exp(seq(log(2^{-20}), log(2^{20}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T, nbasis = 200,
lambda0 = exp(seq(log(2^{-20}), log(2^{20}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
dim(X)
dim(tr_x)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T, nbasis = nrow(tr_x),
lambda0 = exp(seq(log(2^{-20}), log(2^{20}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{20}), log(2^{80}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-20}), log(2^{-80}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
fit10
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "acv", gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-20}), log(2^{-80}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-40}), log(2^{20}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
tr_x
PBC
