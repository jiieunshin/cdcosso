optlambda0 = sspline_cvfit$optlambda
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo)
# solve (theta) - 2nd
if(sum(nng_fit$theta.new == 0) == d){
theta.new = rep(1e-10, d)
} else{
theta.new = nng_fit$theta.new
}
Rtheta <- wsGram(sspline_cvfit$R, theta.new/wt^2)
f.init <- sspline_cvfit$b.new + Rtheta %*% sspline_cvfit$c.new
f.init <- f.init / sd(f.init)
sspline_cvfit = cv.sspline(x, y, theta.new/wt^2, f.init, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
par(mfrow = c(1,1))
if(algo == "CD")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
if(algo == "QP")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, M = M, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
class(out) = "cosso"
return(out)
}
make_kernel = function (x, y, type)
{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear") {
K = tcrossprod(x, y)
}
if (type == "anova_gaussian") {
K = 0
for (d in 1:p) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = kernelMatrix(A, B, type = "gaussian", kparam = kparam)
K = K + K_temp
}
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam)
{
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for main effects
if (type == "spline") {
# assign the number of anova kernels
numK = 2 * dimx
# list of kernel matrices
anova_kernel = vector(mode = "list", numK)
# list of kernel coordinate indices
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = K_temp$K1
kernelCoord[[index]] = paste("x", d, " linear", sep="")
index = index + 1
anova_kernel[[index]] = K_temp$K2
kernelCoord[[index]] = paste("x", d, " smooth", sep="")
}
} else if (type == 'spline2') {
numK = (2 * dimx) + (2 * dimx * (2 * dimx - 1) / 2 - dimx)
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
# main effects
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = K_temp$K1
kernelCoord[[index]] = paste("x", d, " linear", sep = "")
index = index + 1
anova_kernel[[index]] = K_temp$K2
kernelCoord[[index]] = paste("x", d, " smooth", sep = "")
}
# two-way interactions
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A_linear = as.matrix(anova_kernel[[2 * i - 1]])
A_smooth = as.matrix(anova_kernel[[2 * i]])
B_linear = as.matrix(anova_kernel[[2 * j - 1]])
B_smooth = as.matrix(anova_kernel[[2 * j]])
anova_kernel[[index]] = A_linear * B_linear
kernelCoord[[index]] = paste("x", i, " linear,", " x", j, " linear", sep = "")
index = index + 1
anova_kernel[[index]] = A_linear * B_smooth
kernelCoord[[index]] = paste("x", i, " linear,", " x", j, " smooth", sep = "")
index = index + 1
anova_kernel[[index]] = A_smooth * B_linear
kernelCoord[[index]] = paste("x", i, " smooth,", " x", j, " linear", sep = "")
index = index + 1
anova_kernel[[index]] = A_smooth * B_smooth
kernelCoord[[index]] = paste("x", i, " smooth,", " x", j, " smooth", sep = "")
}
}
} else if (type == "spline-t") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline-t2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
# is used to combine anova kernel matrices with weights determined by theta values. The default theta vector is the vector of ones.
combine_kernel = function(anova_kernel, theta = rep(1, anova_kernel$numK))
{
K = 0
for (d in 1:anova_kernel$numK) {
K = (K + theta[d] * anova_kernel$K[[d]])
}
return(K)
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
wsGram = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
x = tr_x
y = tr_y
family = 'binomial'
gamma = 0.8
kernel = "gaussian"
one.std = TRUE
scale = T
wt = rep(1, ncol(x))
kparam = 1
nfolds =5
# x = tr_x
# y = tr_y
# family = 'binomial'
# gamma = 0.8
# kernel = "gaussian"
# one.std = TRUE
# scale = T
# wt = rep(1, ncol(x))
# kparam = 1
# nfolds =5
cdcosso = function (x, y, family = c("gaussian", "binomial", "poisson", "negbin", "svm", "Cox"),
kernel = c("linear", "gaussian", "poly", "spline", "anova_gaussian", "gaussian2"),
algo = c("CD", "QP"), wt = rep(1, ncol(x)),
kparam = 1, lambda0, lambda_theta, M, gamma = 0.3, nfolds = 5, one.std = TRUE, scale = TRUE, cpus)
{
n = nrow(x)
colnames(x) = NULL
rownames(x) = NULL
if(class(x)[1] == "data.frame")
x = as.matrix(x)
# family
family = match.arg(family)
if(family == "gaussian")
obj = gaussian()
if(family == "binomial")
obj =  binomial()
if(family == "poisson")
obj = poisson()
if(family == "negbin"){
link = poisson()$linkfun
# if(missing(init.disp)){
#   init.distp = NA
# }
obj = list(disp = NA, link = link)
}
if(missing(kernel))
type = 'gaussian'
else
type = match.arg(kernel)
if(missing(algo))
algo = "CD"
if(missing(lambda0)){
lambda0 = exp(seq(log(2^{-20}), log(2^{20}), length.out = 40))
}
if(missing(lambda_theta))
lambda_theta = exp(seq(log(2^{-20}), log(2^{20}), length.out = 40))
if(missing(M)){
M = exp(seq(log(2^{-4}), log(2^{8}), length.out = 40))
}
if (scale){   # min-max scale
x = apply(x, 2, rescale)
}
if (family == "Cox" & !all(match(c("time", "status"), dimnames(y)[[2]], 0))) {
stop("Cox model requires a matrix with columns 'time' and 'status' as a response")
}
objnm = ifelse(family == 'gaussian' | family == 'binomial' | family == 'poisson', 'glm', family)
# fitting
out = switch(objnm,
glm = cdcosso.glm(x, y, wt, lambda0, lambda_theta, M, gamma, obj, nfolds, one.std, type, kparam, algo)
# Cox = cdcosso.cox(x, y[, "time"], y[, "status"], lambda0, lambda_theta, gamma)
# Negbin, svm 추가
)
return(out)
}
n = nrow(x)
colnames(x) = NULL
rownames(x) = NULL
obj =  binomial()
type = 'gaussian'
algo = "CD"
lambda0 = exp(seq(log(2^{-20}), log(2^{20}), length.out = 40))
lambda_theta = exp(seq(log(2^{-20}), log(2^{20}), length.out = 40))
M = exp(seq(log(2^{-4}), log(2^{8}), length.out = 40))
x = apply(x, 2, rescale)
n = length(y)
d = length(wt)
par(mfrow = c(1,2))
# initiation
sdx <- sqrt(drop(rep(1, n) %*% (x^2))/(n - 1))
# init.theta = (as.vector(glmnet(x, y, family = "binomial", lambda = lambda_theta[10], gamma = 0)$beta) + .1) / (sdx + .1)
init.theta = as.vector(glmnet(x, y, family = "binomial", lambda = lambda_theta[2], gamma = 0)$beta)
if(sum(init.theta == 0) == d){
init.theta = rep(1e-10, d)
} else{
init.theta = c(scale(init.theta))
}
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, init.theta/wt^2, rep(mean(y), n), nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
optlambda0 = sspline_cvfit$optlambda
optlambda0
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo)
cv.nng = function(model, x, y, mscale, init.theta, lambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo)
{
n = length(y)
d = length(mscale)
IDmat = model$IDmat
sdx <- sqrt(drop(rep(1, n) %*% (x^2))/(n - 1))
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
if(algo == "CD") len = length(lambda_theta)
if(algo == "QP") len = length(M)
measure <- matrix(0, ncol = len, nrow = nfolds)
l = 0
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
tr_G = G[trainID,]
te_G = G[testID,]
tr_n = length(trainID)
te_n = length(testID)
for (k in 1:len) {
# init.theta = as.vector(scale(glmnet(x[trainID,], y[trainID], family = "binomial", lambda = lambda_theta[k], gamma = gamma)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD") {
# nng.fit = nng.cd(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
#                  theta = init.theta, lambda0, lambda_theta[k], gamma)
Gw = apply(tr_G * sqrt(model$w.new[trainID]), 2, rescale)
uw = c(scale(model$zw.new[trainID] - model$b.new * model$sw.new[trainID] - (tr_n/2) * lambda0 * model$cw.new[trainID]))
theta.new = .Call("Cnng", Gw, uw, init.theta, lambda_theta[k], gamma)
print(theta.new)
if(sum(theta.new == 0) == d){
theta.new = rep(1e-10, d)
} else{
theta.new = theta.new
}
}
if(algo == "QP") {
nng.fit = nng.QP(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, M[k], gamma)
# print(nng.fit)
if(sum(nng.fit$theta.new == 0) == d){
theta.new = rep(1e-10, d)
} else{
theta.new = nng.fit$theta.new
}
}
# sel[f, k] = sum(theta.new > 0)
# print(nng.fit$theta.new)
testfhat = c(te_G %*% theta.new)
testmu = obj$linkinv(testfhat)
testw = obj$variance(testmu)
testz = testfhat + (y[testID] - testmu) / testw
testzw = testz * sqrt(testw)
testGw = te_G * sqrt(testw)
# rss <- t(testzw - testGw %*% theta.new) %*% (testzw - testGw %*% theta.new) + .1
# l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
# l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
# S = l1 + l2
# measure[f, k] <- rss / (1 - d*S/length(testID) + .1)^2 / length(testID)
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
if(obj$family == "poisson") measure[f, k] <- mean(KLD(testfhat, y[testID]))
}
}
# measure[is.nan(measure)] = 1e-30
# mid = colSums(measure) != 0
# measure = measure[,mid]
# if(algo == "CD") lambda_theta = lambda_theta[mid]
# if(algo == "QP") M = M[mid]
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:len] <= st1_err & cvm[id] <= cvm[id:len]))
std.id = ifelse(std.id > id, std.id, id)
if(algo == "CD") optlambda = lambda_theta[std.id]
if(algo == "QP") optM = M[std.id]
} else{
if(algo == "CD") optlambda = lambda_theta[id]
if(algo == "QP") optM = M[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
if(algo == "CD") xrange = log(lambda_theta)
if(algo == "QP") xrange = log(M)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
# init.theta = as.vector(scale(glmnet(x, y, family = "binomial", lambda = optlambda, gamma = 0)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD"){
Gw = G * sqrt(model$w.new)
uw = model$zw.new - model$b.new * model$sw.new - (n/2) * lambda0 * model$cw.new
# theta.new = nng_cpp(Gw, uw, init.theta, optlambda, gamma)
# nng.fit = nng.cd(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
#                  theta = init.theta, lambda0, optlambda, gamma)
theta.new = .Call("Cnng", Gw, uw, init.theta, optlambda, gamma)
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new)
}
if(algo == "QP"){
nng.fit = nng.QP(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
init.theta, lambda0, optM, gamma, obj)
out = list(cv_error = measure, optlambda_theta = optM, gamma = gamma, theta.new = nng.fit$theta.new)
}
return(out)
}
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, init.theta, optlambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo)
