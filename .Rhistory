excludeID = riskset[, k - 1][!riskset[, k - 1] %in% riskset[, k]]
tempSum.exp.eta = tempSum.exp.eta - sum(exp(eta[excludeID]))
if (length(excludeID) > 1) {
tempGradient.numer = tempGradient.numer - apply(Grad.FullNumer[, excludeID], 1, sum)
tempHessian.numer = tempHessian.numer - apply(Hess.FullNumer[, , excludeID], c(1, 2), sum)
} else {
tempGradient.numer = tempGradient.numer - Grad.FullNumer[, excludeID]
tempHessian.numer = tempHessian.numer - Hess.FullNumer[, , excludeID]
}
Grad.Term2[, k] = tie.size[k] * tempGradient.numer/tempSum.exp.eta
Hess.Term1[, , k] = tempHessian.numer/tempSum.exp.eta
Hess.Term2[, , k] = 1/tie.size[k] * Grad.Term2[, k] %*% t(Grad.Term2[, k])
}
Grad.Term2 = apply(Grad.Term2, 1, sum)/n
Gradient = Grad.Term1 + Grad.Term2 + Grad.Term3
Hessian = apply(Hess.Term1, c(1, 2), sum)/n - apply(Hess.Term2, c(1, 2), sum)/n
return(list(Gradient = Gradient, Hessian = Hessian))
}
calculate_wz_for_theta = function(init.theta, G, time, status, RS){
n = length(time)
Grad.Term = weight = z = rep(0, n)
for (k in 1:n) {
Sum.exp.eta.Grad = Sum.exp.eta.Hess = 0
id = which(RS[k,] > 0)
eta = as.numeric(G[k,] %*% init.theta)
exp.eta = exp(eta)
for(r in id){
Sum.exp.eta = sum(exp(G[RS[,r],] %*% init.theta))
Sum.exp.eta.Grad = Sum.exp.eta.Grad + exp.eta / Sum.exp.eta # {j in R_i} exp(R_j c)
Sum.exp.eta.Hess = Sum.exp.eta.Hess + ( exp.eta * Sum.exp.eta - exp.eta^2 ) / Sum.exp.eta^2
}
Grad.Term[k] = status[k] - Sum.exp.eta.Grad
weight[k] = Sum.exp.eta.Hess
z[k] = eta - ifelse(weight[k] != 0, - Grad.Term[k]/weight[k], 0)
}
return(list(z = z, gradient = Grad.Term, weight = weight))
}
gettheta.QP = function(init.theta, c.hat, G, time, status, lambda0, lambda_theta, Risk, ACV_pen){
n = nrow(G)
p = ncol(G)
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta),
length(init.theta),
n)
)
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
loop = 0
iter.diff = Inf
old.Theta = init.theta
while (loop < 15 & iter.diff > 1e-04) {
loop = loop + 1
GH = cosso::gradient.Hessian.Theta(old.Theta, c.hat, G, G,
lambda0, lambda_theta, time, status, Risk, Hess.FullNumer.unScale)
if(min(eigen(GH$H)$value) < 0)
GH$H = GH$H + max(1e-07, 1.5 * abs(min(eigen(GH$H)$value))) * diag(length(old.Theta))
dvec = -(GH$G - GH$H %*% old.Theta)
Amat = t(rbind(diag(p), rep(-1, p)))
bvec = c(rep(0, p), -lambda_theta)
new.Theta = cosso::My_solve.QP(GH$H, dvec, Amat, bvec)
new.Theta[new.Theta < 1e-8] = 0
iter.diff = mean(abs(new.Theta - old.Theta))
old.Theta = new.Theta
}
UHU = G %*% My_solve(GH$H, t(G))
ACV = cosso::PartialLik(time, status, Risk, G %*% new.Theta) + ACV_pen
return(list(theta.new = new.Theta, G = GH$G, H = GH$H, ACV = ACV))
}
cv.gettheta(getc_cvfit, K, time, status, nbasis, basis.id, wt, getc_cvfit$optlambda, lambda_theta, gamma)
model = getc_cvfit
lambda0 = getc_cvfit$optlambda
mscale = wt
n = length(time)
d = length(mscale)
# solve theta
G <- matrix(0, n, d)
for (j in 1:d) {
G[, j] = (model$R[, , j] %*% model$c.new) * (mscale[j]^(-2))
}
init.theta = rep(1, d)
len = length(lambda_theta)
measure = matrix(NA, 5, len)
fold = cvsplitID(n, 5, y, family = "gaussian")
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
f=k=1
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], time[tr_id], status[tr_id], 0, model$c.new, model$ACV_pen,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
model$ACV_pen
lambda_theta[k]
RiskSet(time[tr_id], status[tr_id])
model$f.new
model$c.new
init.theta = rep(1, d)
f.init = model$f.new[tr_id]
chat = model$c.new
n = nrow(G)
d = ncol(G)
n
G = G[tr_id, ]
n = nrow(G)
d = ncol(G)
r = lambda_theta * gamma
r
lambda_theta
r = lambda_theta[k] * gamma
lambda_theta[k] * gamma
n = nrow(G)
d = ncol(G)
r = lambda_theta[k] * gamma
n
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G[i, ] %*% t(G[i, ])
Hess.FullNumer.unScale
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
GH
theta.old
G
GH.theta
GH.theta(theta.old, chat, G, G, lambda0, time, status, Risk, Hess.FullNumer.unScale)
# solve theta
G <- matrix(0, n, d)
for (j in 1:d) {
G[, j] = (model$R[, , j] %*% model$c.new) * (mscale[j]^(-2))
}
G2 = G
G1 = G[tr_id, ]
n = nrow(G1)
d = ncol(G1)
r = lambda_theta[k] * gamma
G1 = G[tr_id, ]
G
n
# RS = RiskSet(time, status)
n=200
# solve theta
G <- matrix(0, n, d)
for (j in 1:d) {
G[, j] = (model$R[, , j] %*% model$c.new) * (mscale[j]^(-2))
}
G1 = G[tr_id, ]
G2 = G
n = nrow(G1)
d = ncol(G1)
r = lambda_theta[k] * gamma
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
Hess.FullNumer.unScale
Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
G1
G2
G2 = G[basis_id,]
G2 = G[basis.id,]
n = nrow(G1)
d = ncol(G1)
r = lambda_theta * gamma
r
r = lambda_theta[k] * gamma
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
G1
dim(G1)
status
length(time)
# G1 = G[tr_id, ]
# G2 = G[basis.id,]
time = time[tr_id]
status = status[tr_id]
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
Risk
Risk = RiskSet(time[tr_id], status[tr_id])
Risk = RiskSet(time, status)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
GH
err = sum(is.nan(GH$Gradient)) > 0
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
dvec
Dmat
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
# print(theta.new)
conv2 = sum(loss == 0) == d | is.infinite(theta.new[j]) | is.na(theta.new[j])
# conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
loss
theta.new
j
theta.new
# G1 = G[tr_id, ]
# G2 = G[basis.id,]
# time = time[tr_id]
# status = status[tr_id]
# init.theta = rep(1, d)
# f.init = model$f.new[tr_id]
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RiskSet(time, status)
gettheta.cd = function(init.theta, f.init, G1, G2, time, status, chat, lambda0, lambda_theta, gamma, Risk){
n = nrow(G1)
d = ncol(G1)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
for(i in 1:20){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
# print(theta.new)
conv2 = sum(loss == 0) == d | is.infinite(theta.new[j]) | is.na(theta.new[j])
# conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2)) theta.old = rep(0, d)
return(list(theta.new = theta.old))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
type = "spline"
algo = "CD"
family = 'Cox'
gamma = 0.95
kparam=1
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
wt = rep(1, ncol(x))
n = length(time)
p = length(wt)
nbasis = max(40, ceiling(12 * n^(2/9)))
basis.id = sort(sample(1:n, nbasis))
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
model = getc_cvfit
lambda0 = getc_cvfit$optlambda
mscale = wt
n = length(time)
d = length(mscale)
# solve theta
G <- matrix(0, n, d)
for (j in 1:d) {
G[, j] = (model$R[, , j] %*% model$c.new) * (mscale[j]^(-2))
}
init.theta = rep(1, d)
len = length(lambda_theta)
measure = matrix(NA, 5, len)
fold = cvsplitID(n, 5, y, family = "gaussian")
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], time[tr_id], status[tr_id], 0, model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
# G1 = G[tr_id, ]
# G2 = G[basis.id,]
# time = time[tr_id]
# status = status[tr_id]
# init.theta = rep(1, d)
# f.init = model$f.new[tr_id]
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RiskSet(time, status)
gettheta.cd = function(init.theta, f.init, G1, G2, time, status, chat, lambda0, lambda_theta, gamma, Risk){
n = nrow(G1)
d = ncol(G1)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
for(i in 1:20){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
# print(theta.new)
conv2 = sum(loss == 0) == d | is.infinite(theta.new[j]) | is.na(theta.new[j])
# conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2)) theta.old = rep(0, d)
return(list(theta.new = theta.old))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
# G1 = G[tr_id, ]
# G2 = G[basis.id,]
# time = time[tr_id]
# status = status[tr_id]
# init.theta = rep(1, d)
# f.init = model$f.new[tr_id]
# chat = model$c.new
# ACV_pen = model$ACV_pen
# lambda_theta = lambda_theta[k]
# Risk = RiskSet(time, status)
gettheta.cd = function(init.theta, f.init, G1, G2, time, status, chat, lambda0, lambda_theta, gamma, Risk){
n = nrow(G1)
d = ncol(G1)
r = lambda_theta * gamma
# wz = calculate_wz_for_theta(theta.old, G, time, status, Risk)
# w = wz$weight
# z = wz$z
Hess.FullNumer.unScale = array(NA, dim = c(length(init.theta), length(init.theta), n))
for (i in 1:n) Hess.FullNumer.unScale[, , i] = G1[i, ] %*% t(G1[i, ])
theta.old = init.theta
theta.new = rep(0, d)
conv2 = conv3 = TRUE
for(i in 1:20){
loss = rep(1, d)
GH = GH.theta(theta.old, chat, G1, G2, lambda0, time, status, Risk, Hess.FullNumer.unScale)
err = sum(is.nan(GH$Gradient)) > 0
if (err) break
Dmat = GH$H / 2
dvec = - (GH$H %*% theta.old - GH$Gradient)
for(j in 1:d){
if(j == 1){
L = 0
U = Dmat[1, 2:d] %*% theta.old[2:d]
} else if(j == d){
L = Dmat[d, 1:(d-1)] %*% theta.old[1:(d-1)]
U = 0
} else{
L = Dmat[j, 1:(j-1)] %*% theta.old[1:(j-1)]
U = Dmat[j, (j+1):d] %*% theta.old[(j+1):d]
}
theta.new[j] = soft_threshold(-dvec[j] - L + U, r)
# L + U
# Dmat[j, -j] %*% theta.old[-j]
D_diag = ifelse(Dmat[j, j] <= 0, 0, Dmat[j, j])
theta.new[j] = theta.new[j] / (D_diag + lambda_theta * (1-gamma))
# loss = abs(theta.old - theta.new)
# conv = max(loss) < 1e-12
loss[j] = abs(theta.old[j] - theta.new[j])
# print(theta.new)
conv2 = sum(loss == 0) == d | is.infinite(theta.new[j]) | is.na(theta.new[j])
# conv3 = max(loss) > 5
# cat("i = ", i, "j =", j, "theta.new[j] =", theta.new[j], "loss =", max(loss), "\n")
if(conv2){
conv = TRUE
} else{
conv = max(loss[loss > 0]) < 1e-18
}
if(conv) break
theta.old[j] = theta.new[j]
}
if(conv) break
}
print(i)
# print(theta.new)
if(i == 1 & (conv2)) theta.old = rep(0, d)
return(list(theta.new = theta.old))
# return(list(Gw = Gw, zw.new = z * sqrt(w), uw.new = uw, w.new = w, theta.new = theta.new))
}
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
model$c.new
G[basis.id, ]
t(G[tr_id,])
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
dim(G[basis.id,])
chat
lambda0
dim(t(G[basis.id, ]))
initTheta = init.theta
initC = chat
G1 = G[tr_id,]
G2 = G[basis.id,]
n = length(time)
p = length(initTheta)
tie.size = as.numeric(table(time[status == 1]))
eta = G1 %*% initTheta
eta
-t(G1) %*% status/n
G1
status/n
status
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
t(G[basis.id, ]) %*% chat
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
0, lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
gettheta.cd
fit = gettheta.cd(rep(1, d), model$f.new[tr_id], G[tr_id, ], G[basis.id, ], time[tr_id], status[tr_id], model$c.new,
lambda0, lambda_theta[k], gamma, RiskSet(time[tr_id], status[tr_id]))
fit
