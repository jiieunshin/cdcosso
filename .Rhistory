f.init = rep(0.5, length(fold[, f]))
f.ini
f.init
k=1
# initialize
ff = f.init
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
obj="gaussian"
# initialize
ff = f.init
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
f.init
obj=gaussian()
# initialize
ff = f.init
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
z
f.init
# initialize
ff = f.init
mu = obj$linkinv(ff)
obj$linkinv(ff)
obj$variance(mu)
ff + (y - mu) / w
y
z = ff + (y[fold,] - mu) / w
z = ff + (y[fold[, f], ] - mu) / w
z = ff + (y[fold[, f]] - mu) / w
z
c.init = as.vector(glmnet(Rtheta[fold[, f], ], y, family = 'gaussian', lambda = cand.lambda[k])$beta)
c.init = as.vector(glmnet(Rtheta[fold[, f], ], y[fold[, f]], family = 'gaussian', lambda = cand.lambda[k])$beta)
c.init
zw = z * sqrt(w)
Rw = Rtheta * w
cw = c.init / sqrt(w)
sw = sqrt(w)
sw
Rw
Rw = Rtheta[fold[, f], ] * w
Rw
fit = .Call("glm_c_step", zw, Rw, cw, sw, n, cand.lambda[k], PACKAGE = "cdcosso")
fit
Rtheta <- combine_kernel(R[fold[, f]], mscale)
Rtheta <- combine_kernel(R[fold[, f], ], mscale)
combine_kernel
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
n1 <- dim(R)[1]
n2 <- dim(R)[2]
d <- dim(R)[3]
dim(R)
K$K[[j]]
m=20
R = array(NA, c(m, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]][fold[, f], ]
}
Rtheta <- combine_kernel(R, mscale)
Rtheta
R
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
#
measure <- matrix(NA, 5, len)
if(family != "binomial"){
fold = cvsplitID(n, 5)
} else{
}
f.init = rep(0.5, length(fold[, f]))
Rm = array(NA, c(m, n, d))
fold = cvsplitID(n, 5)
fid = fold[, f]
f.init = rep(0.5, length(fid)
Rm = array(NA, c(length(), n, d))
f.init = rep(0.5, length(fid))
m = length(fid)
f.init = rep(0.5, m)
Rm = array(NA, c(m, n, d))
for(j in 1:d){
Rm[, , j] = K$K[[j]][fold[, f], ]
}
Rm[, , j] = K$K[[j]][fid, ]
f.init = rep(0.5, m)
Rm = array(NA, c(m, n, d))
for(j in 1:d){
Rm[, , j] = K$K[[j]][fid, ]
}
mscale
Rthetam <- combine_kernel(Rm, mscale[fid])
Rthetam
Rthetam <- combine_kernel(Rm, mscale)
Rthetam
# initialize
ff = f.init
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y[fold[, f]] - mu) / w
z
z = ff + (y[fid] - mu) / w
c.init = as.vector(glmnet(Rtheta[fid, ], y[fid], family = 'gaussian', lambda = cand.lambda[k])$beta)
c.init
zw = z * sqrt(w)
Rw = Rthetam * w
Rw
c.init = as.vector(glmnet(Rthetam, y[fid], family = 'gaussian', lambda = cand.lambda[k])$beta)
c.init
zw = z * sqrt(w)
Rw = Rthetam * w
cw = c.init / sqrt(w)
sw = sqrt(w)
sw
# initialize
f.init = rep(0.5, n)
ff = f.init
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
c.init = as.vector(glmnet(Rthetam, y, family = 'gaussian', lambda = cand.lambda[k])$beta)
zw = z * sqrt(w)
Rw = Rtheta * w
Rm = array(NA, c(m, n, d))
for(j in 1:d){
Rm[, , j] = K$K[[j]][fid, ]
}
Rm
combine_kernel(Rm, mscale)
Rthetam <- combine_kernel(Rm, mscale)
c.init = as.vector(glmnet(Rthetam, y[fid], family = 'gaussian', lambda = cand.lambda[k])$beta)
c.init
z * sqrt(w)
zw = z[fid] * sqrt(w[fid])
zw
Rw = Rthetam * w[fid]
Rw
c.init
c.init
Rthetam * w[fid]
Rw = Rthetam * w[fid]
cw = c.init / sqrt(w)
sw = sqrt(w)
sw
c.init / sqrt(w)
a <- 1:10
a <- 1:100
a[fid]
a[!fid]
a[-fid]
ff = f.init[te_id]
mu = obj$linkinv(ff)
te_id = as.vector(fold[, -f])
ff = f.init[te_id]
ff
mu = obj$linkinv(ff)
w = obj$variance(mu)
w
te_R = array(NA, c(n-m, n, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, ]
}
te_Rtheta <- combine_kernel(te_R, mscale)
te_Rtheta
ff = f.init[te_id]
mu = obj$linkinv(ff)
w = obj$variance(mu)
w
Rw = te_Rtheta * w[te_id]
mu = obj$linkinv(ff)
w = obj$variance(mu)
Rw = te_Rtheta * w[te_id]
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
n = 100
te_n = 1000
p_sig = 5
p = 200
out = matrix(0, 16, 14)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "test", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
tr = data_generation(n, p, SNR = 2, response = "regression")
tr_x = tr$x
tr_y = tr$y
x = tr_x
y = tr_y
family = 'Cox'
gamma = 0.8
type = "spline"
one.std = TRUE
scale = T
wt = rep(1, ncol(x))
kparam = 1
nfolds =5
algo = "CD"
lambda0 = exp(seq(log(2^{-6}), log(2^{6}), length.out = 20))
lambda_theta = exp(seq(log(2^{-6}), log(2^{6}), length.out = 20))
make_kernel = function (x, y, type)
{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
cat_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
n1 <- length(x)
n2 <- length(y)
x <- rep(x, times = n2)
y <- rep(y, each = n1)
L <- length(unique(c(x, y)))
K <- matrix(L * (x == y) - 1, n1, n2)
return(K)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly" | type == "poly2") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline" | type == "spline2") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear" | type == "linear2") {
K = tcrossprod(x, y)
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam, scale)
{
# if (length(unique(c(A, B))) <= 6)
#   K_temp <- cat_kernel(A, B)
# else K_temp <- spline_kernel(A, B)
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for two-way interactions
if (type == "spline") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[d]] = K_temp
} else{
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
n = length(y)
p = length(wt)
cat("fit COSSO  with n = ", n, "p =", ncol(x), "\n")
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
cat("kernel:", type, "and d =", d, "\n")
cat("-- c-step -- \n")
cat("proceeding... \n")
d = K$numK
n <- length(y)
cand.lambda=lambda0
obj=gaussian()
mscale=wt
n <- length(y)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
# initialize
f.init = rep(0.5, n)
ff = f.init
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
#
measure <- matrix(NA, 5, len)
f=k=1
if(obj$family != "binomial"){
fold = cvsplitID(n, 5)
tr_id = fold[, f]
te_id = as.vector(fold[, -f])
m = length(tr_id)
} else{
}
tr_R = array(NA, c(m, n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, ]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(n-m, n, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, ]
}
te_Rtheta <- combine_kernel(te_R, mscale)
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = 'gaussian', lambda = cand.lambda[k])$beta)
c.init
zw = z[tr_id] * sqrt(w[tr_id])
Rw = tr_Rtheta * w[tr_id]
cw = c.init / sqrt(w)
sw = sqrt(w)[tr_id]
fit = .Call("glm_c_step", zw, Rw, Rtheta * w, cw, sw, n, cand.lambda[k], PACKAGE = "cdcosso")
fit
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = 'gaussian', lambda = 1e-4)$beta)
c.init
zw = z[tr_id] * sqrt(w[tr_id])
Rw = tr_Rtheta * w[tr_id]
cw = c.init / sqrt(w)
sw = sqrt(w)[tr_id]
fit = .Call("glm_c_step", zw, Rw, Rtheta * w, cw, sw, n, cand.lambda[k], PACKAGE = "cdcosso")
fit
sspline.cd = function (R, R2, y, f, lambda0, obj, c.init)
{
n = length(y)
mu = obj$linkinv(f)
# initialize
w = obj$variance(mu)
z = f + (y - mu) / w
b = 0
zw = z * sqrt(w)
Rw = R * w
cw = c.init / sqrt(w)
sw = sqrt(w)
cw.new = rep(0, n)
for(i in 1:10){ # outer iteration
for(j in 1:n){
L = 2 * sum((zw - Rw[,-j] %*% cw[-j] - b * sw) * Rw[,j]) - n * lambda0 * c(Rw[j,-j] %*% cw[-j])
R = 2 * sum(Rw[,j]^2) + n * lambda0 * Rw[j,j]
cw.new[j] = L/R
loss = abs(cw-cw.new)
conv1 = max(loss) < 1e-6
conv2 = min(loss) > 10
if(conv1 | conv2) break
cw[j] = cw.new[j]  # if not convergence
}
if(conv1 | conv2) break
}
if(i == 1 & !conv1) cw.new = cw
cw.new = cw.new
c.new = cw.new * sw
b.new = sum((zw - Rw %*% cw.new) * sw) / sum(sw)
return(list(Rw = Rw, z.new = z, zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
}
fit = .Call("glm_c_step", zw, Rw, Rtheta * w, cw, sw, m, cand.lambda[k], PACKAGE = "cdcosso")
fit
