bvec = c(rep(0, p), -lambda_theta)
new.Theta = cosso::My_solve.QP(GH$H, dvec, Amat, bvec)
new.Theta[new.Theta < 1e-8] = 0
iter.diff = mean(abs(new.Theta - old.Theta))
old.Theta = new.Theta
}
UHU = G %*% My_solve(GH$H, t(G))
ACV = cosso::PartialLik(time, status, Risk, G %*% new.Theta) + ACV_pen
return(list(theta.new = new.Theta, G = GH$G, H = GH$H, ACV = ACV))
}
make_kernel = function (x, y, type)
{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
cat_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
n1 <- length(x)
n2 <- length(y)
x <- rep(x, times = n2)
y <- rep(y, each = n1)
L <- length(unique(c(x, y)))
K <- matrix(L * (x == y) - 1, n1, n2)
return(K)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly" | type == "poly2") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline" | type == "spline2") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear" | type == "linear2") {
K = tcrossprod(x, y)
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam, scale)
{
# if (length(unique(c(A, B))) <= 6)
#   K_temp <- cat_kernel(A, B)
# else K_temp <- spline_kernel(A, B)
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for two-way interactions
if (type == "spline") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[d]] = K_temp
} else{
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
# y = tr_y
# family = 'Cox'
# gamma = 0.8
# type = "spline"
# one.std = TRUE
# scale = T
# wt = rep(1, ncol(x))
# kparam = 1
# nfolds =5
# algo = "QP"
cdcosso = function (x,
y,
family = c("gaussian", "binomial", "poisson", "Cox"),
kernel = c("linear", "gaussian", "poly", "spline"),
effect = c("main", "interaction"),
algo = c("CD", "QP"),
kparam = 1,
lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20)),
gamma = 0.95, scale = TRUE)
{
n = nrow(x)
colnames(x) = NULL
rownames(x) = NULL
# if(class(x)[1] != "data.frame")
# stop("A input x must be matrix")
# family
family = match.arg(family)
if(family == "gaussian")
obj = gaussian()
if(family == "binomial")
obj =  binomial()
if(family == "poisson")
obj = poisson()
if(missing(kernel))
type = 'spline'
else
type = match.arg(kernel)
if(missing(algo))
algo = "CD"
if(missing(effect))
effect = 'main'
else
effect = match.arg(kernel)
if(effect == "interaction") kernel = paste0(kernel, "2")
# if(missing(lambda0))
#   lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
#
# if(missing(lambda_theta))
#   lambda_theta = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
if (family == "Cox" & !all(match(c("time", "status"), dimnames(y)[[2]], 0))) {
stop("Cox model requires a matrix with columns 'time' and 'status' as a response")
}
objnm = ifelse(family == 'gaussian' | family == 'binomial' | family == 'poisson', 'glm', family)
d = ifelse(effect == "main", ncol(x), ncol(x) * (ncol(x) - 1) / 2)
wt = rep(1/d, ncol(x))
# fitting
out = switch(objnm,
glm = cdcosso.glm(x, y, wt, lambda0, lambda_theta, gamma, obj, type, kparam, scale, algo),
Cox = cdcosso.cox(x, unlist(y[, "time"]), unlist(y[, "status"]), wt, lambda0, lambda_theta, gamma, type, kparam, scale, algo)
# Negbin, svm ì¶”???
)
attr(out, "class") = "cdcosso"
return(out)
}
x = X
time = unlist(y[, "time"])
status = unlist(y[, "status"])
type = "spline"
algo = "CD"
family = 'Cox'
gamma = 0.95
kparam=1
lambda0 = exp(seq(log(2^{-22}), log(2^{-11}), length.out = 20))
lambda_theta = exp(seq(log(2^{-22}), log(2^{4}), length.out = 20))
wt = rep(1, ncol(x))
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# x = X
# time = unlist(y[, "time"])
# status = unlist(y[, "status"])
# type = "spline"
# algo = "CD"
# family = 'Cox'
# gamma = 0.95
# kparam=1
# lambda0 = exp(seq(log(2^{-22}), log(2^{-11}), length.out = 20))
# lambda_theta = exp(seq(log(2^{-22}), log(2^{4}), length.out = 20))
d = ncol(x)
wt = rep(1/d, ncol(x))
wt
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
getc_cvfit
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
lambda0 = exp(seq(log(2^{-22}), log(2^{4}), length.out = 20))
lambda_theta = exp(seq(log(2^{-22}), log(2^{4}), length.out = 20))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# solve theta (1st)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
cosso::gradient.Hessian.C
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
# wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
# w = wz$weight
# z = wz$z
# return(list(zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
Hess = GH$Hessian - 2 * lambda0 * Rtheta
Grad = GH$Gradient - 2 * lambda0 * Rtheta %*% c.old
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:20){ # outer iteration
if(err) break
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:n){
V1 = t(z - Rtheta[ ,-j] %*% c.old[-j]) %*% t(W) %*% Rtheta[, j]
V2 = (Rtheta[j, -j] %*% c.old[-j]) / lambda0
V3 = t(Rtheta[, j]) %*% (t(W) %*% Rtheta[, j])
V4 = Rtheta[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
if(i == 1 & (conv1 | conv2 | conv3)) c.new = c.init
print(i)
# zw = z * sqrt(w)
# Rw = Rtheta * w
# cw = c.init
# cw.new = temp = c.init / sqrt(w)
# sw = sqrt(w)
# fit = .Call("cox_c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
# b.new = fit$b.new
# c.new = fit$c.new
# cw.new = fit$cw.new
# z = (Hess %*% c.new - Grad) / lambda0
# loglik = t(z - Rtheta %*% c.new) %*% W %*% (z - Rtheta %*% c.new)
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + Hess/lambda0))) / n)^2
# GCV = as.numeric(loglik / den / n)
# print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
# Risk = RS
# lambda0 = cand.lambda[1]
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:20){ # outer iteration
Hess = GH$Hessian
Grad = GH$Gradient
if(err) break
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad)
for(j in 1:n){
c.new[j] = W[j, ] %*% z
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
if(i == 1 & (conv1 | conv2 | conv3)) c.new = c.init
print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# Risk = RS
# lambda0 = cand.lambda[1]
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:20){ # outer iteration
Hess = GH$Hessian  - 2 * lambda0 * Rtheta
Grad = GH$Gradient - 2 * lambda0 * Rtheta %*% c.old
if(err) break
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = Hess %*% c.old - Grad
for(j in 1:n){
c.new[j] = W[j, ] %*% z
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
if(i == 1 & (conv1 | conv2 | conv3)) c.new = c.init
print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
wt = rep(1, ncol(x))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# solve theta (1st)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
getc_cvfit
theta_cvfit
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# solve theta (1st)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
theta_cvfit
n = 200
te_n = 1000
p_sig = 5
p = 25
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, algo = "CD",
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10
