#     te_id = te_id[!is.na(te_id)]
#
#     tr_n = length(tr_id)
#     te_n = length(te_id)
#
#     tr_R = array(NA, c(tr_n, n, d))
#     for(j in 1:d){
#       tr_R[, , j] = K$K[[j]][tr_id, ]
#     }
#
#     tr_Rtheta <- combine_kernel(tr_R, mscale)
#
#     te_R = array(NA, c(te_n, n, d))
#     for(j in 1:d){
#       te_R[, , j] = K$K[[j]][te_id, ]
#     }
#
#     te_Rtheta <- combine_kernel(te_R, mscale)
#
#     #
#     zw = z[tr_id] * sqrt(w[tr_id])
#     Rw = tr_Rtheta * w[tr_id]
#     sw = sqrt(w)[tr_id]
#     Rw2 = Rtheta * w
#     for (k in 1:len){
#
#       if(algo == "CD"){
#         c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = obj$family, lambda = 1e-4)$beta)
#
#         cw = c.init / sqrt(w)
#
#         fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, tr_n, n, cand.lambda[k], PACKAGE = "cdcosso")
#         b.new = fit$b.new
#         cw.new = fit$cw.new
#         c.new = cw.new * sqrt(w)
#         # cat("R calculate:", sum(zw - Rw %*% cw.new) / sum(sw), "\n")
#         # cat("C calculate:", b.new, "\n")
#       }
#
#         if(sum(is.nan(cw.new)) == n){
#         next
#       } else{
#
#         # validation
#         testfhat = c(b.new + te_Rtheta %*% c.new)
#         testmu = obj$linkinv(testfhat)
#
#         if(obj$family == "gaussian") measure[f, k] <- mean((testfhat - y[te_id])^2)
#         if(obj$family == "binomial") measure[f, k] <- mean(y[te_id] != ifelse(testmu < 0.5, 0, 1))
#         if(obj$family == "poisson") measure[f, k] <- mean(poisson()$dev.resids(y[te_id], testmu, rep(1, te_n)))
#
#       }
#     }
#   }
#
#   # plotting error bar
#   if(obj$family == 'gaussian'){
#     main = "Gaussian Family"
#   }
#   if(obj$family == 'binomial'){
#     main = "Binomial Family"
#   }
#   if(obj$family == 'poisson'){
#     main = "Poisson Family"
#   }
#
#   ylab = expression("GCV(" * lambda[0] * ")")
#
#   # optimal lambda1
#   measure_mean = colMeans(measure, na.rm = T)
#   measure_se = apply(measure, 2, sd, na.rm = T) / sqrt(te_n)
#   min_id = which.min(measure_mean)
#   optlambda = cand.lambda[min_id]
#
#   if(show){
#     plot(log(cand.lambda), measure_mean, main = main, xlab = expression("Log(" * lambda[0] * ")"), ylab = ylab,
#          ylim = range(c(measure_mean - measure_se, measure_mean + measure_se)), pch = 15, col = 'red')
#     arrows(x0 = log(cand.lambda), y0 = measure_mean - measure_se,
#            x1 = log(cand.lambda), y1 = measure_mean + measure_se,
#            angle = 90, code = 3, length = 0.1, col = "darkgray")
#   }
#
#   rm(tr_R)
#   rm(te_R)
#   rm(tr_Rtheta)
#   rm(te_Rtheta)
#
#
#   c.init = as.vector(glmnet(Rtheta, y, family = 'gaussian', lambda = optlambda)$beta)
#
#   cw = c.init / sqrt(w)
#
#   zw = z * sqrt(w)
#   Rw = Rtheta * w
#   sw = sqrt(w)
#
#   fit = .Call("glm_c_step", zw, Rw, Rw, cw, sw, n, n, optlambda, PACKAGE = "cdcosso")
#   b.new = fit$b.new
#   cw.new = fit$cw.new
#   c.new = fit$cw.new * sqrt(w)
#
#   f.new = c(b.new + Rtheta %*% c.new)
#   mu.new = obj$linkinv(f.new)
#   w.new = obj$variance(mu.new)
#   z.new = f.new + (y - mu.new) / w.new
#
#   if(obj$family == "binomial") miss <- mean(y != ifelse(mu.new < 0.5, 0, 1))
#   if(obj$family == "gaussian") miss <- mean((y - f.new)^2)
#   if(obj$family == "poisson") miss <- mean(poisson()$dev.resids(y, mu.new, rep(1, n)))
#
#   cat("training error:", miss, "\n")
#
#   out = list(measure = measure, R = R, w.new = w.new, sw.new = sqrt(w.new),
#              z.new = z.new, zw.new = z.new * sqrt(w.new), b.new = b.new,
#              cw.new = cw.new, c.new = c.new, optlambda = optlambda, conv = TRUE)
#
#
#
#   rm(K)
#   rm(Rtheta)
#
#   return(out)
# }
sspline.cd = function (R, y, f, lambda0, obj, c.init)
{
n = length(y)
mu = obj$linkinv(f)
# initialize
w = obj$variance(mu)
z = f + (y - mu) / w
b = 0
zw = z * sqrt(w)
Rw = R * w
cw = c.init / sqrt(w)
sw = sqrt(w)
cw.new = rep(0, n)
for(i in 1:10){ # outer iteration
for(j in 1:n){
L = 2 * sum((zw - Rw[,-j] %*% cw[-j] - b * sw) * Rw[,j]) - n * lambda0 * c(Rw[j,-j] %*% cw[-j])
R = 2 * sum(Rw[,j]^2) + n * lambda0 * Rw[j,j]
cw.new[j] = L/R
loss = abs(cw-cw.new)
conv1 = max(loss) < 1e-6
conv2 = min(loss) > 10
if(conv1 | conv2) break
cw[j] = cw.new[j]  # if not convergence
}
if(conv1 | conv2) break
}
if(i == 1 & !conv1) cw.new = cw
cw.new = cw.new
c.new = cw.new * sw
b.new = sum((zw - Rw %*% cw.new) * sw) / sum(sw)
return(list(Rw = Rw, z.new = z, zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
}
sspline.QP = function (R, y, f, lambda0, obj, c.init)
{
n = length(y)
mu = obj$linkinv(f)
# initialize
w = obj$variance(mu)
z = f + (y - mu) / w
b = 0
zw = z * sqrt(w)
Rw = R * w
cw = c.init / sqrt(w)
sw = sqrt(w)
cw.new = rep(0, n)
for(i in 1:10){ # outer iteration
Dmat = t(R) %*% R + n * lambda0 * R
dvec = as.vector(t(zw - b * sw) %*% R)
cw.new = ginv(Dmat) %*% dvec
loss = abs(cw-cw.new)
conv = max(loss) < 1e-6
if(conv) break
cw = cw.new  # if not convergence
}
cw.new = cw.new
c.new = cw.new * sw
b.new = sum((zw - Rw %*% cw.new) * sw) / sum(sw)
return(list(Rw = Rw, z.new = z, zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
}
cv.nng = function(model, y, mscale, lambda0, lambda_theta, gamma, obj, algo)
{
cat("-- theta-step -- \n")
cat("proceeding... \n")
n = length(y)
d = length(mscale)
# solve theta
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
Gw = G * sqrt(model$w.new)
uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
init.theta = rep(1, d)
len = length(lambda_theta)
measure <- c(NA, len)
save_theta <- list()
for (k in 1:len) {
if(algo == "CD") {
theta.new = .Call("glm_theta_step", Gw, uw, n, d, init.theta, lambda_theta[k], gamma)
theta.adj = ifelse(theta.new <= 1e-6, 0, theta.new)
save_theta[[k]] <- theta.adj
}
XX = model$zw.new - Gw %*% theta.adj
num = t(XX) %*% XX + 1
den = (1 - sum(diag( Gw %*% ginv( t(Gw) %*% Gw) %*% t(Gw) )) / n)^2 + 1
measure[k] <- as.vector(num / den /n)
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
min_id = which.min(measure)
optlambda = lambda_theta[min_id]
ylab = expression("GCV(" * lambda[theta] * ")")
xrange = log(lambda_theta)
plot(xrange, measure, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = ylab, ylim = range(measure), pch = 15, col = 'red')
theta.new = .Call("glm_theta_step", Gw, uw, n, d, init.theta, optlambda, gamma)
# theta.new = save_theta[[id]]
theta.adj = ifelse(theta.new <= 1e-6, 0, theta.new)
f.new = c(G %*% theta.adj)
mu.new = obj$linkinv(f.new)
if(obj$family == "binomial") miss <- mean(y != ifelse(mu.new < 0.5, 0, 1))
if(obj$family == "gaussian") miss <- mean((y - f.new)^2)
if(obj$family == "poisson") miss <- mean(poisson()$dev.resids(y, mu.new, rep(1, n)))
cat("training error:", miss, "\n")
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new)
return(out)
}
# cv.nng = function(model, y, mscale, lambda0, lambda_theta, gamma, obj, algo)
# {
#   cat("-- theta-step -- \n")
#   cat("proceeding... \n")
#   n = length(y)
#   d = length(mscale)
#
#   # solve theta
#   G <- matrix(0, nrow(model$R[, ,1]), d)
#   for (j in 1:d) {
#     G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
#   }
#
#   Gw = G * sqrt(model$w.new)
#   uw = model$zw.new - model$b.new * sqrt(model$w.new) - (n/2) * lambda0 * model$cw.new
#
#   init.theta = rep(1, d)
#
#   if(algo == "QP") lambda_theta = exp(seq(log(1e-4), log(40), length.out = length(lambda_theta)))
#   len = length(lambda_theta)
#
#   measure <- matrix(NA, 5, len)
#   fold = cvsplitID(n, 5, y, family = obj$family)
#
#   save_theta <- list()
#   for(f in 1:5){
#     tr_id = as.vector(fold[, -f])
#     te_id = fold[, f]
#
#     tr_id = tr_id[!is.na(tr_id)]
#     te_id = te_id[!is.na(te_id)]
#
#     tr_n = length(tr_id)
#     te_n = length(te_id)
#
#     m = length(tr_id)
#
#     for (k in 1:len) {
#       theta.new = .Call("glm_theta_step", Gw[tr_id,], uw[tr_id], tr_n, d, init.theta, lambda_theta[k], gamma)
#       theta.adj = ifelse(theta.new <= 1e-6, 0, theta.new)
#       save_theta[[k]] <- theta.adj
#
#       testfhat = G[te_id, ] %*% theta.adj
#       testmu = obj$linkinv(testfhat)
#       if(obj$family == "gaussian") measure[f, k] <- mean((testfhat - y[te_id])^2)
#       if(obj$family == "binomial") measure[f, k] <- mean(y[te_id] != ifelse(testmu < 0.5, 0, 1))
#       if(obj$family == "poisson") measure[f, k] <- mean(poisson()$dev.resids(y[te_id], testmu, rep(1, te_n)))
#     }
#   }
#
#   # plotting error bar
#   if(obj$family == 'gaussian'){
#     main = "Gaussian Family"
#   }
#   if(obj$family == 'binomial'){
#     main = "Binomial Family"
#   }
#   if(obj$family == 'poisson'){
#     main = "Poisson Family"
#   }
#
#   measure_mean = colMeans(measure, na.rm = T)
#   measure_se = apply(measure, 2, sd, na.rm = T) / sqrt(te_n)
#   min_id = which.min(measure_mean)
#   cand_ids = which((measure_mean >= measure_mean[min_id]) &
#                      (measure_mean <= (measure_mean[min_id] + measure_se[min_id])))
#   cand_ids = cand_ids[cand_ids >= min_id]
#   std_id = max(cand_ids)
#   optlambda = lambda_theta[std_id]
#
#   ylab = expression("GCV(" * lambda[theta] * ")")
#
#   xrange = log(lambda_theta)
#   # plot(xrange, measure, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = ylab, ylim = range(measure), pch = 15, col = 'red')
#
#   plot(log(lambda_theta), measure_mean, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = ylab,
#        ylim = range(c(measure_mean - measure_se, measure_mean + measure_se)), pch = 15, col = 'red')
#   arrows(x0 = log(lambda_theta), y0 = measure_mean - measure_se,
#          x1 = log(lambda_theta), y1 = measure_mean + measure_se,
#          angle = 90, code = 3, length = 0.1, col = "darkgray")
#
#     theta.new = .Call("glm_theta_step", Gw, uw, n, d, init.theta, optlambda, gamma)
#     # theta.new = save_theta[[id]]
#     theta.adj = ifelse(theta.new <= 1e-6, 0, theta.new)
#
#     f.new = c(G %*% theta.adj)
#     mu.new = obj$linkinv(f.new)
#
#     if(obj$family == "binomial") miss <- mean(y != ifelse(mu.new < 0.5, 0, 1))
#     if(obj$family == "gaussian") miss <- mean((y - f.new)^2)
#     if(obj$family == "poisson") miss <- mean(poisson()$dev.resids(y, mu.new, rep(1, n)))
#
#     cat("training error:", miss, "\n")
#
#   out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new)
#   return(out)
# }
nng.cd = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
theta.new = rep(0, d)
for(i in 1:10){
for(j in 1:d){
theta.new[j] = 2 * sum((uw - Gw[,-j] %*% theta[-j]) * Gw[,j])
theta.new[j] = ifelse(theta.new[j] > 0 & r < abs(theta.new[j]), theta.new[j], 0)
theta.new[j] = theta.new[j] / (sum(Gw[,j]^2) + n * lambda_theta * (1-gamma)) / 2
loss = abs(theta - theta.new)
conv = max(loss) < 1e-20
if(conv) break
theta[j] = theta.new[j]
}
if(conv) break
}
if(i == 1 & !conv) theta = rep(0, d)
return(theta)
}
nng.QP = function (Gw, uw, theta, lambda_theta, gamma)
{
n = nrow(Gw)
d = ncol(Gw)
r = lambda_theta * gamma * n
theta.new = rep(0, d)
for(i in 1:10){ # outer iteration
Dmat = t(Gw) %*% Gw + diag(n * lambda_theta * gamma, d)
dvec = as.vector(2 * t(uw) %*% Gw)
Amat = t(rbind(diag(1, d), rep(-1, d)))
bvec = c(rep(0, d), -lambda_theta)
theta.new = solve.QP(2 * Dmat, dvec, Amat, bvec)$solution
theta.new[theta.new < 1e-8] = 0
loss = abs(theta - theta.new)
conv = max(loss) < 1e-8
if(conv) break
theta = theta.new
}
return(theta.new)
}
n = 100
te_n = 1000
p_sig = 5
p = 200
out = matrix(0, 24, 14)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "test", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
for(n in c(100, 200)){
for(p in c(25, 50, 100, 200)){ # signal 20%, 10%, 5%, 2.5%
# for(nb in c(12, 25, 50, 100)){
iter = 20
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, response = "regression")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, response = "regression")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(-poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 0.95, kernel = "spline", scale = F, algo = "CD"), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(-poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_time[i] = mean(t2)
}
}
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 1
out$tp[ll] = round(mean(en3_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4)
out$fp[ll] = round(mean(en3_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4)
out$f1[ll] = round(mean(en3_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4)
out$miss[ll] = round(mean(en3_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4)
out$time[[ll]] = round(mean(en3_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4)
out$test[[ll]] = 0
ll = ll + 1
out$n[ll] = n
out$p[ll] = p
out$gamma[[ll]] = 0.95
out$tp[ll] = round(mean(en1_tp, na.rm = TRUE), 4)
out$tp_se[ll] = round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4)
out$fp[ll] = round(mean(en1_fp, na.rm = TRUE), 4)
out$fp_se[ll] = round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4)
out$f1[ll] = round(mean(en1_f1, na.rm = TRUE), 4)
out$f1_se[ll] = round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4)
out$miss[ll] = round(mean(en1_miss, na.rm = TRUE), 4)
out$miss_se[ll] = round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4)
out$time[[ll]] = round(mean(en1_time, na.rm = TRUE), 4)
out$time_se[[ll]] = round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4)
out$test[[ll]] = wilcox.test(en1_f1, en3_f1)$p.value
if(i == iter){
print(Sys.time())
cat("\n n :", n, ", p = ", d, "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('gamma=1 \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat("time :", round(mean(en3_time, na.rm = TRUE), 4), "(", round(sd(en3_time, na.rm = TRUE)/sqrt(sum(!is.na(en3_time))), 4), ")", "\n")
cat('varsel :', colSums(en3_signal_varsel), mean(en3_varsel, na.rm = TRUE) ,"(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en3_tp, na.rm = TRUE), 4), "(", round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4), ")", "\n")
cat('fp :', round(mean(en3_fp, na.rm = TRUE), 4), "(", round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('gamma=0.95 \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel, na.rm = TRUE) ,"(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en1_tp, na.rm = TRUE), 4), "(", round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4), ")", "\n")
cat('fp :', round(mean(en1_fp, na.rm = TRUE), 4), "(", round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
fit10
en1_f1
mean(en1_f1)
tr = data_generation(n, p, response = "regression")
en1_miss
en3_miss
