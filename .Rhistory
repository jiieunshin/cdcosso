B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[d]] = K_temp
} else{
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
# y = tr_y
# family = 'Cox'
# gamma = 0.8
# type = "spline"
# one.std = TRUE
# scale = T
# wt = rep(1, ncol(x))
# kparam = 1
# nfolds =5
# algo = "QP"
cdcosso = function (x,
y,
family = c("gaussian", "binomial", "poisson", "Cox"),
kernel = c("linear", "gaussian", "poly", "spline"),
effect = c("main", "interaction"),
algo = c("CD", "QP"),
kparam = 1,
lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20)),
gamma = 0.95, scale = TRUE)
{
n = nrow(x)
colnames(x) = NULL
rownames(x) = NULL
# if(class(x)[1] != "data.frame")
# stop("A input x must be matrix")
# family
family = match.arg(family)
if(family == "gaussian")
obj = gaussian()
if(family == "binomial")
obj =  binomial()
if(family == "poisson")
obj = poisson()
if(missing(kernel))
type = 'spline'
else
type = match.arg(kernel)
if(missing(algo))
algo = "CD"
if(missing(effect))
effect = 'main'
else
effect = match.arg(kernel)
if(effect == "interaction") kernel = paste0(kernel, "2")
# if(missing(lambda0))
#   lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
#
# if(missing(lambda_theta))
#   lambda_theta = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
if (family == "Cox" & !all(match(c("time", "status"), dimnames(y)[[2]], 0))) {
stop("Cox model requires a matrix with columns 'time' and 'status' as a response")
}
objnm = ifelse(family == 'gaussian' | family == 'binomial' | family == 'poisson', 'glm', family)
d = ifelse(effect == "main", ncol(x), ncol(x) * (ncol(x) - 1) / 2)
wt = rep(1/d, ncol(x))
# fitting
out = switch(objnm,
glm = cdcosso.glm(x, y, wt, lambda0, lambda_theta, gamma, obj, type, kparam, scale, algo),
Cox = cdcosso.cox(x, unlist(y[, "time"]), unlist(y[, "status"]), wt, lambda0, lambda_theta, gamma, type, kparam, scale, algo)
# Negbin, svm 추???
)
attr(out, "class") = "cdcosso"
return(out)
}
x = X
time = unlist(y[, "time"])
status = unlist(y[, "status"])
type = "spline"
algo = "CD"
family = 'Cox'
gamma = 0.95
kparam=1
lambda0 = exp(seq(log(2^{-22}), log(2^{-11}), length.out = 20))
lambda_theta = exp(seq(log(2^{-22}), log(2^{4}), length.out = 20))
wt = rep(1, ncol(x))
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# x = X
# time = unlist(y[, "time"])
# status = unlist(y[, "status"])
# type = "spline"
# algo = "CD"
# family = 'Cox'
# gamma = 0.95
# kparam=1
# lambda0 = exp(seq(log(2^{-22}), log(2^{-11}), length.out = 20))
# lambda_theta = exp(seq(log(2^{-22}), log(2^{4}), length.out = 20))
d = ncol(x)
wt = rep(1/d, ncol(x))
wt
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
par(mfrow = c(1,3))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
getc_cvfit
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
lambda0 = exp(seq(log(2^{-22}), log(2^{4}), length.out = 20))
lambda_theta = exp(seq(log(2^{-22}), log(2^{4}), length.out = 20))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# solve theta (1st)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
cosso::gradient.Hessian.C
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
# wz = calculate_wz_for_c(c.init, Rtheta, time, status, Risk)
# w = wz$weight
# z = wz$z
# return(list(zw.new = zw, w.new = w, sw.new = sw, b.new = b.new, c.new = c.new, cw.new = cw.new))
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
Hess = GH$Hessian - 2 * lambda0 * Rtheta
Grad = GH$Gradient - 2 * lambda0 * Rtheta %*% c.old
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:20){ # outer iteration
if(err) break
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:n){
V1 = t(z - Rtheta[ ,-j] %*% c.old[-j]) %*% t(W) %*% Rtheta[, j]
V2 = (Rtheta[j, -j] %*% c.old[-j]) / lambda0
V3 = t(Rtheta[, j]) %*% (t(W) %*% Rtheta[, j])
V4 = Rtheta[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
if(i == 1 & (conv1 | conv2 | conv3)) c.new = c.init
print(i)
# zw = z * sqrt(w)
# Rw = Rtheta * w
# cw = c.init
# cw.new = temp = c.init / sqrt(w)
# sw = sqrt(w)
# fit = .Call("cox_c_step", zw, Rw, cw, sw, n, lambda0, PACKAGE = "cdcosso")
# b.new = fit$b.new
# c.new = fit$c.new
# cw.new = fit$cw.new
# z = (Hess %*% c.new - Grad) / lambda0
# loglik = t(z - Rtheta %*% c.new) %*% W %*% (z - Rtheta %*% c.new)
# den = (1 - sum(diag(Rtheta %*% ginv(Rtheta + Hess/lambda0))) / n)^2
# GCV = as.numeric(loglik / den / n)
# print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
# Risk = RS
# lambda0 = cand.lambda[1]
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:20){ # outer iteration
Hess = GH$Hessian
Grad = GH$Gradient
if(err) break
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = (Hess %*% c.old - Grad)
for(j in 1:n){
c.new[j] = W[j, ] %*% z
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
if(i == 1 & (conv1 | conv2 | conv3)) c.new = c.init
print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# Risk = RS
# lambda0 = cand.lambda[1]
getc.cd = function(R, Rtheta, mscale, f, c.init, time, status, lambda0, Risk)
{
n = ncol(Rtheta)
c.old = c.init
c.new = rep(0, n)
GH = try(cosso::gradient.Hessian.C(c.old, R, R, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:20){ # outer iteration
Hess = GH$Hessian  - 2 * lambda0 * Rtheta
Grad = GH$Gradient - 2 * lambda0 * Rtheta %*% c.old
if(err) break
# 2 * n * lambda0 * Rtheta2
W = ginv(Hess)
z = Hess %*% c.old - Grad
for(j in 1:n){
c.new[j] = W[j, ] %*% z
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
if(i == 1 & (conv1 | conv2 | conv3)) c.new = c.init
print(i)
UHU = Rtheta %*% My_solve(GH$H, t(Rtheta))
ACV_pen = sum(status == 1)/n^2 * (sum(diag(UHU))/(n - 1) - sum(UHU)/(n^2 - n))
ACV = PartialLik(time, status, Risk, Rtheta %*% c.new) + ACV_pen
return(list(z.new = z, w.new = W, c.new = c.new, ACV = ACV, ACV_pen = ACV_pen))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
wt = rep(1, ncol(x))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# solve theta (1st)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
getc_cvfit
theta_cvfit
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
# solve c (1st)
getc_cvfit = cv.getc(K, time, status, rep(1, d)/wt^2, lambda0, type, kparam, algo , show = TRUE)
# solve theta (1st)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam, algo)
theta_cvfit
n = 200
te_n = 1000
p_sig = 5
p = 25
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# for(nb in c(12, 25, 50, 100)){
iter = 10
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, algo = "CD",
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
library(glmnet)
library(cosso)
n = 200
te_n = 1000
p_sig = 5
p = 25
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
p = 50
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, response = "survival")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, response = "survival")
te_x = te$x
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, algo = "CD",
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
), silent = TRUE)
fit10
library(compound.Cox)
data(PBC)
X = PBC[,3:19]
y = PBC[,1:2]
names(y) = c("time", "status")
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, 10, 17)
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
### 실행 #######################################
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, 10, 17)
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID,]
te_x = X[testID, ]
te_y = y[testID,]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 1, kernel = "spline", scale = T, algo = "CD",
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(X, y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, algo = "CD",
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
time3[i] = t1[3]
en3_varsel[i,] = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RiskSet, fit3$c_step$f.new)
# en3_miss[i] = mean((te_y - en3_pred$mu.new)^2)
}
if(!(class(fit10) == 'try-error')){
sel_id = fit10$theta_step$theta.new > 0
print(names(X)[sel_id])
time10[i] = t2[3]
en1_varsel[i,] = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RiskSet, fit10$c_step$f.new)
# en1_miss[i] = mean((te_y - en1_pred$mu.new)^2)
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
fit10
i
try(cdcosso(X, y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, algo = "CD",
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
), silent = TRUE)
