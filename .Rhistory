}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if(d %in% cat.id){
K_temp = cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
type = "spline"
algo = "CD"
family = 'Cox'
gamma = 0.95
kparam=1
lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
lambda_theta = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
wt = rep(1, ncol(x))
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
make_anovaKernel(x, x, type = type, kparam, scale)
x
x
cat.id = c()
k = 0
for(j in 1:ncol(x)){
if(is.factor(x[,j])){
cat.id[k] = j
x[,j] = as.numeric(x[,j])
k = k + 1
} else{
x[,j] = rescale(x[,j])
}
}
cat.id
x
xx = as.matrix(x)
yy = as.matrix(y)
dimx = ncol(x)
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
anova_kernel
dimx
index = index + 1
A = xx[, d, drop = FALSE]
B = yy[, d, drop = FALSE]
as.matrix(x)
str(x)
xx
xx
xx[, d, drop = FALSE]
str(xx)
xx[,1]
d
d=1
xx[, d, drop = FALSE]
yy[, d, drop = FALSE]
A = xx[, d, drop = FALSE]
B = yy[, d, drop = FALSE]
x
xx
xx[, d, drop = FALSE]
yy[, d, drop = FALSE]
d
A = xx[, d, drop = FALSE]
B = yy[, d, drop = FALSE]
A
B
yy = as.matrix(x)
B = yy[, d, drop = FALSE]
B
d
d %in% cat.id
K_temp = cat_kernel(A, B)
K_temp = spline_kernel(A, B)
K_temp
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
for (d in 1:dimx) {
index = index + 1
A = xx[, d, drop = FALSE]
B = yy[, d, drop = FALSE]
if(d %in% cat.id){
K_temp = cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
kernelCoord
anova_kernel[[index]]
cat.id
anova_kernel[[7]]
xx[,7]
xx[, d, drop = FALSE]
d
d=7
xx[, d, drop = FALSE]
yy[, d, drop = FALSE]
A = xx[, d, drop = FALSE]
B = yy[, d, drop = FALSE]
d
d %in% cat.id
K_temp = cat_kernel(A, B)
K_temp
index
anova_kernel[[7]]
index
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = xx[, d, drop = FALSE]
B = yy[, d, drop = FALSE]
if(d %in% cat.id){
K_temp = cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
anova_kernel[[7]]
make_anovaKernel = function(x, y, type, kparam, scale)
{
cat.id = c()
k = 0
for(j in 1:ncol(x)){
if(is.factor(x[,j])){
cat.id[k] = j
x[,j] = as.numeric(x[,j])
k = k + 1
} else{
x[,j] = rescale(x[,j])
}
}
xx = as.matrix(x)
yy = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for two-way interactions
if (type == "spline") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = xx[, d, drop = FALSE]
B = yy[, d, drop = FALSE]
if(d %in% cat.id){
K_temp = cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if(d %in% cat.id){
K_temp = cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
x
K = make_anovaKernel(x, x, type = type, kparam, scale)
K
K$K[[1]]
K$K[[7]]
x
type
K$K
str(x)
library(compound.Cox)
data(PBC)
str(PBC)
X = PBC[,3:19]
y = cbind(PBC[,1:2])
names(y) = c("time", "status")
str(X)
X$trt <- as.factor(X$trt)
X$sex <- as.factor(X$sex)
X$asc <- as.factor(X$asc)
X$hep <- as.factor(X$hep)
X$spi <- as.factor(X$spi)
X$ede <- as.factor(X$ede)
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
n = length(time)
p = length(wt)
K = make_anovaKernel(x, x, type = type, kparam, scale)
K
rm(K)
K = make_anovaKernel(x, x, type = type, kparam, scale)
K
str(x)
y <- x
cat.id = c()
k = 0
for(j in 1:ncol(x)){
if(is.factor(x[,j])){
cat.id[k] = j
x[,j] = as.numeric(x[,j])
k = k + 1
} else{
x[,j] = rescale(x[,j])
}
}
xx = as.matrix(x)
yy = as.matrix(y)
dimx = ncol(x)
yy
x
xx
cosso::predict.cosso
make_anovaKernel = function(x, y, type, kparam, scale)
{
cat.id = c()
k = 0
for(j in 1:ncol(x)){
if(is.factor(x[,j]) & is.factor(y[,j])){
cat.id[k] = j
x[,j] = as.numeric(x[,j])
y[,j] = as.numeric(y[,j])
k = k + 1
} else{
x[,j] = as.numeric(x[,j])
y[,j] = as.numeric(y[,j])
x[,j] = rescale(x[,j])
y[,j] = rescale(y[,j])
}
}
xx = as.matrix(x)
yy = as.matrix(y)
dimx = ncol(xx)
# calculate anova kernels for two-way interactions
if (type == "spline") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = xx[, d, drop = FALSE]
B = yy[, d, drop = FALSE]
if(d %in% cat.id){
K_temp = cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if(d %in% cat.id){
K_temp = cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
library(compound.Cox)
data(PBC)
str(PBC)
X = PBC[,3:19]
y = cbind(PBC[,1:2])
names(y) = c("time", "status")
str(X)
X$trt <- as.factor(X$trt)
X$sex <- as.factor(X$sex)
X$asc <- as.factor(X$asc)
X$hep <- as.factor(X$hep)
X$spi <- as.factor(X$spi)
X$ede <- as.factor(X$ede)
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID,]
te_x = X[testID, ]
te_y = y[testID,]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 1, kernel = "spline", scale = T, algo = "QP"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
fit3
