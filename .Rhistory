}
if(response == "regression"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(response == "count"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) + .4
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 + .6
}
if(response == "survival"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(missing(response))
type = "classification"
response = match.arg(response)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.8
if(missing(SNR)) SNR = 8
if(p <= 5) stop("dimension size should be larger than 5.")
# Sigma = matrix(rho, 4, 4)
# diag(Sigma) = 1
# Sigma = matrix(1, 4, 4)
# for(j in 1:4){
#   for(k in 1:4){
#     Sigma[j, k] = rho^abs(j-k)
#   }
# }
# x = apply(rmvnorm(n, sigma = Sigma), 2, rescale)
t = 2
pp = ifelse(response == "survival", 4, 4)
x = matrix(0, n, pp)
W = matrix(runif(n * pp), n, pp)
U = runif(n)
for(j in 1:pp){
x[, j] = (W[, j] + t * U)/(1 + t)
}
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(1,4))
# curve(f1, 0, 1)
# curve(f2, 0, 1)
# curve(f3, 0, 1)
# curve(f4, 0, 1)
# par(mfrow = c(1,1))
if(response == "regression"){
f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 3 * f3(x[,3]) + 6 * f4(x[,4])
V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(3 * f3(x[,3])) + var(6 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
print(sd/sqrt(p-4))
out = list(x = x, y = f)
}
if(response == "classification"){
# f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 4 * f3(x[,3]) + 5 * f4(x[,4])
# V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(4 * f3(x[,3])) + var(5 * f4(x[,4]))
f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4])
V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
e = rnorm(n, 0, sd)
f = f - 9 + e
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
# plot(prob)
# print(table(y))
out = list(x = x, f = f, y = y)
}
if(response == "count"){
f = f1(x[,1])/6 + f2(x[,2])/4 + f3(x[,3])/2 + f4(x[,4])
V_sig = var(f1(x[,1])/6) + var(f2(x[,2])/4) + var(f3(x[,3])/2) + var(f4(x[,4]) )
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
mu = exp(f)
y = rpois(n, mu)
out = list(x = x, f = f, y = y)
}
if(response == 'survival'){
# x = cbind(x, )
f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 3 * f3(x[,3]) + 6 * f4(x[,4])
V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(3 * f3(x[,3])) + var(6 * f4(x[,4]))
# f = 1 * x[, 1] + 3 * sin(2 * pi * x[, 2]) + 2 * (x[, 3] - 0.4)^2 + ifelse(x[, 4] < 0.7, 0, 1)
# V_sig = var(1 * x[, 1]) + var(3 * sin(2 * pi * x[, 2])) + var(2 * (x[, 3] - 0.4)^2) + 0.7 * 0.3 /n
print(V_sig)
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
out = list(x = x, f = f, y = y)
}
return(out)
}
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
tr = data_generation(n, p, SNR = 3, response = "count")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 3, response = "count")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'poisson', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-4}), log(2^{2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-4}), log(2^{3}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
fit3
#' This function uses the given test data to calculate predictions from the weights and biases generated by the model.
#'
#' @param n The number of observation of a example dataset.
#' @param p Dimension of a example dataset.
#' @param rho Correlation for first five significance variables.
#' @param SNR Signal-to-noise ratio.
#' @param response Type of response variable.
#'
#' @return a list containing the predicted value for the test data (f.new) and the transformed value of that predicted value (mu.new).
#' @export
data_generation = function(n, p, rho, SNR,
response = c("regression", "classification", "count", "survival", "interaction")){
if(response == "classification"){
# f1 = function(t) t - .5
# f2 = function(t) (2 * t - 1)^2 - .4
# f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) - .1
# f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
f1 = function(t) 3 * t
f2 = function(t) pi * sin(pi * t)
f3 = function(t) 8 * t^3
f4 = function(t) 4/ (exp(1) - 1) * exp(t)
}
if(response == "regression"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(response == "count"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) + .4
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 + .6
}
if(response == "survival"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(missing(response))
type = "classification"
response = match.arg(response)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.8
if(missing(SNR)) SNR = 8
if(p <= 5) stop("dimension size should be larger than 5.")
# Sigma = matrix(rho, 4, 4)
# diag(Sigma) = 1
# Sigma = matrix(1, 4, 4)
# for(j in 1:4){
#   for(k in 1:4){
#     Sigma[j, k] = rho^abs(j-k)
#   }
# }
# x = apply(rmvnorm(n, sigma = Sigma), 2, rescale)
t = 2
pp = ifelse(response == "survival", 4, 4)
x = matrix(0, n, pp)
W = matrix(runif(n * pp), n, pp)
U = runif(n)
for(j in 1:pp){
x[, j] = (W[, j] + t * U)/(1 + t)
}
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(1,4))
# curve(f1, 0, 1)
# curve(f2, 0, 1)
# curve(f3, 0, 1)
# curve(f4, 0, 1)
# par(mfrow = c(1,1))
if(response == "regression"){
f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 3 * f3(x[,3]) + 6 * f4(x[,4])
V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(3 * f3(x[,3])) + var(6 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
print(sd/sqrt(p-4))
out = list(x = x, y = f)
}
if(response == "classification"){
# f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 4 * f3(x[,3]) + 5 * f4(x[,4])
# V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(4 * f3(x[,3])) + var(5 * f4(x[,4]))
f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4])
V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
e = rnorm(n, 0, sd)
f = f - 9 + e
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
# plot(prob)
# print(table(y))
out = list(x = x, f = f, y = y)
}
if(response == "count"){
f = f1(x[,1])/6 + f2(x[,2])/4 + f3(x[,3])/2 + f4(x[,4])/2
V_sig = var(f1(x[,1])/6) + var(f2(x[,2])/4) + var(f3(x[,3])/2) + var(f4(x[,4])/2 )
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
mu = exp(f)
y = rpois(n, mu)
out = list(x = x, f = f, y = y)
}
if(response == 'survival'){
# x = cbind(x, )
f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 3 * f3(x[,3]) + 6 * f4(x[,4])
V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(3 * f3(x[,3])) + var(6 * f4(x[,4]))
# f = 1 * x[, 1] + 3 * sin(2 * pi * x[, 2]) + 2 * (x[, 3] - 0.4)^2 + ifelse(x[, 4] < 0.7, 0, 1)
# V_sig = var(1 * x[, 1]) + var(3 * sin(2 * pi * x[, 2])) + var(2 * (x[, 3] - 0.4)^2) + 0.7 * 0.3 /n
print(V_sig)
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
out = list(x = x, f = f, y = y)
}
return(out)
}
tr = data_generation(n, p, SNR = 3, response = "count")
tr
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 3, response = "count")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 3, response = "count")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'poisson', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-4}), log(2^{2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-4}), log(2^{3}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(KLD(te_y, en3_pred$f.new, poisson()))
en3_miss[i] = mean(poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'poisson', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-6}), log(2^{-4}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-6}), log(2^{-4}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = c(rep(1, p_sig), rep(0, p-p_sig))
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[1:p_sig] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(KLD(te_y, en1_pred$f.new, poisson()))
en1_miss[i] = mean(poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_time[i] = mean(t2)
}
}
fit10
tr = data_generation(n, p, SNR = 3, response = "count")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 3, response = "count")
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'poisson', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-6}), log(2^{-4}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-6}), log(2^{-4}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
fit3
#' This function uses the given test data to calculate predictions from the weights and biases generated by the model.
#'
#' @param n The number of observation of a example dataset.
#' @param p Dimension of a example dataset.
#' @param rho Correlation for first five significance variables.
#' @param SNR Signal-to-noise ratio.
#' @param response Type of response variable.
#'
#' @return a list containing the predicted value for the test data (f.new) and the transformed value of that predicted value (mu.new).
#' @export
data_generation = function(n, p, rho, SNR,
response = c("regression", "classification", "count", "survival", "interaction")){
if(response == "classification"){
# f1 = function(t) t - .5
# f2 = function(t) (2 * t - 1)^2 - .4
# f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) - .1
# f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
f1 = function(t) 3 * t
f2 = function(t) pi * sin(pi * t)
f3 = function(t) 8 * t^3
f4 = function(t) 4/ (exp(1) - 1) * exp(t)
}
if(response == "regression"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(response == "count"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) + .4
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 + .6
}
if(response == "survival"){
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
}
if(missing(response))
type = "classification"
response = match.arg(response)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.8
if(missing(SNR)) SNR = 8
if(p <= 5) stop("dimension size should be larger than 5.")
# Sigma = matrix(rho, 4, 4)
# diag(Sigma) = 1
# Sigma = matrix(1, 4, 4)
# for(j in 1:4){
#   for(k in 1:4){
#     Sigma[j, k] = rho^abs(j-k)
#   }
# }
# x = apply(rmvnorm(n, sigma = Sigma), 2, rescale)
t = 2
pp = ifelse(response == "survival", 4, 4)
x = matrix(0, n, pp)
W = matrix(runif(n * pp), n, pp)
U = runif(n)
for(j in 1:pp){
x[, j] = (W[, j] + t * U)/(1 + t)
}
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(1,4))
# curve(f1, 0, 1)
# curve(f2, 0, 1)
# curve(f3, 0, 1)
# curve(f4, 0, 1)
# par(mfrow = c(1,1))
if(response == "regression"){
f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 3 * f3(x[,3]) + 6 * f4(x[,4])
V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(3 * f3(x[,3])) + var(6 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
print(sd/sqrt(p-4))
out = list(x = x, y = f)
}
if(response == "classification"){
# f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 4 * f3(x[,3]) + 5 * f4(x[,4])
# V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(4 * f3(x[,3])) + var(5 * f4(x[,4]))
f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4])
V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
e = rnorm(n, 0, sd)
f = f - 9 + e
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
# plot(prob)
# print(table(y))
out = list(x = x, f = f, y = y)
}
if(response == "count"){
f = f1(x[,1])/6 + f2(x[,2])/4 + f3(x[,3]) + f4(x[,4])
V_sig = var(f1(x[,1])/6) + var(f2(x[,2])/4) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
mu = exp(f)
y = rpois(n, mu)
out = list(x = x, f = f, y = y)
}
if(response == 'survival'){
# x = cbind(x, )
f = 1 * f1(x[,1]) + 2 * f2(x[,2]) + 3 * f3(x[,3]) + 6 * f4(x[,4])
V_sig = var(1 * f1(x[,1])) + var(2 * f2(x[,2])) + var(3 * f3(x[,3])) + var(6 * f4(x[,4]))
# f = 1 * x[, 1] + 3 * sin(2 * pi * x[, 2]) + 2 * (x[, 3] - 0.4)^2 + ifelse(x[, 4] < 0.7, 0, 1)
# V_sig = var(1 * x[, 1]) + var(3 * sin(2 * pi * x[, 2])) + var(2 * (x[, 3] - 0.4)^2) + 0.7 * 0.3 /n
print(V_sig)
sd = sqrt(V_sig / SNR)
e = rnorm(n, 0, sd)
f = f + e
# x_nois = apply(matrix(rnorm(n * (p-4), 0, sd/sqrt(p-4)), n, (p-4)), 2, rescale)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
out = list(x = x, f = f, y = y)
}
return(out)
}
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 3, response = "count")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 3, response = "count")
te_x = te$x
te_y = te$y
tr_y
fit3 = try(cdcosso(tr_x, tr_y, family = 'poisson', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-6}), log(2^{-4}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-6}), log(2^{-4}), length.out = 20))
), silent = TRUE)
fit3
