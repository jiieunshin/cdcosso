{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear") {
K = tcrossprod(x, y)
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam)
{
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for main effects
# if (type == "spline") {
#   # assign the number of anova kernels
#   numK = 2 * dimx
#   # list of kernel matrices
#   anova_kernel = vector(mode = "list", numK)
#   # list of kernel coordinate indices
#   kernelCoord = vector(mode = "list", numK)
#   index = 0
#
#   for (d in 1:dimx) {
#     index = index + 1
#     A = x[, d, drop = FALSE]
#     B = y[, d, drop = FALSE]
#     K_temp = spline_kernel(A, B)
#     anova_kernel[[index]] = K_temp$K1
#     kernelCoord[[index]] = paste("x", d, " linear", sep="")
#     index = index + 1
#     anova_kernel[[index]] = K_temp$K2
#     kernelCoord[[index]] = paste("x", d, " smooth", sep="")
#   }
#
# } else if (type == 'spline2') {
#   numK = (2 * dimx) + (2 * dimx * (2 * dimx - 1) / 2 - dimx)
#   anova_kernel = vector(mode = "list", numK)
#   kernelCoord = vector(mode = "list", numK)
#   index = 0
#   # main effects
#   for (d in 1:dimx) {
#     index = index + 1
#     A = x[, d, drop = FALSE]
#     B = y[, d, drop = FALSE]
#     K_temp = spline_kernel(A, B)
#     anova_kernel[[index]] = K_temp$K1
#     kernelCoord[[index]] = paste("x", d, " linear", sep = "")
#     index = index + 1
#     anova_kernel[[index]] = K_temp$K2
#     kernelCoord[[index]] = paste("x", d, " smooth", sep = "")
#   }
#   # two-way interactions
#   for (i in 1:(dimx - 1)) {
#     for (j in (i + 1):dimx) {
#       index = index + 1
#       A_linear = as.matrix(anova_kernel[[2 * i - 1]])
#       A_smooth = as.matrix(anova_kernel[[2 * i]])
#       B_linear = as.matrix(anova_kernel[[2 * j - 1]])
#       B_smooth = as.matrix(anova_kernel[[2 * j]])
#       anova_kernel[[index]] = A_linear * B_linear
#       kernelCoord[[index]] = paste("x", i, " linear,", " x", j, " linear", sep = "")
#       index = index + 1
#       anova_kernel[[index]] = A_linear * B_smooth
#       kernelCoord[[index]] = paste("x", i, " linear,", " x", j, " smooth", sep = "")
#       index = index + 1
#       anova_kernel[[index]] = A_smooth * B_linear
#       kernelCoord[[index]] = paste("x", i, " smooth,", " x", j, " linear", sep = "")
#       index = index + 1
#       anova_kernel[[index]] = A_smooth * B_smooth
#       kernelCoord[[index]] = paste("x", i, " smooth,", " x", j, " smooth", sep = "")
#     }
#   }
# } else
if (type == "spline-t") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline-t2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
# is used to combine anova kernel matrices with weights determined by theta values. The default theta vector is the vector of ones.
combine_kernel = function(anova_kernel, theta = rep(1, anova_kernel$numK))
{
K = 0
for (d in 1:anova_kernel$numK) {
K = (K + theta[d] * anova_kernel$K[[d]])
}
return(K)
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
wsGram = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
KLD = function(y, fhat, obj){
if(obj$family == "gaussian") B = function(x) x
if(obj$family == "binomial") B = function(x) log(exp(x) + 1)
if(obj$family == "poisson") B = function(x) exp(x)
return(- y * fhat + B(fhat))
}
cdcosso.glm = function (x, y, wt, lambda0, lambda_theta, gamma, obj, nfolds, one.std, type, kparam, algo)
{
n = length(y)
d = length(wt)
par(mfrow = c(2,2))
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, rep(1, d)/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, sspline_cvfit$optlambda, lambda_theta, gamma, nfolds, obj, one.std, algo)
theta.new = rescale_theta(nng_fit$theta.new)
# solve (theta) - 2nd
sspline_cvfit = try({cv.sspline(x, y, theta.new/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo)}) ## 초기값 설정. 수정할 함수
par(mfrow = c(1,1))
if(algo == "CD")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
if(algo == "QP")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
class(out) = "cosso"
return(out)
}
# x = tr_x
# y = tr_y
# family = 'binomial'
# gamma = 0.8
# kernel = "spline"
# one.std = TRUE
# scale = T
# wt = rep(1, ncol(x))
# kparam = 1
# nfolds =5
cdcosso = function (x, y, family = c("gaussian", "binomial", "poisson", "negbin", "svm", "Cox"),
kernel = c("linear", "gaussian", "poly", "spline"), effect = c("main", "interaction"),
algo = c("CD", "QP"), wt = rep(1, ncol(x)),
kparam = 1, lambda0, lambda_theta, M, gamma = 0.3, nfolds = 5, one.std = TRUE, scale = TRUE, cpus)
{
n = nrow(x)
colnames(x) = NULL
rownames(x) = NULL
if(class(x)[1] == "data.frame")
x = matrix(unlist(x), nrow = n)
# family
family = match.arg(family)
if(family == "gaussian")
obj = gaussian()
if(family == "binomial")
obj =  binomial()
if(family == "poisson")
obj = poisson()
if(family == "negbin"){
link = poisson()$linkfun
# if(missing(init.disp)){
#   init.distp = NA
# }
obj = list(disp = NA, link = link)
}
if(missing(kernel))
type = 'spline'
else
type = match.arg(kernel)
if(missing(algo))
algo = "CD"
if(missing(effect))
effect = 'main'
else
effect = match.arg(kernel)
if(effect == "interaction") kernel = paste0(kernel, "2")
if(missing(lambda0)){
lambda0 = exp(seq(log(2^{-5}), log(2^{5}), length.out = 20))
}
if(missing(lambda_theta))
lambda_theta = exp(seq(log(2^{-5}), log(2^{5}), length.out = 20))
if (scale){   # min-max scale
x = apply(x, 2, rescale)
}
if (family == "Cox" & !all(match(c("time", "status"), dimnames(y)[[2]], 0))) {
stop("Cox model requires a matrix with columns 'time' and 'status' as a response")
}
objnm = ifelse(family == 'gaussian' | family == 'binomial' | family == 'poisson', 'glm', family)
# fitting
out = switch(objnm,
glm = cdcosso.glm(x, y, wt, lambda0, lambda_theta, gamma, obj, nfolds, one.std, type, kparam, algo),
Cox = cdcosso.cox(x, unlist(y[, "time"]), unlist(y[, "status"]), wt, lambda0, lambda_theta, gamma, nfolds, one.std, type, kparam, algo)
# Negbin, svm 추???
)
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "spline", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
fit10
cdcosso.glm = function (x, y, wt, lambda0, lambda_theta, gamma, obj, nfolds, one.std, type, kparam, algo)
{
n = length(y)
d = length(wt)
par(mfrow = c(2,2))
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, rep(1, d)/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, sspline_cvfit$optlambda, lambda_theta, gamma, nfolds, obj, one.std, algo)
theta.new = rescale_theta(nng_fit$theta.new)
print(nng_fit)
# solve (theta) - 2nd
sspline_cvfit = try({cv.sspline(x, y, theta.new/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo)}) ## 초기값 설정. 수정할 함수
par(mfrow = c(1,1))
if(algo == "CD")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
if(algo == "QP")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
class(out) = "cosso"
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "spline", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
cdcosso.glm = function (x, y, wt, lambda0, lambda_theta, gamma, obj, nfolds, one.std, type, kparam, algo)
{
n = length(y)
d = length(wt)
par(mfrow = c(2,2))
# solve (theta) - 1st
sspline_cvfit = cv.sspline(x, y, rep(1, d)/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo) ## 초기값 설정. 수정할 함수
# solve (b, c) - 1st
nng_fit = cv.nng(sspline_cvfit, x, y, wt, sspline_cvfit$optlambda, lambda_theta, gamma, nfolds, obj, one.std, algo)
theta.new = rescale_theta(nng_fit$theta.new)
# solve (theta) - 2nd
sspline_cvfit = try({cv.sspline(x, y, theta.new/wt^2, nfolds, lambda0, obj, one.std, type, kparam, algo)}) ## 초기값 설정. 수정할 함수
par(mfrow = c(1,1))
if(algo == "CD")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
if(algo == "QP")
out = list(data = list(x = x, y = y, R = sspline_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = sspline_cvfit,
theta_step = nng_fit,
object = obj,
algorithm = algo)
class(out) = "cosso"
return(out)
}
fit10
en1_pred = predict.cdcosso(fit10, te_x)
mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
# n = nrow(X)
# trainID = sample(1:n, size = floor(n * 0.7))
# testID = (1:n)[-trainID]
#
# tr_x = X[trainID, ]
# tr_y = y[trainID]
#
# te_x = X[testID, ]
# te_y = y[testID]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "spline", one.std = TRUE, scale = T, algo = "QP"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "spline", scale = T, one.std = TRUE, algo = "CD"), silent = TRUE)
})  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
time3[i] = t1[3]
en3_varsel[i] = sum(ifelse(fit3$theta_step$theta.new > 0, 1, 0))
en3_pred = predict.cdcosso(fit3, te_x)
en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new <= 0.5, 0, 1))
# en3_miss[i] = mean((te_y - en3_pred$mu.new)^2)
}
if(!(class(fit10) == 'try-error')){
time10[i] = t2[3]
en1_varsel[i] = sum(ifelse(fit10$theta_step$theta.new > 0, 1, 0))
en1_pred = predict.cdcosso(fit10, te_x)
en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new <= 0.5, 0, 1))
# en1_miss[i] = mean((te_y - en1_pred$mu.new)^2)
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_varsel, na.rm = TRUE), 4), "(", round(sd(en3_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_varsel, na.rm = TRUE), 4), "(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_varsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
fit10
### 실행 #######################################
devtools::install_github("jiieunshin/cdcosso")
library(cdcosso)
i=1
iter = 10
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
data <- read.table("C:/Users/jieun/Dropbox/저장용/heart+disease/processed.cleveland.data", sep = ",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data[data == "?"] <- NA
data <- na.omit(data)
# 변수 정리
data$cp1 <- ifelse(data$cp == 1, 1, 0)
data$cp2 <- ifelse(data$cp == 2, 1, 0)
data$cp3 <- ifelse(data$cp == 3, 1, 0)
data$cp <- NULL
data$restecg1 <- ifelse(data$restecg == 1, 1, 0)
data$restecg2 <- ifelse(data$restecg == 2, 1, 0)
data$restecg <- NULL
data$slope1 <- ifelse(data$slope == 1, 1, 0)
data$slope2 <- ifelse(data$slope == 2, 1, 0)
data$thal3 <- ifelse(data$thal == 3, 1, 0)
data$thal7 <- ifelse(data$thal == 7, 1, 0)
data$thal <- NULL
data$ca <- as.numeric(data$ca)
yid = which(colnames(data) == "num")
X = data[,-yid]
y = ifelse(data[,yid] == 0, 0, 1)
dim(data)
cat("\n iteration :", i, "\n")
set.seed(i)
split_id = train_test_split(y, 0.3)
tr_x = X[split_id$train_id,]
tr_y = y[split_id$train_id]
te_x = X[split_id$test_id,]
te_y = y[split_id$test_id]
