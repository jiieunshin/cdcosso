# n=200, score
plot(jitter(out$eps[out$n == 500]), jitter(out$score[out$n == 500]), lty = 1, type = 'o', col = 'black',
xlab = expression(tau), ylab = "power", ylim = c(0, 1), yaxs = "i", pch = 16,
main = bquote(tau == .(ifelse(tau_grid[pn] == 0.2, 0.2, tau_grid[pn])) ~ ", " ~ w == .(ifelse(ww == -1, -1, ww))))
# abline(h = 0.05, col = 'red')
# n=100, score
points(jitter(out$eps[out$n == 250]), jitter(out$score[out$n == 250]), lty = 2, type = 'o', lwd = 1, pch = 1, col = 'black')
# n=200, score
points(jitter(out$eps[out$n == 500]), jitter(out$score2[out$n == 500]), lty = 3, pch = 17, type = 'o', col = 'black')
# n=100, score
points(jitter(out$eps[out$n == 250]), jitter(out$score2[out$n == 250]), lty = 4, type = 'o', pch = 6, col = 'black')
# abline(h = 1, col = 'gray')
if(kk == 1)
legend("topleft", legend = c(bquote('n=500, bootstrap' ~ T[b]^"*"), bquote('n=250, bootstrap' ~ T[b]^"*"),
bquote('n=500, score' ~ T[b]^"+"), bquote('n=250, score' ~ T[b]^"+")),
col = c("black", "black", "black","black"), lty = c(1, 2, 3, 4), lwd = rep(1, 4),
pch = c(16, 1, 17, 6))
}
}
tiff('C:/Users/jieun/Dropbox/BZINB/zero-zero/graph/tau_const_power.tif', units = "px", res = 300, width = 828 * 3, height = 772 * 3)
# Set the outer margin
par(oma = c(0, 0, 0, 0))
par(mar = c(4, 4, 3, 1))
par(xpd=TRUE)
par(mfrow = c(2,2))
kk = 0
pn = 0
for(pp in tau_grid){
pn = pn + 1
for(ww in w_grid){
kk = kk + 1
out <- data.frame(n = rep(0, 12), eps = rep(0, 12), score = rep(0, 12))
# Score_mixed 결과
k = 0
for(ii in 1:48){
if(param_grid[ii, 2] == pp & param_grid[ii, 1] == ww){  ## tau1 조정
# cat("n =", param_grid[ii, 5], "tau1 =", param_grid[ii, 4], "tau2 =", param_grid[ii, 3], "w =", param_grid[ii, 1], '\n')
k = k + 1
out$n[k] <- param_grid[ii, 4]
out$eps[k] <- param_grid[ii, 3]
out$score[k] <- round(mean(con_boot_power[[ii]][[2]], na.rm = T), 3)
out$score2[k] <- round(mean(con_boot_power[[ii]][[1]] > 1.645), 3)
}
}
# if(ww == -1.5){
#   out_full <- out
# } else{
#   out_full <- rbind(out_full, out)
# }
print(out$score[1])
# 그림 그리기
# n=200, score
plot(jitter(out$eps[out$n == 500]), jitter(out$score[out$n == 500]), lty = 1, type = 'o', col = 'black',
xlab = expression(tau), ylab = "power", ylim = c(0, 1), yaxs = "i", pch = 16,
main = bquote(tau == .(ifelse(tau_grid[pn] == 0.2, 0.2, tau_grid[pn])) ~ ", " ~ w == .(ifelse(ww == -1, -1, ww))))
# abline(h = 0.05, col = 'red')
# n=100, score
points(jitter(out$eps[out$n == 250]), jitter(out$score[out$n == 250]), lty = 2, type = 'o', lwd = 1, pch = 1, col = 'black')
# n=200, score
points(jitter(out$eps[out$n == 500]), jitter(out$score2[out$n == 500]), lty = 3, pch = 17, type = 'o', col = 'black')
# n=100, score
points(jitter(out$eps[out$n == 250]), jitter(out$score2[out$n == 250]), lty = 4, type = 'o', pch = 6, col = 'black')
# abline(h = 1, col = 'gray')
if(kk == 1)
legend("topleft", legend = c(bquote('n=500, bootstrap' ~ T[c]), bquote('n=250, bootstrap' ~ T[c]^"*"),
bquote('n=500, score' ~ T[c]), bquote('n=250, score' ~ T[c]^"+")),
col = c("black", "black", "black","black"), lty = c(1, 2, 3, 4), lwd = rep(1, 4),
pch = c(16, 1, 17, 6))
}
}
dev.off()
legend("bottomleft", legend = c(bquote('n=500, bootstrap' ~ T[c]), bquote('n=250, bootstrap' ~ T[c]^"*"),
bquote('n=500, score' ~ T[c]), bquote('n=250, score' ~ T[c]^"+")),
col = c("black", "black", "black","black"), lty = c(1, 2, 3, 4), lwd = rep(1, 4),
pch = c(16, 1, 17, 6))
tiff('C:/Users/jieun/Dropbox/BZINB/zero-zero/graph/tau_const_power.tif', units = "px", res = 300, width = 828 * 3, height = 772 * 3)
# Set the outer margin
par(oma = c(0, 0, 0, 0))
par(mar = c(4, 4, 3, 1))
par(xpd=TRUE)
par(mfrow = c(2,2))
kk = 0
pn = 0
for(pp in tau_grid){
pn = pn + 1
for(ww in w_grid){
kk = kk + 1
out <- data.frame(n = rep(0, 12), eps = rep(0, 12), score = rep(0, 12))
# Score_mixed 결과
k = 0
for(ii in 1:48){
if(param_grid[ii, 2] == pp & param_grid[ii, 1] == ww){  ## tau1 조정
# cat("n =", param_grid[ii, 5], "tau1 =", param_grid[ii, 4], "tau2 =", param_grid[ii, 3], "w =", param_grid[ii, 1], '\n')
k = k + 1
out$n[k] <- param_grid[ii, 4]
out$eps[k] <- param_grid[ii, 3]
out$score[k] <- round(mean(con_boot_power[[ii]][[2]], na.rm = T), 3)
out$score2[k] <- round(mean(con_boot_power[[ii]][[1]] > 1.645), 3)
}
}
# if(ww == -1.5){
#   out_full <- out
# } else{
#   out_full <- rbind(out_full, out)
# }
print(out$score[1])
# 그림 그리기
# n=200, score
plot(jitter(out$eps[out$n == 500]), jitter(out$score[out$n == 500]), lty = 1, type = 'o', col = 'black',
xlab = expression(tau), ylab = "power", ylim = c(0, 1), yaxs = "i", pch = 16,
main = bquote(tau == .(ifelse(tau_grid[pn] == 0.2, 0.2, tau_grid[pn])) ~ ", " ~ w == .(ifelse(ww == -1, -1, ww))))
# abline(h = 0.05, col = 'red')
# n=100, score
points(jitter(out$eps[out$n == 250]), jitter(out$score[out$n == 250]), lty = 2, type = 'o', lwd = 1, pch = 1, col = 'black')
# n=200, score
points(jitter(out$eps[out$n == 500]), jitter(out$score2[out$n == 500]), lty = 3, pch = 17, type = 'o', col = 'black')
# n=100, score
points(jitter(out$eps[out$n == 250]), jitter(out$score2[out$n == 250]), lty = 4, type = 'o', pch = 6, col = 'black')
# abline(h = 1, col = 'gray')
if(kk == 1)
legend("bottomright", legend = c(bquote('n=500, bootstrap' ~ T[c]), bquote('n=250, bootstrap' ~ T[c]^"*"),
bquote('n=500, score' ~ T[c]), bquote('n=250, score' ~ T[c]^"+")),
col = c("black", "black", "black","black"), lty = c(1, 2, 3, 4), lwd = rep(1, 4),
pch = c(16, 1, 17, 6))
}
}
dev.off()
tiff('C:/Users/jieun/Dropbox/BZINB/zero-zero/graph/tau_const_power.tif', units = "px", res = 300, width = 828 * 3, height = 772 * 3)
# Set the outer margin
par(oma = c(0, 0, 0, 0))
par(mar = c(4, 4, 3, 1))
par(xpd=TRUE)
par(mfrow = c(2,2))
kk = 0
pn = 0
for(pp in tau_grid){
pn = pn + 1
for(ww in w_grid){
kk = kk + 1
out <- data.frame(n = rep(0, 12), eps = rep(0, 12), score = rep(0, 12))
# Score_mixed 결과
k = 0
for(ii in 1:48){
if(param_grid[ii, 2] == pp & param_grid[ii, 1] == ww){  ## tau1 조정
# cat("n =", param_grid[ii, 5], "tau1 =", param_grid[ii, 4], "tau2 =", param_grid[ii, 3], "w =", param_grid[ii, 1], '\n')
k = k + 1
out$n[k] <- param_grid[ii, 4]
out$eps[k] <- param_grid[ii, 3]
out$score[k] <- round(mean(con_boot_power[[ii]][[2]], na.rm = T), 3)
out$score2[k] <- round(mean(con_boot_power[[ii]][[1]] > 1.645), 3)
}
}
# if(ww == -1.5){
#   out_full <- out
# } else{
#   out_full <- rbind(out_full, out)
# }
print(out$score[1])
# 그림 그리기
# n=200, score
plot(jitter(out$eps[out$n == 500]), jitter(out$score[out$n == 500]), lty = 1, type = 'o', col = 'black',
xlab = expression(tau), ylab = "power", ylim = c(0, 1), yaxs = "i", pch = 16,
main = bquote(tau == .(ifelse(tau_grid[pn] == 0.2, 0.2, tau_grid[pn])) ~ ", " ~ w == .(ifelse(ww == -1, -1, ww))))
# abline(h = 0.05, col = 'red')
# n=100, score
points(jitter(out$eps[out$n == 250]), jitter(out$score[out$n == 250]), lty = 2, type = 'o', lwd = 1, pch = 1, col = 'black')
# n=200, score
points(jitter(out$eps[out$n == 500]), jitter(out$score2[out$n == 500]), lty = 3, pch = 17, type = 'o', col = 'black')
# n=100, score
points(jitter(out$eps[out$n == 250]), jitter(out$score2[out$n == 250]), lty = 4, type = 'o', pch = 6, col = 'black')
# abline(h = 1, col = 'gray')
if(kk == 4)
legend("topleft", legend = c(bquote('n=500, bootstrap' ~ T[c]), bquote('n=250, bootstrap' ~ T[c]^"*"),
bquote('n=500, score' ~ T[c]), bquote('n=250, score' ~ T[c]^"+")),
col = c("black", "black", "black","black"), lty = c(1, 2, 3, 4), lwd = rep(1, 4),
pch = c(16, 1, 17, 6))
}
}
dev.off()
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
n = 100
te_n = 1000
p_sig = 5
p = 100
out = matrix(0, 16, 14)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "test", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
n = 100
te_n = 1000
p_sig = 5
p = 200
out = matrix(0, 16, 13)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# for(nb in c(12, 25, 50, 100)){
iter = 10
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 1, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = F, algo = "CD",
lambda0 = exp(seq(log(2^{-20}), log(2^{10}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-20}), log(2^{10}), length.out = 20))), silent = TRUE)
x = tr_x
y = tr_y
family = 'Cox'
gamma = 0.8
type = "spline"
one.std = TRUE
scale = T
wt = rep(1, ncol(x))
kparam = 1
nfolds =5
algo = "CD"
lambda0 = exp(seq(log(2^{-6}), log(2^{6}), length.out = 20))
lambda_theta = exp(seq(log(2^{-6}), log(2^{6}), length.out = 20))
make_kernel = function (x, y, type)
{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
cat_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
n1 <- length(x)
n2 <- length(y)
x <- rep(x, times = n2)
y <- rep(y, each = n1)
L <- length(unique(c(x, y)))
K <- matrix(L * (x == y) - 1, n1, n2)
return(K)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly" | type == "poly2") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline" | type == "spline2") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear" | type == "linear2") {
K = tcrossprod(x, y)
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam, scale)
{
# if (length(unique(c(A, B))) <= 6)
#   K_temp <- cat_kernel(A, B)
# else K_temp <- spline_kernel(A, B)
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for two-way interactions
if (type == "spline") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[d]] = K_temp
} else{
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
return(IDmat)
}
n = length(y)
p = length(wt)
cat("fit COSSO  with n = ", n, "p =", ncol(x), "\n")
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
cat("kernel:", type, "and d =", d, "\n")
cand.lambda = lambda0
mscale = wt
obj = gaussian()
cat("-- c-step -- \n")
cat("proceeding... \n")
d = K$numK
n <- length(y)
len = length(cand.lambda)
R = array(NA, c(n, n, d))
for(j in 1:d){
R[, , j] = K$K[[j]]
}
Rtheta <- combine_kernel(R, mscale)
# initialize
f.init = rep(0.5, n)
ff = f.init
mu = obj$linkinv(ff)
w = obj$variance(mu)
z = ff + (y - mu) / w
#
fold = cvsplitID(n, 5)
measure <- matrix(NA, 5, len)
f=1
if(obj$family != "binomial"){
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
m = length(tr_id)
} else{
}
tr_R = array(NA, c(m, n, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, ]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(n-m, n, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, ]
}
te_Rtheta <- combine_kernel(te_R, mscale)
#
zw = z[tr_id] * sqrt(w[tr_id])
Rw = tr_Rtheta * w[tr_id]
sw = sqrt(w)[tr_id]
Rw2 = Rtheta * w
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = 'gaussian', lambda = cand.lambda[k])$beta)
cw = c.init / sqrt(w)
f=k=1
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = 'gaussian', lambda = cand.lambda[k])$beta)
cw = c.init / sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, m, n, cand.lambda[k], PACKAGE = "cdcosso")
b.new = fit$b.new
cw.new = fit$cw.new
c.new = cw.new * sqrt(w)
fit
# validation
testfhat = c(b.new + te_Rtheta %*% c.new)
init
c.init
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = 'gaussian', lambda = 1e-4)$beta)
c.init
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = 'gaussian', lambda = 1e-4)$beta)
cw = c.init / sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, m, n, cand.lambda[k], PACKAGE = "cdcosso")
fit
c.init = as.vector(glmnet(tr_Rtheta, y[tr_id], family = 'gaussian', lambda = cand.lambda[k])$beta)
c.init
cw = c.init / sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rw2, cw, sw, m, n, cand.lambda[k], PACKAGE = "cdcosso")
fit
tr_Rtheta %*% c.init
(tr_Rtheta %*% c.init) * w
(tr_Rtheta %*% c.init) * w[tr_id]
sum((tr_Rtheta %*% c.init) * w[tr_id]) / sum(w[tr_id])
w
