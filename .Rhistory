en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(KLD(te_y, en1_pred$f.new, poisson()))
en1_miss[i] = mean(poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_time[i] = mean(t2)
}
}
fit10
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
tr = data_generation(n, p, SNR = 3, response = "count")
tr_x = tr$x
tr_y = tr$y
tr_y
fit3 = try(cdcosso(tr_x, tr_y, family = 'poisson', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-2}), log(2^{1}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-4}), log(2^{2}), length.out = 20))
), silent = TRUE)
fit3
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
tr = data_generation(n, p, SNR = 3, response = "regression")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-4}), log(2^{-2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-2}), log(2^{1}), length.out = 20))
), silent = TRUE)
fit3
tr_y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-8}), log(2^{-2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-2}), log(2^{1}), length.out = 20))
), silent = TRUE)
x = tr_x
n = length(y)
p = length(wt)
make_kernel = function (x, y, type)
{
n1 <- nrow(x)
n2 <- nrow(y)
d <- ncol(x)
K <- array(0, c(n1, n2, d))
for (j in 1:d) {
K[, , j] <- kernelMatrix(x, y, type)
}
return(K)
}
spline_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
K1x = (x - 1 / 2)
K1y = (y - 1 / 2)
K2x = (K1x^2 - 1 / 12) / 2
K2y = (K1y^2 - 1 / 12) / 2
ax = x %x% matrix(1, 1, nrow(y))
ay = y %x% matrix(1, 1, nrow(x))
b = abs(ax - t(ay))
K1 = K1x %x% t(K1y)
K2 = K2x %x% t(K2y) - ((b - 1 / 2)^4 - (b - 1 / 2)^2 / 2 + 7 / 240) / 24
list(K1 = K1, K2 = K2)
}
cat_kernel = function(x, y)
{
x = as.matrix(x)
y = as.matrix(y)
n1 <- length(x)
n2 <- length(y)
x <- rep(x, times = n2)
y <- rep(y, each = n1)
L <- length(unique(c(x, y)))
K <- matrix(L * (x == y) - 1, n1, n2)
return(K)
}
kernelMatrix = function(x, y, type, kparam = 1.0) {
x = as.matrix(x)
y = as.matrix(y)
p = ncol(x)
if (ncol(x) == 0) {
x = matrix(0, nrow = nrow(x), ncol = 1)
}
if (ncol(y) == 0) {
y = matrix(0, nrow = nrow(y), ncol = 1)
}
if (type == "poly" | type == "poly2") {
K = (x %*% t(y) + 1.0)^kparam
}
if(type == "gaussian" | type == "gaussian2") {
normx = rowSums(x^2)
normy = rowSums(y^2)
temp = x %*% t(y)
temp = (-2.0 * temp) + outer(normx, rep(1.0, nrow(y)), "*") + outer(rep(1.0, nrow(x)), normy, "*")
K = exp(-temp * kparam)
# obj = kernelMatrix(rbfdot(sigma = kparam), x, y)
}
if (type == "spline" | type == "spline2") {
K = 0
for (d in 1:p) {
K_temp = spline_kernel(x[, d, drop = FALSE], y[, d, drop = FALSE])
K = K + K_temp$K1 + K_temp$K2
}
}
if (type == "linear" | type == "linear2") {
K = tcrossprod(x, y)
}
return(K)
}
make_anovaKernel = function(x, y, type, kparam, scale)
{
# if (length(unique(c(A, B))) <= 6)
#   K_temp <- cat_kernel(A, B)
# else K_temp <- spline_kernel(A, B)
x = as.matrix(x)
y = as.matrix(y)
dimx = ncol(x)
# calculate anova kernels for two-way interactions
if (type == "spline") {
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
} else if (type == 'spline2') {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
K_temp = spline_kernel(A, B)
anova_kernel[[index]] = (K_temp$K1 + K_temp$K2)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[d]] = K_temp
} else{
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds, y, family)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
if(family != "binomial"){
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
}
if(family == "binomial"){
if(is.null(y)) stop("The input of y is essential.")
# Separate indices for 0s and 1s
idx_0 <- which(y == 0)
idx_1 <- which(y == 1)
n0 <- length(idx_0)
n1 <- length(idx_1)
# Compute fold sizes for each class
fsize_0 <- floor(n0 / folds)
fsize_1 <- floor(n1 / folds)
splits_0 <- fsize_0 * rep(1, folds)
splits_1 <- fsize_1 * rep(1, folds)
nextra_0 <- n0 - folds * fsize_0
nextra_1 <- n1 - folds * fsize_1
if (nextra_0 > 0) splits_0[1:nextra_0] <- splits_0[1:nextra_0] + 1
if (nextra_1 > 0) splits_1[1:nextra_1] <- splits_1[1:nextra_1] + 1
randid_0 <- sample(idx_0, n0)
randid_1 <- sample(idx_1, n1)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n / folds))
# Assign 0s and 1s to folds
for (i in 1:folds) {
if(i == 1){
tempid_0 <- randid_0[1:(cumsum(splits_0)[i])]
tempid_1 <- randid_1[1:(cumsum(splits_1)[i])]
} else{
tempid_0 <- randid_0[(cumsum(splits_0)[i - 1] + 1):(cumsum(splits_0)[i])]
tempid_1 <- randid_1[(cumsum(splits_1)[i - 1] + 1):(cumsum(splits_1)[i])]
}
tempid <- c(tempid_0, tempid_1)
length(tempid) <- ceiling(n / folds)
IDmat[, i] <- tempid
}
}
return(IDmat)
}
KL = function(f, mu, obj){
if(obj$family == "gaussian") B = f^2/2
if(obj$family == "binomial") B = log(1 + exp(f))
if(obj$family == "poisson") B = exp(f)
return(mean(-(mu * f) + B))
}
n = length(y)
p = length(wt)
cat("fit COSSO  with n = ", n, "p =", ncol(x), "\n")
x = tr_x
tr = data_generation(n, p, SNR = 3, response = "regression")
tr_x = tr$x
tr_y = tr$y
tr_y
tr = data_generation(n, p, SNR = 3, response = "regression")
n = 200
te_n = 1000
p_sig = 4
p = 160
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
tr = data_generation(n, p, SNR = 3, response = "regression")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 3, response = "regression")
te_x = te$x
te_y = te$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'gaussian', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-8}), log(2^{-2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-2}), log(2^{1}), length.out = 20))
), silent = TRUE)
x = tr_x
y = tr_y
obj = binomial()
gamma = 1
type = "spline"
one.std = TRUE
scale = T
wt = rep(1, ncol(x))
kparam = 1
nfolds =5
algo = "CD"
lambda0 = exp(seq(log(2^{-6}), log(2^{2}), length.out = 20))
lambda_theta = exp(seq(log(2^{-6}), log(2^{2}), length.out = 20))
n = length(y)
p = length(wt)
cat("fit COSSO  with n = ", n, "p =", ncol(x), "\n")
nbasis = max(40, ceiling(12 * n^(2/9)))
basis.id = sort(sample(1:n, nbasis))
nbasis = as.integer(nbasis)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
cand.lambda = lambda0
mscale = wt
obj = binomial()
cat("-- c-step -- \n")
cat("proceeding... \n")
d = K$numK
n <- length(y)
len = length(cand.lambda)
R = array(NA, c(n, nbasis, d))
for(j in 1:d){
R[, , j] = K$K[[j]][, basis.id]
}
Rtheta <- combine_kernel(R, mscale)
R2 = array(NA, c(nbasis, nbasis, d))
for(j in 1:d){
R2[, , j] = K$K[[j]][basis.id, basis.id]
}
Rtheta2 <- combine_kernel(R2, mscale)
Rtheta2
f=k=1
fold = cvsplitID(n, 5, y, family = obj$family)
measure <- matrix(NA, 5, len)
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, nbasis, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, basis.id]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, nbasis, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, basis.id]
}
te_Rtheta <- combine_kernel(te_R, mscale)
# initialize
EigRtheta2 = eigen(Rtheta2)
loop = 0
loop = loop + 1
Rtheta2 = Rtheta2 + 1e-08 * diag(nbasis)
EigRtheta2 = eigen(Rtheta2)
EigRtheta2$values[EigRtheta2$values < 0] = 1e-08
pseudoX = Rtheta %*% EigRtheta2$vectors %*% diag(sqrt(1/EigRtheta2$values))
pseudoX
c.init = as.vector(glmnet(pseudoX, y, family = obj$family, lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
c.init
pseudoX
y
cand.lambda[k]
c.init = as.vector(glmnet(Rtheta, y, family = obj$family, lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
c.init
family
obj
obj = gaussian()
c.init = as.vector(glmnet(Rtheta, y, family = obj$family, lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
c.init
c.init = as.vector(glmnet(pseudoX, y, family = obj$family, lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
c.init
for (k in 1:len){
c.init = as.vector(glmnet(pseudoX, y, family = obj$family, lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
# cw = c.init / sqrt(w)[basis.id]
ff = tr_Rtheta %*% c.init
mu = obj$linkinv(ff)
w = as.vector(obj$variance(mu))
z = ff + (y[tr_id] - mu) / w
zw = z * sqrt(w)
Rw = tr_Rtheta * w
sw = sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rtheta2, c.init, sw, tr_n, nbasis, tr_n * cand.lambda[k], PACKAGE = "cdcosso")
b.new = fit$b.new
c.new = fit$cw.new
# c.new = cw.new * sqrt(w)[basis.id]
# cat("R calculate:", sum(zw - Rw %*% cw.new) / sum(sw), "\n")
# cat("C calculate:", b.new, "\n")
# validation
testfhat = c(b.new + te_Rtheta %*% c.new)
testmu = obj$linkinv(testfhat)
# if(obj$family == "gaussian") measure[f, k] <- mean((testfhat - y[te_id])^2)
# if(obj$family == "binomial") measure[f, k] <- mean(y[te_id] != ifelse(testmu < 0.5, 0, 1))
# if(obj$family == "poisson") measure[f, k] <- mean(poisson()$dev.resids(y[te_id], testmu, rep(1, te_n)))
measure[f, k] <- KL(testfhat, te_Rtheta %*% c.new, obj)
}
fit
c.init = as.vector(glmnet(Rtheta, y, family = obj$family, lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
ff = tr_Rtheta %*% c.init
mu = obj$linkinv(ff)
w = as.vector(obj$variance(mu))
z = ff + (y[tr_id] - mu) / w
zw = z * sqrt(w)
Rw = tr_Rtheta * w
sw = sqrt(w)
sw
Rw
zw
ff
c.init
tr_Rtheta
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, nbasis, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, basis.id]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, nbasis, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, basis.id]
}
te_Rtheta <- combine_kernel(te_R, mscale)
# initialize
EigRtheta2 = eigen(Rtheta2)
loop = 0
te_Rtheta
combine_kernel(te_R, mscale)
combine_kernel(tr_R, mscale)
length(te_id)
tr_id
fold
fold = cvsplitID(n, 5, y, family = obj$family)
measure <- matrix(NA, 5, len)
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, nbasis, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, basis.id]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, nbasis, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, basis.id]
}
te_Rtheta <- combine_kernel(te_R, mscale)
# initialize
EigRtheta2 = eigen(Rtheta2)
loop = 0
while (min(EigRtheta2$values) < 0 & loop < 10) {
loop = loop + 1
Rtheta2 = Rtheta2 + 1e-08 * diag(nbasis)
EigRtheta2 = eigen(Rtheta2)
}
if (loop == 10)
EigRtheta2$values[EigRtheta2$values < 0] = 1e-08
pseudoX = Rtheta %*% EigRtheta2$vectors %*% diag(sqrt(1/EigRtheta2$values))
c.init = as.vector(glmnet(Rtheta, y, family = obj$family, lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
ff = tr_Rtheta %*% c.init
mu = obj$linkinv(ff)
w = as.vector(obj$variance(mu))
z = ff + (y[tr_id] - mu) / w
zw = z * sqrt(w)
Rw = tr_Rtheta * w
sw = sqrt(w)
fit = .Call("glm_c_step", zw, Rw, Rtheta2, c.init, sw, tr_n, nbasis, tr_n * cand.lambda[k], PACKAGE = "cdcosso")
fit
