kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else if (type == "gaussian2") {
numK = dimx + dimx * (dimx - 1) / 2
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
index = 0
for (d in 1:dimx) {
index = index + 1
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[index]] = K_temp
} else{
anova_kernel[[index]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[index]] = paste("x", d, sep = "")
}
for (i in 1:(dimx - 1)) {
for (j in (i + 1):dimx) {
index = index + 1
A = anova_kernel[[i]]
B = anova_kernel[[j]]
anova_kernel[[index]] = A * B
kernelCoord[[index]] = paste("x", i, " x", j, sep = "")
}
}
} else { # calculate anova kernels for main effects
numK = dimx
anova_kernel = vector(mode = "list", numK)
kernelCoord = vector(mode = "list", numK)
for (d in 1:dimx) {
A = x[, d, drop = FALSE]
B = y[, d, drop = FALSE]
if (length(unique(c(A, B))) <= 6){
K_temp <- cat_kernel(A, B)
anova_kernel[[d]] = K_temp
} else{
anova_kernel[[d]] = kernelMatrix(A, B, type, kparam)
}
kernelCoord[[d]] = paste("x", d, sep = "")
}
}
return(list(x = x, K = anova_kernel, coord = kernelCoord, numK = numK, kernel = type, kparam = kparam))
}
rescale = function (x)
{
if (length(unique(x)) > 6)
return((x - min(x))/(max(x) - min(x)))
else return(x)
}
combine_kernel = function (Gramat, mscale)
{
n1 <- dim(Gramat)[1]
n2 <- dim(Gramat)[2]
d <- dim(Gramat)[3]
KK <- matrix(0, n1, n2)
for (j in 1:d) KK = KK + mscale[j] * Gramat[, , j]
return(KK)
}
rescale_theta = function (x)
{
d = length(x)
if(sum(x == 0) == d) x = rep(1e-10, d)
return(x)
}
cvsplitID = function (n, folds, y, family)
{
fsize <- floor(n/folds)
splits <- fsize * rep(1, folds)
nextra <- n - folds * fsize
if (nextra > 0) {
splits[1:nextra] <- splits[1:nextra] + 1
}
if(family != "binomial"){
randid <- sample(1:n, n)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n/folds))
IDmat[, 1] <- randid[1:splits[1]]
for (i in 2:folds) {
tempid <- randid[(cumsum(splits)[i - 1] + 1):(cumsum(splits)[i])]
length(tempid) <- ceiling(n/folds)
IDmat[, i] <- tempid
}
}
if(family == "binomial"){
if(is.null(y)) stop("The input of y is essential.")
# Separate indices for 0s and 1s
idx_0 <- which(y == 0)
idx_1 <- which(y == 1)
n0 <- length(idx_0)
n1 <- length(idx_1)
# Compute fold sizes for each class
fsize_0 <- floor(n0 / folds)
fsize_1 <- floor(n1 / folds)
splits_0 <- fsize_0 * rep(1, folds)
splits_1 <- fsize_1 * rep(1, folds)
nextra_0 <- n0 - folds * fsize_0
nextra_1 <- n1 - folds * fsize_1
if (nextra_0 > 0) splits_0[1:nextra_0] <- splits_0[1:nextra_0] + 1
if (nextra_1 > 0) splits_1[1:nextra_1] <- splits_1[1:nextra_1] + 1
randid_0 <- sample(idx_0, n0)
randid_1 <- sample(idx_1, n1)
IDmat <- matrix(NA, ncol = folds, nrow = ceiling(n / folds))
# Assign 0s and 1s to folds
for (i in 1:folds) {
if(i == 1){
tempid_0 <- randid_0[1:(cumsum(splits_0)[i])]
tempid_1 <- randid_1[1:(cumsum(splits_1)[i])]
} else{
tempid_0 <- randid_0[(cumsum(splits_0)[i - 1] + 1):(cumsum(splits_0)[i])]
tempid_1 <- randid_1[(cumsum(splits_1)[i - 1] + 1):(cumsum(splits_1)[i])]
}
tempid <- c(tempid_0, tempid_1)
length(tempid) <- ceiling(n / folds)
IDmat[, i] <- tempid
}
}
return(IDmat)
}
KL = function(f, mu, obj){
if(obj$family == "gaussian") B = f^2/2
if(obj$family == "binomial") B = log(1 + exp(f))
if(obj$family == "poisson") B = exp(f)
return(mean(-(mu * f) + B))
}
# time = unlist(tr_y[, "time"])
# status = unlist(tr_y[, "status"])
# type = "spline"
# algo = "CD"
# family = 'Cox'
# gamma = 0.95
# kparam=1
# lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
# lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
#  wt = rep(1, ncol(x))
cdcosso.cox = function (x, time, status, nbasis, basis.id, wt, lambda0, lambda_theta, gamma, type, kparam, scale)
{
n = length(time)
p = length(wt)
# cat("fit COSSO  with n = ", n, "p =", p, "\n")
if (missing(nbasis) & missing(basis.id)) {
nbasis = max(40, ceiling(12 * n^(2/9)))
basis.id = sort(sample(1:n, nbasis))
}
if (missing(nbasis) & !missing(basis.id))
nbasis <- length(basis.id)
if (!missing(nbasis) & missing(basis.id))
basis.id <- sort(sample(1:n, nbasis))
nbasis = as.integer(nbasis)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
# cat("kernel:", type, "and d =", d, "\n")
par(mfrow = c(1,3))
# solve c (1st)
getc_cvfit = cv.getc.subset(K, time, status, nbasis, basis.id, rep(1, d)/wt^2, lambda0, type, kparam, one.std = TRUE, show = TRUE)
# solve theta (1st)
theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam)
# solve c (2nd)
theta.new = rescale_theta(theta_cvfit$theta.new)
# print(theta.new)
getc_cvfit = cv.getc.subset(K, time, status, nbasis, basis.id, theta.new/wt^2, lambda0, type, kparam, one.std = FALSE, show = TRUE)
# solve theta (2nd)
# theta_cvfit = cv.gettheta(getc_cvfit, x, time, status, wt, getc_cvfit$optlambda, lambda_theta, gamma, type, kparam)
par(mfrow = c(1,1))
out = list(data = list(x = x, time = time, status = status, RiskSet = RiskSet(time, status), R = getc_cvfit$R, kernel = type, kparam = kparam),
tune = list(lambda0 = lambda0, lambda_theta = lambda_theta, gamma = gamma),
c_step = getc_cvfit,
theta_step = theta_cvfit,
family = "Cox")
return(out)
}
# gamma = 1
# type = "spline"
# one.std = TRUE
# scale = T
# wt = rep(1, ncol(x))
# kparam = 1
# nfolds =5
# algo = "CD"
# lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
# lambda_theta = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
cdcosso = function (x,
y,
family = c("gaussian", "binomial", "poisson", "Cox"),
nbasis, basis.id,
kernel = c("linear", "gaussian", "poly", "spline"),
effect = c("main", "interaction"),
kparam = 1,
lambda0 = exp(seq(log(2^{-6}), log(2^{2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-6}), log(2^{2}), length.out = 20)),
gamma = 0.95, scale = TRUE)
{
n = nrow(x)
colnames(x) = NULL
rownames(x) = NULL
# if(class(x)[1] != "data.frame")
# stop("A input x must be matrix")
# family
family = match.arg(family)
if(family == "gaussian")
obj = gaussian()
if(family == "binomial")
obj =  binomial()
if(family == "poisson")
obj = poisson()
if(missing(kernel))
type = 'spline'
else
type = match.arg(kernel)
if(missing(effect))
effect = 'main'
else
effect = match.arg(kernel)
if(effect == "interaction") kernel = paste0(kernel, "2")
# if(missing(lambda0))
#   lambda0 = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
#
# if(missing(lambda_theta))
#   lambda_theta = exp(seq(log(2^{-11}), log(2^{2}), length.out = 20))
if (family == "Cox" & !all(match(c("time", "status"), dimnames(y)[[2]], 0))) {
stop("Cox model requires a matrix with columns 'time' and 'status' as a response")
}
objnm = ifelse(family == 'gaussian' | family == 'binomial' | family == 'poisson', 'glm', family)
wt = rep(1, ncol(x))
# fitting
out = switch(objnm,
glm = cdcosso.glm(x, y, wt, nbasis, basis.id, lambda0, lambda_theta, gamma, obj, type, kparam, scale),
Cox = cdcosso.cox(x, unlist(y[, "time"]), unlist(y[, "status"]), nbasis, basis.id, wt, lambda0, lambda_theta, gamma, type, kparam, scale)
# Negbin, svm ì¶”???
)
attr(out, "class") = "cdcosso"
return(out)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, nbasis = n/2,
lambda0 = exp(seq(log(2^{-8}), log(2^{-4}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-4}), length.out = 20))
), silent = TRUE)
fit10
library(MASS)
fit10 = try(cdcosso(tr_x, tr_y, family = 'Cox', gamma = 0.95, kernel = "spline", scale = T, nbasis = n/2,
lambda0 = exp(seq(log(2^{-8}), log(2^{-4}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-4}), length.out = 20))
), silent = TRUE)
fit10
x = tr_x
time = unlist(tr_y[, "time"])
status = unlist(tr_y[, "status"])
type = "spline"
algo = "CD"
family = 'Cox'
gamma = 0.95
kparam=1
lambda0 = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
lambda_theta = exp(seq(log(2^{-10}), log(2^{10}), length.out = 20))
wt = rep(1, ncol(x))
n = length(time)
p = length(wt)
nbasis = max(40, ceiling(12 * n^(2/9)))
basis.id = sort(sample(1:n, nbasis))
nbasis = as.integer(nbasis)
K = make_anovaKernel(x, x, type = type, kparam, scale)
d = K$numK
mscale = wt
cand.lambda = lambda0
d = K$numK
n <- length(status)
len = length(cand.lambda)
R = array(NA, c(n, nbasis, d))
for(j in 1:d){
R[, , j] = K$K[[j]][, basis.id]
}
Rtheta <- combine_kernel(R, mscale)
R2 = array(NA, c(nbasis, nbasis, d))
for(j in 1:d){
R2[, , j] = K$K[[j]][basis.id, basis.id]
}
Rtheta2 <- combine_kernel(R2, mscale)
fold = cvsplitID(n, 5, status, family = "gaussian")
measure <- matrix(NA, 5, len)
f=k=1
tr_id = as.vector(fold[, -f])
te_id = fold[, f]
tr_id = tr_id[!is.na(tr_id)]
te_id = te_id[!is.na(te_id)]
tr_n = length(tr_id)
te_n = length(te_id)
tr_R = array(NA, c(tr_n, nbasis, d))
for(j in 1:d){
tr_R[, , j] = K$K[[j]][tr_id, basis.id]
}
tr_Rtheta <- combine_kernel(tr_R, mscale)
te_R = array(NA, c(te_n, nbasis, d))
for(j in 1:d){
te_R[, , j] = K$K[[j]][te_id, basis.id]
}
te_Rtheta <- combine_kernel(te_R, mscale)
# initialize
EigRtheta2 = eigen(Rtheta2)
loop = 0
while (min(EigRtheta2$values) < 0 & loop < 10) {
loop = loop + 1
Rtheta2 = Rtheta2 + 1e-08 * diag(nbasis)
EigRtheta2 = eigen(Rtheta2)
}
if (loop == 10)
EigRtheta2$values[EigRtheta2$values < 0] = 1e-08
pseudoX = Rtheta %*% EigRtheta2$vectors %*% diag(sqrt(1/EigRtheta2$values))
c.init = as.vector(glmnet(pseudoX, cbind(time, status), family = "cox", lambda = cand.lambda[k], alpha = 1, standardize = FALSE)$beta)
tr_RS = RiskSet(time[tr_id], status[tr_id])
fit = getc.cd(tr_R, R2, tr_Rtheta, Rtheta2, mscale, c.init, time[tr_id], status[tr_id], cand.lambda[k], tr_RS)
tr_R
R2
time[tr_id]
R = tr_R
Rtheta = tr_Rtheta
time = time[tr_id]
status = status[tr_id]
lambda0 = cand.lambda[k]
Risk = tr_RS
n = nrow(Rtheta)
m = ncol(Rtheta)
c.old = c.init
c.new = rep(0, m)
GH = try(cosso::gradient.Hessian.C(c.old, R, R2, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
GH
# 2 * n * lambda0 * Rtheta2
Hess = GH$Hessian - 2 * lambda0 * Rtheta2
Grad = GH$Gradient - 2 * lambda0 * Rtheta2 %*% c.old
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
j=1
V1 = t(z - Rtheta[ ,-j] %*% c.old[-j]) %*% t(W) %*% Rtheta[, j]
z - Rtheta[ ,-j] %*% c.old[-j]
Rtheta[ ,-j]
Rtheta[ ,-j] %*% c.old[-j]
z
lambda0
Grad
Hess %*% c.old
Grad
Rtheta[ ,-j]
GH$Hessian - 2 * lambda0 * Rtheta2
Rtheta
Rtheta2
m
W
WR = colSums(W * Rtheta[, j])
WR
W
Rtheta[, j]
WR = colSums(W * Rtheta2[, j])
WR
WR * (z - Rtheta2[ ,-j] %*% c.old[-j])
sum(WR * (z - Rtheta2[ ,-j] %*% c.old[-j]))
(Rtheta2[-j, j] %*% c.old[-j]) / lambda0
Rtheta2[ ,j]
sum(WR * Rtheta2[ ,j])
WR = colSums(W * Rtheta2[, j])
V1 = sum(WR * (z - Rtheta2[ ,-j] %*% c.old[-j]))
V2 = as.vector((Rtheta2[-j, j] %*% c.old[-j]) / lambda0)
V3 = sum(WR * Rtheta2[ ,j])
V4 = Rtheta2[j, j] / lambda0
(V1 - V2) / (V3 + V4)
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:15){ # outer iteration
if(err) break
# 2 * n * lambda0 * Rtheta2
Hess = GH$Hessian - 2 * lambda0 * Rtheta2
Grad = GH$Gradient - 2 * lambda0 * Rtheta2 %*% c.old
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:m){
WR = colSums(W * Rtheta2[, j])
V1 = sum(WR * (z - Rtheta2[ ,-j] %*% c.old[-j]))
V2 = as.vector((Rtheta2[-j, j] %*% c.old[-j]) / lambda0)
V3 = sum(WR * Rtheta2[ ,j])
V4 = Rtheta2[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
c.old
j
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:15){ # outer iteration
if(err) break
# 2 * n * lambda0 * Rtheta2
Hess = GH$Hessian - 2 * lambda0 * Rtheta2
Grad = GH$Gradient - 2 * lambda0 * Rtheta2 %*% c.old
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:m){
WR = colSums(W * Rtheta2[, j])
V1 = sum(WR * (z - Rtheta2[ ,-j] %*% c.old[-j]))
V2 = as.vector((Rtheta2[-j, j] %*% c.old[-j]) / lambda0)
V3 = sum(WR * Rtheta2[ ,j])
V4 = Rtheta2[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
j
i
conv1
c.new
(V1 - V2) / (V3 + V4)
W
(Hess %*% c.old - Grad) / lambda0
getc.cd = function(R, R2, Rtheta, Rtheta2, mscale, c.init, time, status, lambda0, Risk)
{
n = nrow(Rtheta)
m = ncol(Rtheta)
c.old = c.init
c.new = rep(0, m)
GH = try(cosso::gradient.Hessian.C(c.old, R, R2, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:15){ # outer iteration
if(err) break
# 2 * n * lambda0 * Rtheta2
Hess = GH$Hessian - 2 * lambda0 * Rtheta2
Grad = GH$Gradient - 2 * lambda0 * Rtheta2 %*% c.old
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:m){
WR = colSums(W * Rtheta2[, j])
V1 = sum(WR * (z - Rtheta2[ ,-j] %*% c.old[-j]))
V2 = as.vector((Rtheta2[-j, j] %*% c.old[-j]) / lambda0)
V3 = sum(WR * Rtheta2[ ,j])
V4 = Rtheta2[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv3) break
}
if(i == 1 & (conv1 | conv2 | conv3)) c.new = c.init
return(list(z.new = z, w.new = W, c.new = c.new))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
getc.cd(tr_R, R2, tr_Rtheta, Rtheta2, mscale, c.init, time[tr_id], status[tr_id], cand.lambda[k], tr_RS)
getc.cd = function(R, R2, Rtheta, Rtheta2, mscale, c.init, time, status, lambda0, Risk)
{
n = nrow(Rtheta)
m = ncol(Rtheta)
c.old = c.init
c.new = rep(0, m)
GH = try(cosso::gradient.Hessian.C(c.old, R, R2, time, status, mscale, lambda0, Risk), silent = TRUE)
err = (class(GH) == "try-error") | sum(is.nan(GH$Gradient)) > 0
# while (loop < 15 & iter.diff > 1e-4) {
for(i in 1:15){ # outer iteration
if(err) break
# 2 * n * lambda0 * Rtheta2
Hess = GH$Hessian - 2 * lambda0 * Rtheta2
Grad = GH$Gradient - 2 * lambda0 * Rtheta2 %*% c.old
W = ginv(Hess)
z = (Hess %*% c.old - Grad) / lambda0
for(j in 1:m){
WR = colSums(W * Rtheta2[, j])
V1 = sum(WR * (z - Rtheta2[ ,-j] %*% c.old[-j]))
V2 = as.vector((Rtheta2[-j, j] %*% c.old[-j]) / lambda0)
V3 = sum(WR * Rtheta2[ ,j])
V4 = Rtheta2[j, j] / lambda0
c.new[j] = (V1 - V2) / (V3 + V4)
loss = abs(c.old - c.new)
conv1 = min(loss[loss > 0]) < 1e-20
conv2 = abs(c.old[j] - c.new[j]) > 5
conv3 = sum(exp(Rtheta %*% c.new) == Inf) > 0
# cat("i = ", i, "j = ", j, "loss =", max(loss),  "\n")
if(conv1 | conv2 | conv3) break
c.old[j] = c.new[j]  # if not convergence
}
if(conv1 | conv2 | conv3) break
}
if(i == 1 & (conv1 | conv2 | conv3)) c.new = c.init
return(list(z.new = z, w.new = W, c.new = c.new))
# return(list(z.new = z, zw.new = zw, w.new = w, c.new = c.new, b.new = b.new, cw.new = cw.new, GCV = GCV))
}
fit = getc.cd(tr_R, R2, tr_Rtheta, Rtheta2, mscale, c.init, time[tr_id], status[tr_id], cand.lambda[k], tr_RS)
