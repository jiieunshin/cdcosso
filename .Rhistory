phi <- param[30]
d <- 1 - exp(-1)
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
c1 <- (1 + d * mu1 * tau[1])^{-1/tau[1]}
c2 <- (1 + d * mu2 * tau[2])^{-1/tau[2]}
ind <- (Y[, 1] == 0 & Y[, 2] == 0)
v1 <- phi + (1 - phi) * (1 + tau[1] * mu1)^{-1/tau[1]} * (1 + tau[2] * mu2)^{-1/tau[2]} * (1 + w * (1 - c1) * (1 - c2))
v2 <- (1 - phi) * dnbinom(x = Y[, 1], mu = mu1, size = 1/tau[1]) * dnbinom(x = Y[, 2], mu = mu2, size = 1/tau[2]) * (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2))
v1 <- ifelse(v1[ind] <= 0, log(1e-15), log(v1[ind]))
v2 <- ifelse(v2[!ind] <= 0, log(1e-15), log(v2[!ind]))
return(-(sum(v1) + sum(v2)))
}
param_H1 <- optim(par = param_init2, fn = logH1, lower = c(rep(-Inf, 26), 1e-10, 1e-10, -Inf, -Inf), method = "L", control=list(maxit = 1e+6), hessian = TRUE)
param_H1
d <- 1 - exp(-1)
beta1 <- param_H0$par[1:13]
beta2 <- param_H0$par[14:26]
tau <- param_H0$par[27:28]
w <- param_H0$par[29]
Ind <- (Y[, 1] == 0 & Y[, 2] == 0)
mu <- cbind(exp(X %*% beta1), exp(X %*% beta2))
c <- cbind((1 + d * mu[, 1] * tau[1])^{-1/tau[1]}, (1 + d * mu[, 2] * tau[2])^{-1/tau[2]})
aa1 <- (tau[1]^{-2} * log(1 + tau[1] * mu[, 1]) - tau[1]^{-1} * mu[, 1] / (1 + tau[1] * mu[, 1]))
aa2 <- ((1 + tau[2] * mu[, 2])^{-1/tau[2]} * (1 + tau[1] * mu[, 1])^{-1/tau[1]} * aa1 ) / ((1 + tau[2] * mu[, 2])^{-1/tau[2]} * (1 + tau[1] * mu[, 1])^{-1/tau[1]}) * Ind
aa3 = sapply(1:nrow(Y), function(m){
if(Y[m, 1] == 0){
val = 0
} else{
sv = sapply(1:Y[m, 1], function(v){ (Y[m, 1] - v)/(1 - v * tau[1] + Y[m, 1] * tau[1]) })
val = sum(sv)
}
return(val)
})
aa4 <- ( aa3 - Y[, 1] * mu[, 1] / (1 + tau[1] * mu[, 1]) - mu[, 1] * tau[1]^{-1} / (1 + tau[1] * mu[, 1]) + tau[1]^{-2} * log(1 + tau[1] * mu[, 1]) ) * !Ind
#
ab1 <- (tau[2]^{-2} * log(1 + tau[2] * mu[, 2]) - tau[2]^{-1} * mu[, 2] / (1 + tau[2] * mu[, 2]))
ab2 <- ((1 + tau[2] * mu[, 2])^{-1/tau[2]} * (1 + tau[1] * mu[, 1])^{-1/tau[1]} * ab1 ) / ((1 + tau[2] * mu[, 2])^{-1/tau[2]} * (1 + tau[1] * mu[, 1])^{-1/tau[1]}) * Ind
ab3 = sapply(1:nrow(Y), function(m){
if(Y[m, 2] == 0){
val = 0
} else{
sv = sapply(1:Y[m, 2], function(v){ (Y[m, 2] - v)/(1 - v * tau[2] + Y[m, 2] * tau[2]) })
val = sum(sv)
}
return(val)
})
ab4 <- ( ab3 - Y[, 2] * mu[, 2] / (1 + tau[2] * mu[, 2]) - mu[, 2] * tau[2]^{-1} / (1 + tau[2] * mu[, 2]) + tau[2]^{-2} * log(1 + tau[2] * mu[, 2]) ) * !Ind
grad_mat <- matrix(0, 5190, 30)
for (i in 1:13) {
grad_mat[, i] <- (Y[, 1] - mu[, 1]) * X[, i] / (1 + tau[1] * mu[, 1]) + w * d * mu[, 1] * X[, i] * (exp(-Y[, 2]) - c[, 2]) * (1 + d * tau[1] * mu[, 1])^{-1/tau[1] - 1} / (1 + w * (exp(-Y[, 1]) - c[, 1]) * (exp(-Y[, 2]) - c[, 2]))
grad_mat[, i + 13] <- (Y[, 2] - mu[, 2]) * X[, i] / (1 + tau[2] * mu[, 2]) + w * d * mu[, 2] * X[, i] * (exp(-Y[, 1]) - c[, 1]) * (1 + d * tau[2] * mu[, 2])^{-1/tau[2] - 1} / (1 + w * (exp(-Y[, 1]) - c[, 1]) * (exp(-Y[, 2]) - c[, 2]))
grad_mat[, 27] <- (aa2 + aa4)
grad_mat[, 28] <- (ab2 + ab4)
grad_mat[, 29] <- (exp(-Y[, 1]) - c[, 1]) *  (exp(-Y[, 2]) - c[, 2]) / (1 + w * (exp(-Y[, 1]) - c[, 1]) *  (exp(-Y[, 2]) - c[, 2]))
grad_mat[, 30] <- 1 / (1 + tau[1] * mu[, 1])^(-tau[1]^{-1}) / (1 + tau[2] * mu[, 2])^(-tau[2]^{-1}) / (1 + w * (1 - c[, 1]) * (1 - c[, 2]) ) * (Y[, 1] == 0 & Y[, 2] == 0) - 1
}
I <- matrix(0, 30, 30)
score_vec <- colSums(grad_mat)
for (i in 1:30) {
I[i, ] <- colSums(grad_mat * grad_mat[, i])
}
score <- score_vec %*% solve(I) %*% score_vec
LR <- 2 * (param_H0$value - param_H1$value)
dchisq(LR, df = 1)
score
LR
param_H0$par
param_H1$par
score_vec %*% solve(I) %*% score_vec
2 * (param_H0$value - param_H1$value)
dchisq(LR, df = 1)
pchisq(LR, df = 1)
cor(Y[, 1], Y[, 2])
Y
cor(Y[, 1], Y[, 2])
# colnames(health)
Y <- health[c("PRESCRIB", "NONPRESC")] %>%
as.matrix()
cor(Y[, 1], Y[, 2])
health
colnames(health)
# colnames(health)
Y <- health[c("DVISITS", "NONDOCCO")] %>%
as.matrix()
X <- cbind(1, health[, c("SEX", "AGE", "AGESQ", "INCOME", "LEVYPLUS", "FREEPOOR", "FREEREPA", "ILLNESS", "ACTDAYS", "HSCORE", "CHCOND1", "CHCOND2")]) %>%
as.matrix() %>%
as.numeric %>%
matrix(., nrow = 5190, 13) # 12개의 설명변수와 1개의 intercept
Y
ind <- (Y[, 1] == 0 & Y[, 2] == 0)
ind
mean(ind)
health <- readxl::read_xlsx("C:/Users/jieun/Dropbox/BZINB/zero-zero/app_data/Aus_health/health.xlsx")
# colnames(health)
Y <- health[c("DVISITS", "NONDOCCO")] %>%
as.matrix()
X <- cbind(1, health[, c("SEX", "AGE", "AGESQ", "INCOME", "LEVYPLUS", "FREEPOOR", "FREEREPA", "ILLNESS", "ACTDAYS", "HSCORE", "CHCOND1", "CHCOND2")]) %>%
as.matrix() %>%
as.numeric %>%
matrix(., nrow = 5190, 13) # 12개의 설명변수와 1개의 intercept
logH0 <- function(param) {
beta1 <- param[1:13]
beta2 <- param[14:26]
tau <- param[27:28]
w <- param[29]
d <- 1 - exp(-1)
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
c1 <- (1 + d * mu1 * tau[1])^{-1/tau[1]}
c2 <- (1 + d * mu2 * tau[2])^{-1/tau[2]}
v1 <- dnbinom(x = Y[, 1], mu = mu1, size = 1/tau[1])
v2 <- dnbinom(x = Y[, 2], mu = mu2, size = 1/tau[2])
v3 <- (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2))
v1 <- ifelse(v1 <= 0, log(1e-15), log(v1))
v2 <- ifelse(v2 <= 0, log(1e-15), log(v2))
v3 <- ifelse(v3 <= 0, log(1e-15), log(v3))
logbp <- v1 + v2 + v3
return(-sum(logbp))
}
logH1 <- function(param) {
beta1 <- param[1:13]
beta2 <- param[14:26]
tau <- param[27:28]
w <- param[29]
phi <- param[30]
d <- 1 - exp(-1)
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
c1 <- (1 + d * mu1 * tau[1])^{-1/tau[1]}
c2 <- (1 + d * mu2 * tau[2])^{-1/tau[2]}
ind <- (Y[, 1] == 0 & Y[, 2] == 0)
v1 <- phi + (1 - phi) * (1 + tau[1] * mu1)^{-1/tau[1]} * (1 + tau[2] * mu2)^{-1/tau[2]} * (1 + w * (1 - c1) * (1 - c2))
v2 <- (1 - phi) * dnbinom(x = Y[, 1], mu = mu1, size = 1/tau[1]) * dnbinom(x = Y[, 2], mu = mu2, size = 1/tau[2]) * (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2))
v1 <- ifelse(v1[ind] <= 0, log(1e-15), log(v1[ind]))
v2 <- ifelse(v2[!ind] <= 0, log(1e-15), log(v2[!ind]))
return(-(sum(v1) + sum(v2)))
}
beta1_init <- glm(Y[, 1] ~ X[, 2:13], family = "poisson")$coef
beta2_init <- glm(Y[, 2] ~ X[, 2:13], family = "poisson")$coef
param_init1 <- c(beta1_init, beta2_init, var(Y[, 1]), var(Y[, 1]), cor(Y[, 1], Y[, 2])) %>%
as.numeric()
param_init2 <- c(beta1_init, beta2_init, var(Y[, 1]), var(Y[, 1]), cor(Y[, 1], Y[, 2]), 0.1) %>%
as.numeric()
param_H0 <- optim(par = param_init1, fn = logH0, lower = c(rep(-Inf, 26), 1e-10, 1e-10, -Inf), method = "L", control=list(maxit = 1e+6), hessian = TRUE)
param_H1 <- optim(par = param_init2, fn = logH1, lower = c(rep(-Inf, 26), 1e-10, 1e-10, -Inf, -Inf), method = "L", control=list(maxit = 1e+6), hessian = TRUE)
d <- 1 - exp(-1)
beta1 <- param_H0$par[1:13]
beta2 <- param_H0$par[14:26]
tau <- param_H0$par[27:28]
w <- param_H0$par[29]
Ind <- (Y[, 1] == 0 & Y[, 2] == 0)
mu <- cbind(exp(X %*% beta1), exp(X %*% beta2))
c <- cbind((1 + d * mu[, 1] * tau[1])^{-1/tau[1]}, (1 + d * mu[, 2] * tau[2])^{-1/tau[2]})
aa1 <- (tau[1]^{-2} * log(1 + tau[1] * mu[, 1]) - tau[1]^{-1} * mu[, 1] / (1 + tau[1] * mu[, 1]))
aa2 <- ((1 + tau[2] * mu[, 2])^{-1/tau[2]} * (1 + tau[1] * mu[, 1])^{-1/tau[1]} * aa1 ) / ((1 + tau[2] * mu[, 2])^{-1/tau[2]} * (1 + tau[1] * mu[, 1])^{-1/tau[1]}) * Ind
aa3 = sapply(1:nrow(Y), function(m){
if(Y[m, 1] == 0){
val = 0
} else{
sv = sapply(1:Y[m, 1], function(v){ (Y[m, 1] - v)/(1 - v * tau[1] + Y[m, 1] * tau[1]) })
val = sum(sv)
}
return(val)
})
aa4 <- ( aa3 - Y[, 1] * mu[, 1] / (1 + tau[1] * mu[, 1]) - mu[, 1] * tau[1]^{-1} / (1 + tau[1] * mu[, 1]) + tau[1]^{-2} * log(1 + tau[1] * mu[, 1]) ) * !Ind
#
ab1 <- (tau[2]^{-2} * log(1 + tau[2] * mu[, 2]) - tau[2]^{-1} * mu[, 2] / (1 + tau[2] * mu[, 2]))
ab2 <- ((1 + tau[2] * mu[, 2])^{-1/tau[2]} * (1 + tau[1] * mu[, 1])^{-1/tau[1]} * ab1 ) / ((1 + tau[2] * mu[, 2])^{-1/tau[2]} * (1 + tau[1] * mu[, 1])^{-1/tau[1]}) * Ind
ab3 = sapply(1:nrow(Y), function(m){
if(Y[m, 2] == 0){
val = 0
} else{
sv = sapply(1:Y[m, 2], function(v){ (Y[m, 2] - v)/(1 - v * tau[2] + Y[m, 2] * tau[2]) })
val = sum(sv)
}
return(val)
})
ab4 <- ( ab3 - Y[, 2] * mu[, 2] / (1 + tau[2] * mu[, 2]) - mu[, 2] * tau[2]^{-1} / (1 + tau[2] * mu[, 2]) + tau[2]^{-2} * log(1 + tau[2] * mu[, 2]) ) * !Ind
grad_mat <- matrix(0, 5190, 30)
for (i in 1:13) {
grad_mat[, i] <- (Y[, 1] - mu[, 1]) * X[, i] / (1 + tau[1] * mu[, 1]) + w * d * mu[, 1] * X[, i] * (exp(-Y[, 2]) - c[, 2]) * (1 + d * tau[1] * mu[, 1])^{-1/tau[1] - 1} / (1 + w * (exp(-Y[, 1]) - c[, 1]) * (exp(-Y[, 2]) - c[, 2]))
grad_mat[, i + 13] <- (Y[, 2] - mu[, 2]) * X[, i] / (1 + tau[2] * mu[, 2]) + w * d * mu[, 2] * X[, i] * (exp(-Y[, 1]) - c[, 1]) * (1 + d * tau[2] * mu[, 2])^{-1/tau[2] - 1} / (1 + w * (exp(-Y[, 1]) - c[, 1]) * (exp(-Y[, 2]) - c[, 2]))
grad_mat[, 27] <- (aa2 + aa4)
grad_mat[, 28] <- (ab2 + ab4)
grad_mat[, 29] <- (exp(-Y[, 1]) - c[, 1]) *  (exp(-Y[, 2]) - c[, 2]) / (1 + w * (exp(-Y[, 1]) - c[, 1]) *  (exp(-Y[, 2]) - c[, 2]))
grad_mat[, 30] <- 1 / (1 + tau[1] * mu[, 1])^(-tau[1]^{-1}) / (1 + tau[2] * mu[, 2])^(-tau[2]^{-1}) / (1 + w * (1 - c[, 1]) * (1 - c[, 2]) ) * (Y[, 1] == 0 & Y[, 2] == 0) - 1
}
I <- matrix(0, 30, 30)
score_vec <- colSums(grad_mat)
for (i in 1:30) {
I[i, ] <- colSums(grad_mat * grad_mat[, i])
}
score <- score_vec %*% solve(I) %*% score_vec
LR <- 2 * (param_H0$value - param_H1$value)
score
LR
cor(Y,method = "spearman")
pchisq(LR, df = 1)
pchisq(LR, df = 1, lower = F)
pchisq(score, df = 1, lower = F)
cor(health$DVISITS, health$NONDOCCO)
cor(health$DVISITS, health$NONDOCCO, method = "spearman")
Y
colMeans(Y)
apply(Y, 2, var)
rm(list = ls())
library(dplyr)
health <- readxl::read_xlsx("~/health.xlsx")
# colnames(health)
Y <- health[c("DVISITS", "NONDOCCO")] %>%
as.matrix()
X <- cbind(1, health[, c("SEX", "AGE", "AGESQ", "INCOME", "LEVYPLUS", "FREEPOOR", "FREEREPA", "ILLNESS", "ACTDAYS", "HSCORE", "CHCOND1", "CHCOND2")]) %>%
as.matrix() %>%
as.numeric %>%
matrix(., nrow = 5190, 13) # 12개의 설명변수와 1개의 intercept
health <- readxl::read_xlsx("C:/Users/jieun/Dropbox/BZINB/zero-zero/app_data/Aus_health/health.xlsx")
# colnames(health)
Y <- health[c("DVISITS", "NONDOCCO")] %>%
as.matrix()
X <- cbind(1, health[, c("SEX", "AGE", "AGESQ", "INCOME", "LEVYPLUS", "FREEPOOR", "FREEREPA", "ILLNESS", "ACTDAYS", "HSCORE", "CHCOND1", "CHCOND2")]) %>%
as.matrix() %>%
as.numeric %>%
matrix(., nrow = 5190, 13) # 12개의 설명변수와 1개의 intercept
apply(Y, 2, mean)
apply(Y, 2, sd)
cor(Y)[2]; cor(Y, method = "spearman")[2]
logH0 <- function(param) {
beta1 <- param[1:13]
beta2 <- param[14:26]
gamma <- param[27:39]
w <- param[40]
d <- 1 - exp(-1)
ind <- (Y[, 1] == 0 & Y[, 2] == 0)
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
phi <- exp(X %*% gamma) / (1 + exp(X %*% gamma))
c1 <- exp(-d * mu1);
c2 <- exp(-d * mu2)
V1 <- exp(X %*% gamma) + dpois(0, lambda = mu1) * dpois(0, lambda = mu2) * (1 + w * (1 - c1) * (1 - c2))
V1 <- ifelse(V1 <= 0, 1e-15, V1)
v1 <- log(V1) * ind
v21 <- (dpois(x = Y[, 1], lambda = mu1, log = T) + dpois(x = Y[, 2], lambda = mu2, log = T)) * !ind
v22 <- (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2))
v22 <- ifelse(v22 < 1e-10, 1e-10, v22)
v22 <- log(v22) * !ind
v2 <- v21+v22
logbp <- sum(v1) +  sum(v2) - sum(log(1 + exp(X %*% gamma)))
return(-logbp)
}
# initial parameter estimation.
beta1_init <- glm(Y[, 1] ~ X[, 2:13], family = "poisson")$coef
beta2_init <- glm(Y[, 2] ~ X[, 2:13], family = "poisson")$coef
zero_init <- glm(ifelse(rowSums(Y) == 0, 1, 0) ~ X[, 2:13], family = "binomial")$coef
param_init1 <- c(beta1_init, beta2_init, zero_init, .5) %>%
as.numeric()
## Under H0
param_H0 <- optim(par = param_init1, fn = logH0, method = "L", control = list(maxit = 1e+6), hessian = TRUE)
## Indicator
ind <- (rowSums(Y) == 0)
d <- 1 - exp(-1)
beta1 <- param_H0$par[1:13]
beta2 <- param_H0$par[14:26]
gamma <- param_H0$par[27:39]
w <- param_H0$par[40]
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
c1 <- exp(-d * mu1);
c2 <- exp(-d * mu2);
D <- (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2))
phi <- exp(X %*% gamma) / (1 + exp(X %*% gamma))
psi <- phi / (1 - phi)
grad_mat <- matrix(0, 5190, 42)
## TAU
a1 = sapply(1:nrow(Y), function(i){
sv = 0
if(Y[i, 1] > 0){
for(v in 1:Y[i, 1]){
sv = sv + (Y[i,1] - v)
}
}
return (sv)
})
a2 = sapply(1:nrow(Y), function(i){
sv = 0
if(Y[i, 2] > 0){
for(v in 1:Y[i, 2]){
sv = sv + (Y[i,2] - v)
}
}
return (sv)
})
for (i in 1:13) {
grad_mat[, i] <- (X[, i] * exp(X %*% gamma) / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind -
X[, i] * exp(X %*% gamma) / (1 + exp(X %*% gamma))
grad_mat[, i + 13] <- (X[, i] * exp(-mu1 - mu2) * mu1 * (w * d * (1 - exp(-d * mu2)) * exp(-d * mu1) - D) / (psi + exp(-mu1 - mu2) * D)) * ind +
((Y[, 1] - mu1) * X[, i] + w * d * mu1 * X[, i] * (exp(-Y[, 2]) - exp(-d * mu2)) * exp(-d * mu1) / D) * !ind
grad_mat[, i + 26] <- (X[, i] * exp(-mu1 - mu2) * mu2 * (w * d * (1 - exp(-d * mu1)) * exp(-d * mu2) - D) / (psi + exp(-mu1 - mu2) * D)) * ind +
((Y[, 2] - mu2) * X[, i] + w * d * mu2 * X[, i] * (exp(-Y[, 1]) - exp(-d * mu1)) * exp(-d * mu2) / D) * !ind
}
grad_mat[, 40] <- (exp(-mu1 - mu2) * (1 - exp(-d * mu1)) * (1 - exp(-d * mu2)) / (psi + exp(-mu1 - mu2) * D)) * ind +
((exp(-Y[, 1]) - exp(-d * mu1)) * (exp(-Y[, 2]) - exp(-d * mu2)) / D) * !ind
grad_mat[, 41] <- dtau1 <- (exp(-mu1 -mu2) * D * (mu1^2 / 2) / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind -
(w * exp(-mu1 - mu2) * exp(-d * mu1) * (1 - exp(-d * mu2)) * (mu1^2 * d / 2)  / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind +
(a1 - mu1 * Y[, 1] + mu1^2/ 2 - w * (exp(-Y[, 2]) - c2) * exp(-d * mu1) * (d^2 * mu1^2 / 2) / (1 + D)) * !ind
grad_mat[, 42] <- dtau2 <- (exp(-mu1 -mu2) * D * (mu2^2 / 2) / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind -
(w * exp(-mu1 - mu2) * exp(-d * mu2) * (1 - exp(-d * mu1)) * (mu2^2 * d / 2)  / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind +
(a2 - mu2 * Y[, 2] + mu2^2/ 2 - w * (exp(-Y[, 1]) - c1) * exp(-d * mu2) * (d^2 * mu2^2 / 2) / (1 + D)) * !ind
King_score <- colSums(grad_mat)
I <- matrix(0, 42, 42)
for (i in 1:42) {
I[i, ] <- colSums(grad_mat * grad_mat[, i])
}
J <- MASS::ginv(I)[41:42, 41:42]
ell <- rep(1, 2)
JJ <- sqrt(c(t(ell) %*% MASS::ginv(J) %*% ell))
sum_score <- sum(King_score[41:42])
King <- sum_score / JJ
King
LR_test <- 2 * (param_H0$value - param_H1$value)
param_init2 <- c(beta1_init, beta2_init, zero_init, .5, .5, .5) %>%
as.numeric()
param_H1 <- optim(par = param_init2, fn = logH1, method = "L", control=list(maxit = 1e+6), hessian = TRUE)
library(dplyr)
health <- readxl::read_xlsx("/Users/bigdate/Desktop/paper/2023/count (2023)/app_data/health.xlsx")
Y <- health[c("DVISITS", "NONDOCCO")] %>%
as.matrix()
X <- cbind(1, health[1:12]) %>%
as.matrix()
summary(health, )
sd(Y)
apply(health, 2, sd) %>%
round(., 3)
?summary
logH0 <- function(param) {
beta1 <- param[1:13]
beta2 <- param[14:26]
gamma <- param[27:39]
w <- param[40]
d <- 1 - exp(-1)
ind <- (Y[, 1] == 0 & Y[, 2] == 0)
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
phi <- exp(X %*% gamma) / (1 + exp(X %*% gamma))
c1 <- exp(-d * mu1);
c2 <- exp(-d * mu2)
v1 <- log(exp(X %*% gamma) + dpois(0, lambda = mu1) * dpois(0, lambda = mu2) * (1 + w * (1 - c1) * (1 - c2))) * ind
v21 <- (dpois(x = Y[, 1], lambda = mu1, log = T) + dpois(x = Y[, 2], lambda = mu2, log = T)) * !ind
v22 <- (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2))
v22 <- ifelse(v22 < 1e-10, 1e-10, v22)
v22 <- log(v22) * !ind
v2 <- v21+v22
logbp <- sum(v1) +  sum(v2) - sum(log(1 + exp(X %*% gamma)))
return(-logbp)
}
logH1 <- function(param) {
beta1 <- param[1:13]
beta2 <- param[14:26]
gamma <- param[27:39]
w <- param[40]
tau <- param[41:42]
d <- 1 - exp(-1)
ind <- (Y[, 1] == 0 & Y[, 2] == 0)
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
phi <- exp(X %*% gamma) / (1 + exp(X %*% gamma))
c1 <- (1 + d * mu1 * tau[1])^{-1/tau[1]}
c2 <- (1 + d * mu2 * tau[2])^{-1/tau[2]}
v1 <- log(phi + (1 - phi) * (1 + tau[1] * mu1)^{-1/tau[1]} * (1 + tau[2] * mu2)^{-1/tau[2]} * (1 + w * (1 - c1) * (1 - c2)))[ind]
v2 <- log((1 - phi) * dnbinom(x = Y[, 1], mu = mu1, size = 1/tau[1]) * dnbinom(x = Y[, 2], mu = mu2, size = 1/tau[2]) * (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2)))[!ind]
logbp <- sum(v1) +  sum(v2)
return(-logbp)
}
# initial parameter estimation.
beta1_init <- glm(Y[, 1] ~ X[, 2:13], family = "poisson")$coef
beta2_init <- glm(Y[, 2] ~ X[, 2:13], family = "poisson")$coef
health <- readxl::read_xlsx("C:/Users/jieun/Dropbox/BZINB/zero-zero/app_data/Aus_health/health.xlsx")
# colnames(health)
Y <- health[c("DVISITS", "NONDOCCO")] %>%
as.matrix()
X <- cbind(1, health[, c("SEX", "AGE", "AGESQ", "INCOME", "LEVYPLUS", "FREEPOOR", "FREEREPA", "ILLNESS", "ACTDAYS", "HSCORE", "CHCOND1", "CHCOND2")]) %>%
as.matrix() %>%
as.numeric %>%
matrix(., nrow = 5190, 13) # 12개의 설명변수와 1개의 intercept
rm(list = ls())
library(dplyr)
health <- readxl::read_xlsx("C:/Users/jieun/Dropbox/BZINB/zero-zero/app_data/Aus_health/health.xlsx")
# colnames(health)
Y <- health[c("DVISITS", "NONDOCCO")] %>%
as.matrix()
X <- cbind(1, health[, c("SEX", "AGE", "AGESQ", "INCOME", "LEVYPLUS", "FREEPOOR", "FREEREPA", "ILLNESS", "ACTDAYS", "HSCORE", "CHCOND1", "CHCOND2")]) %>%
as.matrix() %>%
as.numeric %>%
matrix(., nrow = 5190, 13) # 12개의 설명변수와 1개의 intercept
?summary
logH0 <- function(param) {
beta1 <- param[1:13]
beta2 <- param[14:26]
gamma <- param[27:39]
w <- param[40]
d <- 1 - exp(-1)
ind <- (Y[, 1] == 0 & Y[, 2] == 0)
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
phi <- exp(X %*% gamma) / (1 + exp(X %*% gamma))
c1 <- exp(-d * mu1);
c2 <- exp(-d * mu2)
v1 <- log(exp(X %*% gamma) + dpois(0, lambda = mu1) * dpois(0, lambda = mu2) * (1 + w * (1 - c1) * (1 - c2))) * ind
v21 <- (dpois(x = Y[, 1], lambda = mu1, log = T) + dpois(x = Y[, 2], lambda = mu2, log = T)) * !ind
v22 <- (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2))
v22 <- ifelse(v22 < 1e-10, 1e-10, v22)
v22 <- log(v22) * !ind
v2 <- v21+v22
logbp <- sum(v1) +  sum(v2) - sum(log(1 + exp(X %*% gamma)))
return(-logbp)
}
logH1 <- function(param) {
beta1 <- param[1:13]
beta2 <- param[14:26]
gamma <- param[27:39]
w <- param[40]
tau <- param[41:42]
d <- 1 - exp(-1)
ind <- (Y[, 1] == 0 & Y[, 2] == 0)
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
phi <- exp(X %*% gamma) / (1 + exp(X %*% gamma))
c1 <- (1 + d * mu1 * tau[1])^{-1/tau[1]}
c2 <- (1 + d * mu2 * tau[2])^{-1/tau[2]}
v1 <- log(phi + (1 - phi) * (1 + tau[1] * mu1)^{-1/tau[1]} * (1 + tau[2] * mu2)^{-1/tau[2]} * (1 + w * (1 - c1) * (1 - c2)))[ind]
v2 <- log((1 - phi) * dnbinom(x = Y[, 1], mu = mu1, size = 1/tau[1]) * dnbinom(x = Y[, 2], mu = mu2, size = 1/tau[2]) * (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2)))[!ind]
logbp <- sum(v1) +  sum(v2)
return(-logbp)
}
# initial parameter estimation.
beta1_init <- glm(Y[, 1] ~ X[, 2:13], family = "poisson")$coef
beta2_init <- glm(Y[, 2] ~ X[, 2:13], family = "poisson")$coef
zero_init <- glm(ifelse(rowSums(Y) == 0, 1, 0) ~ X[, 2:13], family = "binomial")$coef
param_init1 <- c(beta1_init, beta2_init, zero_init, .5) %>%
as.numeric()
param_init2 <- c(beta1_init, beta2_init, zero_init, .5, .5, .5) %>%
as.numeric()
## Under H0
param_H0 <- optim(par = param_init1, fn = logH0, method = "L", control=list(maxit = 1e+6), hessian = TRUE)
param_H0$par / round(sqrt(diag(solve(param_H0$hessian))), 3)
## Under H1
param_H1 <- optim(par = param_init2, fn = logH1, method = "L", control=list(maxit = 1e+6), hessian = TRUE)
param_H1
## Indicator
ind <- (rowSums(Y) == 0)
d <- 1 - exp(-1)
beta1 <- param_H0$par[1:13]
beta2 <- param_H0$par[14:26]
gamma <- param_H0$par[27:39]
w <- param_H0$par[40]
mu1 <- exp(X %*% beta1)
mu2 <- exp(X %*% beta2)
c1 <- exp(-d * mu1);
c2 <- exp(-d * mu2);
D <- (1 + w * (exp(-Y[, 1]) - c1) * (exp(-Y[, 2]) - c2))
phi <- exp(X %*% gamma) / (1 + exp(X %*% gamma))
psi <- phi / (1 - phi)
grad_mat <- matrix(0, 5190, 42)
## TAU
a1 = sapply(1:nrow(Y), function(i){
sv = 0
if(Y[i, 1] > 0){
for(v in 1:Y[i, 1]){
sv = sv + (Y[i,1] - v)
}
}
return (sv)
})
a2 = sapply(1:nrow(Y), function(i){
sv = 0
if(Y[i, 2] > 0){
for(v in 1:Y[i, 2]){
sv = sv + (Y[i,2] - v)
}
}
return (sv)
})
for (i in 1:13) {
grad_mat[, i] <- (X[, i] * exp(X %*% gamma) / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind -
X[, i] * exp(X %*% gamma) / (1 + exp(X %*% gamma))
grad_mat[, i + 13] <- (X[, i] * exp(-mu1 - mu2) * mu1 * (w * d * (1 - exp(-d * mu2)) * exp(-d * mu1) - D) / (psi + exp(-mu1 - mu2) * D)) * ind +
((Y[, 1] - mu1) * X[, i] + w * d * mu1 * X[, i] * (exp(-Y[, 2]) - exp(-d * mu2)) * exp(-d * mu1) / D) * !ind
grad_mat[, i + 26] <- (X[, i] * exp(-mu1 - mu2) * mu2 * (w * d * (1 - exp(-d * mu1)) * exp(-d * mu2) - D) / (psi + exp(-mu1 - mu2) * D)) * ind +
((Y[, 2] - mu2) * X[, i] + w * d * mu2 * X[, i] * (exp(-Y[, 1]) - exp(-d * mu1)) * exp(-d * mu2) / D) * !ind
grad_mat[, 40] <- (exp(-mu1 - mu2) * (1 - exp(-d * mu1)) * (1 - exp(-d * mu2)) / (psi + exp(-mu1 - mu2) * D)) * ind +
((exp(-Y[, 1]) - exp(-d * mu1)) * (exp(-Y[, 2]) - exp(-d * mu2)) / D) * !ind
grad_mat[, 41] <- dtau1 <- (exp(-mu1 -mu2) * D * (mu1^2 / 2) / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind -
(w * exp(-mu1 - mu2) * exp(-d * mu1) * (1 - exp(-d * mu2)) * (mu1^2 * d / 2)  / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind +
(a1 - mu1 * Y[, 1] + mu1^2/ 2 - w * (exp(-Y[, 2]) - c2) * exp(-d * mu1) * (d^2 * mu1^2 / 2) / (1 + D)) * !ind
grad_mat[, 42] <- dtau2 <- (exp(-mu1 -mu2) * D * (mu2^2 / 2) / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind -
(w * exp(-mu1 - mu2) * exp(-d * mu2) * (1 - exp(-d * mu1)) * (mu2^2 * d / 2)  / (exp(X %*% gamma) + exp(-mu1 - mu2) * D)) * ind +
(a2 - mu2 * Y[, 2] + mu2^2/ 2 - w * (exp(-Y[, 1]) - c1) * exp(-d * mu2) * (d^2 * mu2^2 / 2) / (1 + D)) * !ind
}
King_score <- colSums(grad_mat)
I <- matrix(0, 42, 42)
for (i in 1:42) {
I[i, ] <- colSums(grad_mat * grad_mat[, i])
}
J <- MASS::ginv(I)[41:42, 41:42]
ell <- rep(1, 2)
JJ <- sqrt(c(t(ell) %*% MASS::ginv(J) %*% ell))
King <- sum(King_score[41:42]) / JJ
dnorm(King)
## LR test
LR_test <- 2 * (param_H0$value - param_H1$value)
LR_test
King
