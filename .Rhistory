# c.new = ginv(LHS) %*% RHS
# model = sspline_cvfit
# mscale = wt
# lambda0 = optlambda0
nng_c <- function(Gw, uw, theta, lambda_theta, gamma) {
if(!is.loaded("Cnng")) dyn.load("src/temp.dll")
result <- .C("Cnng",
as.double(Gw), as.double(uw), as.double(theta), as.double(lambda_theta), as.double(gamma),
as.integer(length(theta)), PACKAGE = "cdcosso")
return(result)
}
cv.nng.cd = function(model, x, y, mscale, init.theta, lambda0, lambda_theta, M, gamma, nfolds, obj, one.std, algo)
{
n = length(y)
d = length(mscale)
IDmat = model$IDmat
sdx <- sqrt(drop(rep(1, n) %*% (x^2))/(n - 1))
G <- matrix(0, nrow(model$R[, ,1]), d)
for (j in 1:d) {
G[, j] = model$R[, , j] %*% model$c.new * (mscale[j]^(-2))
}
if(algo == "CD") len = length(lambda_theta)
if(algo == "QP") len = length(M)
measure <- matrix(0, ncol = len, nrow = nfolds)
l = 0
for (f in 1:nfolds) {
testID <- IDmat[!is.na(IDmat[, f]), f]
trainID <- (1:n)[-testID]
tr_G = G[trainID,]
te_G = G[testID,]
tr_n = length(trainID)
te_n = length(testID)
for (k in 1:len) {
# init.theta = as.vector(scale(glmnet(x[trainID,], y[trainID], family = "binomial", lambda = lambda_theta[k], gamma = gamma)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD") {
# nng.fit = nng.cd(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
#                  theta = init.theta, lambda0, lambda_theta[k], M[k], gamma, obj)
Gw = tr_G * sqrt(model$w.new[trainID])
uw = model$zw.new[trainID] - model$b.new * model$sw.new[trainID] - (tr_n/2) * lambda0 * model$cw.new[trainID]
# theta.new = nng_cpp(Gw, uw, init.theta, lambda_theta[k], gamma)
theta.new = nng_c(Gw, uw, theta, lambda_theta[k], gamma)
# print(theta_new)
if(sum(theta.new == 0) == d){
theta.new = rep(1e-10, d)
} else{
theta.new = scale(theta.new)
}
}
if(algo == "QP") {
nng.fit = nng.QP(model$zw.new[trainID], model$b.new, model$sw.new[trainID], model$cw.new[trainID], model$w.new[trainID], tr_G,
theta = init.theta, lambda0, M[k], gamma)
# print(nng.fit)
if(sum(nng.fit$theta.new == 0) == d){
theta.new = rep(1e-10, d)
} else{
theta.new = nng.fit$theta.new
}
}
# sel[f, k] = sum(theta.new > 0)
# print(nng.fit$theta.new)
testfhat = c(te_G %*% theta.new)
testmu = obj$linkinv(testfhat)
testw = obj$variance(testmu)
testz = testfhat + (y[testID] - testmu) / testw
testzw = testz * sqrt(testw)
testGw = te_G * sqrt(testw)
# rss <- t(testzw - testGw %*% theta.new) %*% (testzw - testGw %*% theta.new) + .1
# l1 = gamma * sum(abs(theta.new)) + (1-gamma) * norm(theta.new, "2")
# l2 = gamma * sum(abs(ginv(theta.new))) + (1-gamma) * norm(ginv(theta.new), "2")
# S = l1 + l2
# measure[f, k] <- rss / (1 - d*S/length(testID) + .1)^2 / length(testID)
if(obj$family == "binomial") measure[f, k] <- mean(ifelse(testmu < 0.5, 0, 1) != y[testID])
if(obj$family == "gaussian") measure[f, k] <- mean((testmu - y[testID])^2)
if(obj$family == "poisson") measure[f, k] <- mean(KLD(testf, y[testID]))
}
}
# measure[is.nan(measure)] = 1e-30
# mid = colSums(measure) != 0
# measure = measure[,mid]
# if(algo == "CD") lambda_theta = lambda_theta[mid]
# if(algo == "QP") M = M[mid]
cvm <- apply(measure, 2, mean, na.rm = T)
cvsd <- apply(measure, 2, sd, na.rm = T) / sqrt(nrow(measure)) + 1e-22
# selm = floor(apply(sel, 2, mean))
id = which.min(cvm)[1]
if(one.std){
st1_err = cvm[id] + cvsd[id] # minimum cv err
std.id = max(which(cvm[id:d] <= st1_err & cvm[id] <= cvm[id:d]))
std.id = ifelse(std.id > id, std.id, id)
if(algo == "CD") optlambda = lambda_theta[std.id]
if(algo == "QP") optM = M[std.id]
} else{
if(algo == "CD") optlambda = lambda_theta[id]
if(algo == "QP") optM = M[id]
}
# plotting error bar
if(obj$family == 'gaussian'){
main = "Gaussian Family"
}
if(obj$family == 'binomial'){
main = "Binomial Family"
}
if(obj$family == 'poisson'){
main = "Poisson Family"
}
max_min <- c(min(cvm - cvsd), max(cvm + cvsd))
if(algo == "CD") xrange = log(lambda_theta)
if(algo == "QP") xrange = log(M)
plot(xrange, cvm, main = main, xlab = expression("Log(" * lambda[theta] * ")"), ylab = "generalized cross validation", ylim = max_min, type = 'n')
arrows(xrange, cvm - cvsd, xrange, cvm + cvsd, angle = 90, code = 3, length = 0.1, col = 'gray')
points(xrange, cvm, pch = 15, col = 'red')
abline(v = xrange[id], col = 'darkgrey')
# text(log(lambda_theta), par("usr")[4], labels = selm, pos = 1)
if(one.std) abline(v = xrange[std.id], col = 'darkgrey')
# init.theta = as.vector(scale(glmnet(x, y, family = "binomial", lambda = optlambda, gamma = 0)$beta))
# if(sum(is.nan(init.theta)) == d) init.theta = rep(0, d)
if(algo == "CD"){
Gw = G * sqrt(model$w.new)
uw = model$zw.new - model$b.new * model$sw.new - (n/2) * lambda0 * model$cw.new
# theta.new = nng_cpp(Gw, uw, init.theta, optlambda, gamma)
# nng.fit = nng.cd(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
#                theta = init.theta, lambda0, optlambda, gamma, obj)
theta.new = nng_c(Gw, uw, init.theta, optlambda, gamma)
out = list(cv_error = measure, optlambda_theta = optlambda, gamma = gamma, theta.new = theta.new)
}
if(algo == "QP"){
nng.fit = nng.QP(model$zw.new, model$b.new, model$sw.new, model$cw.new, model$w.new, G,
theta = init.theta, lambda0, optM, gamma, obj)
out = list(cv_error = measure, optlambda_theta = optM, gamma = gamma, theta.new = nng.fit$theta.new)
}
return(out)
}
# zw = model$zw.new[trainID]
# b = model$b.new
# sw = model$sw.new[trainID]
# cw = model$cw.new[trainID]
# w = model$w.new[trainID]
# G = tr_G
# y = y[trainID]
nng.cd = function (zw, b, sw, cw, w, G, theta, lambda0, lambda_theta, gamma, obj)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
uw = zw - b * sw - (n/2) * lambda0 * cw
r = lambda_theta * gamma / 2
# print(algo)
for(i in 1:10){
theta.new = sapply(1:d, function(j) {
sum((uw - Gw[,-j] %*% theta[-j]) %*% Gw[,j])
})
theta.new = ifelse(theta.new > 0 & r < abs(theta.new), theta.new, 0)
theta.new = theta.new / (diag(t(Gw) %*% Gw) + lambda_theta * (1-gamma))
if(max(abs(theta-theta.new)) < 1e-5) break
theta = theta.new
}
out = list(lambda_theta = lambda_theta, gamma = gamma, theta.new = theta.new)
return(out)
}
nng.QP = function (zw, b, sw, cw, w, G, theta, lambda0, M, gamma, obj)
{
n = nrow(G)
d = ncol(G)
Gw = G * sqrt(w)
# theta = rep(1, d)
# print(theta)
uw = zw - b * sw - (n/2) * lambda0 * cw
# print(algo)
Amat = rbind(diag(1, d), rep(-1, d))
bvec = c(rep(0, d), -M)
for(i in 1:10){
Dmat = 2 * (t(Gw) %*% Gw  + diag(1-gamma, d))
dvec = c(2 * t(uw) %*% Gw - gamma)
# dvec = ifelse(dvec > 0 & abs(dvec) > lambda_theta * gamma, dvec, 0)
# theta.new = c(ginv(Dmat) %*% dvec)
theta.new <- solve.QP(Dmat, dvec, t(Amat), bvec)$solution
theta.new[theta.new < 1e-10] <- 0
if(max(abs(theta-theta.new)) < 1e-5) break
theta = theta.new
}
out = list(M = M, gamma = gamma, theta.new = theta.new)
return(out)
}
######################
# object = fit3
# testx = te_x
KLD = function(f, y, family = "binomial"){
if(family == 'poisson') D = function(f, y) exp(f) - y*f
if(family == 'binomial') D = function(f, y) log(exp(1-f)+1) - y*f
if(family == 'Cox') D = function(f, y) log(exp(1-f)+1) - y*f
return(D(f, y))
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
sspline_c <- function(zw, Rw, cw, sw, b, lambda0) {
if (!is.loaded("Csspline")) dyn.load("src/temp.dll")
result <- .C("Csspline",
as.double(zw), as.double(Rw), as.double(cw), as.double(sw), as.double(b), as.double(lambda0))
return(result)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
is.loaded(Cssplint)
is.loaded(Csspline)
is.loaded("Csspline")
dyn.load("src/temp.dll")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
use_gpl3_license
use_gpl3_license()
devtools::document()
devtools::document()
install.packages("cdcosso")
install.packages("cdcosso")
devtools::install("cdcosso")
library(cdcosso)
devtools::decuments()
devtools::decument()
devtools::document()
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
i=1
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_y = te$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
library(tmvtnorm)
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
te_y = te$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
library(glmnet)
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
library(cosso)
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
devtools::decument()
devtools::document()
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
te_y = te$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
is.loaded("Csspline")
dyn.load("src/temp.dll")
is.loaded("Csspline")
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
sspline_c <- function(zw, Rw, cw, sw, b, lambda0) {
if (!is.loaded("Csspline")) dyn.load("src/temp.dll")
result <- .Call("Csspline",
as.double(zw), as.double(Rw), as.double(cw), as.double(sw), as.double(b), as.double(lambda0))
return(result)
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
sspline_c <- function(zw, Rw, cw, sw, b, lambda0) {
if (!is.loaded("Csspline")) dyn.load("src/temp.dll")
result <- .Call("Csspline",
zw, Rw, cw, sw, b, lambda0)
return(result)
}
fit10
fit10
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
cosso::wsGram()
cosso::wsGram()
cosso::wsGram
rescale
cvsplitID
cosso::cvsplitID
install.packages("cdcosso")
install.packages("cdcosso")
R.Version()
R.version$version.string
R.version$version.string
R.version$version.string
devtools::install_github("jiieushin/cdcosso")
devtools::install_github("jiieunshin/cdcosso")
install_github
devtools::install_github("jiieunshin/cdcosso")
devtools::install_github("jiieunshin/cdcosso", force = TRUE)
cdcosso
library(cdcosso)
tr = data_generation(n, p, type = "additive", response = "classification")
#'
#' @param n Model object fitted from the cdcosso package.
#' @param p The test data you want to predict.
#' @param rho The test data you want to predict.
#' @param a The test data you want to predict.
#' @param type The test data you want to predict.
#' @param response The test data you want to predict.
#'
#' @return a list containing the predicted value for the test data (f.new) and the transformed value of that predicted value (mu.new).
#' @export
data_generation = function(n, p, rho, a, type = c("indep", "group-effect", "additive", "interaction", "survival"),
response = c("regression", "classification", "count")){
g1 = function(t) t/4
g2 = function(t) (t/2)^2 - 1
g3 = function(t) exp(3*t)/(1+exp(3*t))
g4 = function(t) sin(t)^3
g5 = function(t) sin(1.4*t)
g6 = function(t) exp(-t/2) * sin(t*2) / 3
if(missing(type))
type = "indep"
type = match.arg(type)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.4
if(type != 'survival'){
if(missing(response))
response = "regression"
response = match.arg(response)
if(type == 'indep'){
Sigma = matrix(rho, 5, 5)
diag(Sigma) = 1
beta = c(rep(3, 5), rep(0, p-5))
x_sig = rmvnorm(n, mean = rep(0, 5), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-5)), n, p-5)
x = cbind(x_sig, x_nois)
pi = exp(x %*% beta) / (exp(x %*% beta) + 1)
y = rbinom(n, 1, pi)
}
if(type == 'group-effect'){
Sigma = matrix(rho, 5, 5)
diag(Sigma) = 1
beta = c(rep(3, 5), rep(0, p-5))
x_sig = rmvnorm(n, mean = rep(0, 5), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-5)), n, p-5)
x = cbind(x_sig, x_nois)
pi = exp(x %*% beta) / (exp(x %*% beta) + 1)
y = rbinom(n, 1, pi)
}
if(type == "additive"){
if(p <= 6) stop("dimension size should be larger than 6.")
Sigma = matrix(rho, 6, 6)
diag(Sigma) = 1
x_sig = rmvnorm(n, mean = rep(0, 6), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-6)), n, p-6)
x = cbind(x_sig, x_nois)
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(2,3))
# plot(x[,1], g1(x[,1]), cex = .6, pch = 16, xlab = 'x1', ylab = 'f1')
# plot(x[,2], g2(x[,2]), cex = .6, pch = 16, xlab = 'x2', ylab = 'f2')
# plot(x[,3], g3(x[,3]), cex = .6, pch = 16, xlab = 'x3', ylab = 'f3')
# plot(x[,4], g4(x[,4]), cex = .6, pch = 16, xlab = 'x4', ylab = 'f4')
# plot(x[,5], g5(x[,5]), cex = .6, pch = 16, xlab = 'x5', ylab = 'f5')
# plot(x[,6], g6(x[,6]), cex = .6, pch = 16, xlab = 'x6', ylab = 'f6')
# par(mfrow = c(1,1))
f = 3*(g1(x[,1]) + g2(x[,2]) + g3(x[,3]) + g4(x[,4]) + g5(x[,5]) + g6(x[,6])) + rnorm(n, 0, .1)
}
if(type == 'interaction'){
if(p <= 6) stop("dimension size should be larger than 6.")
x = matrix(runif(n*p), n, p)
Sigma = matrix(rho, 6, 6)
diag(Sigma) = 1
x_sig = rmvnorm(n, mean = rep(0, 6), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-6)), n, p-6)
x = cbind(x_sig, x_nois) + rnorm(n, 0, 0.01)
f = 3*g1(x[,1])*g2(x[,2]) + 5*g3(x[,3])*g4(x[,4]) + 4*g5(x[,5])*g6(x[,6]) +
3*g2(x[,2])*g5(x[,5]) + 5*g2(x[,2])*g6(x[,6]) + 4*g5(x[,5])*g6(x[,6]) + rnorm(n, 0, 1)
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
# plot(prob)
# table(y)
}
if(response == "regression"){
y = f
}
if(response == "classification"){
prob = exp(f)/(exp(f) + 1)
# plot(prob)
y = rbinom(n, 1, prob)
}
if(response == "count"){
mu = exp(f)
mu = ifelse(mu > 100, 100, mu)
y = rpois(n, mu)
}
return(list(x = x, y = y))
}else if(type == 'survival'){
if(p <= 6) stop("dimension size should be larger than 6.")
if(missing(a)) a = 0.3
x = matrix(runif(n*p), n, p)
Sigma = matrix(rho, 6, 6)
diag(Sigma) = 1
x_sig = rmvnorm(n, mean = rep(0, 6), sigma = Sigma)
x_nois = matrix(rnorm(n * (p-6)), n, p-6)
x = cbind(x_sig, x_nois)
f = 2*(g1(x[,1]) + g2(x[,2]) + g3(x[,3]) + g4(x[,4]) + g5(x[,5]) + g6(x[,6])) + rnorm(n, 0, 1)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
return(list(x = x, f = f, y = y))
}
}
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
i=1
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
te_y = te$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
devtools::install_github("jiieunshin/cdcosso")
devtools::install_github("jiieunshin/cdcosso")
devtools::install_github("jiieunshin/cdcosso", force = TRUE)
devtools::install_github("jiieunshin/cdcosso", force = TRUE)
library(cdcosso)
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
te_y = te$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
devtools::install_github("jiieunshin/cdcosso")
n = 100
te_n = 1000
p_sig = 6
p = 50
out = matrix(0, 32, 9)
colnames(out) = c("n", "p", "gamma", "f1", "f1_se", "miss", "miss1_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
library(cdcosso)
tr = data_generation(n, p, type = "additive", response = "classification")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, type = "additive", response = "classification")
te_x = te$x
te_y = te$y
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.8, kernel = "gaussian", one.std = TRUE, scale = T), silent = TRUE)
fit10
