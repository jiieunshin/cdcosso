% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cdcosso.R
\name{cdcosso}
\alias{cdcosso}
\title{Load a matrix from a file}
\usage{
cdcosso(
  x,
  y,
  family = c("gaussian", "binomial", "poisson", "negbin", "svm", "Cox"),
  kernel = c("linear", "gaussian", "poly", "spline"),
  effect = c("main", "interaction"),
  algo = c("CD", "QP"),
  wt = rep(1, ncol(x)),
  kparam = 1,
  lambda0,
  lambda_theta,
  M,
  gamma = 0.3,
  nfolds = 5,
  one.std = TRUE,
  scale = TRUE,
  cpus
)
}
\arguments{
\item{x}{Explanation variable matrix or data frame.}

\item{y}{Dependent variable vector or matrix or data frame containing time and status columns (for Cox model).}

\item{family}{Type of statistical model. Use one of the following strings: "gaussian", "binomial", "poisson", "negbin", "svm", or "Cox".}

\item{kernel}{Type of kernel function to use in case of SVM model. Use one of the following strings: "linear", "gaussian", "poly", "spline", "anova_gaussian", or "gaussian2".}

\item{algo}{Type of optimization algorithm. Use either the string "CD" (Coordinate Descent) or "QP".}

\item{wt}{Weight vector for each explanatory variable. The default is to use the same weight of 1 for all variables.}

\item{kparam}{Kernel parameter values to use for SVM models.}

\item{lambda0}{Penalty parameter vector for Lasso and Ridge regression.}

\item{lambda_theta}{Vector of penalty parameters to be applied to different parts of the model.}

\item{M}{Vector of Lagrange multiplier.}

\item{gamma}{Gamma value used in Stochastic Search Optimization.}

\item{nfolds}{Number of folds for cross-validation.}

\item{one.std}{Logical value indicating whether to standardize explanatory variables.}

\item{scale}{A logical value indicating whether to scale the explanatory variable by min-max.}

\item{cpus}{Number of CPUs for parallel processing.}
}
\value{
A list containing information about the fitted model. Depending on the type of dependent variable, various information may be returned.
}
\description{
The cdcosso function is a function that solves component selection using the Coordinate Descent algorithm.
This function can be applied to various response variables, continuous, count, binary, and survival analysis.
Because it is a type of nonparametric inference, various types of kernels can be selected.
To select hyperparameters, the function is designed to perform cross-validation.
}
